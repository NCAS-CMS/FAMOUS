*IDENT BOUNDSFAMOUS
*/
*/ Fixes necessary for bounds checking FAMOUS. 
*/
*/ These fixes are all from Paul Valdes's coupled_bugs4.
*/ 	 Annette Osprey 19-March-2008
*/ 
*/ bounds_fix_famous2.mod :
*/ Fixed so that pp_lblev set correctly for ocean.
*/       Annette Osprey 06-January-2009
*/
*/
*/ This next one arose from famous and is to do with an invalid
*/ bound on an if statement array index. (PJV)
*/
*DECLARE PPHEAD1A
*I PPHEAD1A.126
     *,  ilevelfix    ! used for array bound problem in IF statement
*D GPB0F403.29,34
           if (lvcode.eq.ppx_half_level) then
              ilevelfix=LevIndex
              if (ilevelfix.gt.t_levels+1) ilevelfix=t_levels+1
              if (bkh(ilevelfix).eq.1.0) then
                 pp_lblev=ppx_meto8_surf
              else
                 pp_lblev=level+0.00001
              end if
           else
              pp_lblev=level+0.00001
           end if
*/
*/
*/   Another bounds problem, found for famous.
*/   This has been solved by adhoc fix but could do
*/   with locating real problem. (PJV)
*/
*DECLARE STZONM1A
*I STZONM1A.81
      INTEGER JLOOP
*D GPB0F403.2853
      JLOOP=n_rows_full_zonal_data
      if (jloop.gt.global_yend-global_ystart+1) 
     :    jloop=global_yend-global_ystart+1
      do j=1,jloop
*/
*/
*/   The CO2 related code calls a subroutine with one argument
*/   D(JA_CO2) (or equivalent flux) but JA_CO2 is 0
*/   if CO2 flag if false. This causes a bounds error, although
*/   is not important since the array is never used within the
*/   subroutine. Solution is a but cludgy but works.
*/
*DECLARE SWAPO2A1
*D CCN1F405.412
     & O_CO2FLUX,D1(MAX(JA_CO2FLUX,1)),
     : CO2_ICOLS,CO2_JROWS,CO2_IMT,CO2_JMT,
*DECLARE SWAPA2O1
*D CCN1F405.372   
     & ATMCO2, D1(MAX(JO_CO2,1)), 
     : CO2_ICOLS, CO2_JROWS, CO2_IMT, CO2_JMT,
*/
*/
*/  Bounds problem when calculating flow between med and Atlantic
*/  Standard version of low resolution model only uses one point
*/  on each side of straits (standard HadCM3 uses average of two
*/  points). The second pair of points are set to coordinate zero
*/  and this causes a bounds error (but code appears to be 
*/  otherwise OK). Add if statement, so that code is only executed 
*/  if using all 4 points.
*/
*/  Also, last line of this routine needs to be deleted to make
*/  that update can be used in all model configurations (otherwise
*/  when using atmosphere only, subroutine ends up being 1 byte long)
*/
*DECLARE READ_REM
*I READ_REM.165
      if (jmsend(3).gt.0) then
*I READ_REM.219
      end if
*I READ_REM.222
      if (jmsend(4).gt.0) then
*I READ_REM.275
      end if
*D READ_REM.283
*/
*/
*/   Another bounds problem, found using famous when adding
*/   standard BRIDGE STASH output. Like the bug above, the
*/   solution is a pragmatic fix without understanding cause
*/   of problem
*/
*DECLARE INITCTL1
*D GSS1F305.459
           if (-stlist(st_input_bottom,ii).le.NUM_LEVEL_LISTS) then
              NUM_LEVELS=STASH_LEVELS(1,-STLIST(st_input_bottom,II))
           else 
              num_levels=1 
           end if
