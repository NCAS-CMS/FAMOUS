#!/bin/ksh
# ----------------------------- COPYRIGHT ---------------------------- #
#          (c) BRITISH CROWN COPYRIGHT 1999, THE MET.OFFICE            #
#                                                                      #
# Use, duplication or disclosure of this code is subject to the        #
# restrictions as set forth in the contract. If no contract has been   #
# raised with this copy of the code, use, duplication or disclosure    #
# of it is strictly prohibited. Permission to do so must first be      #
# obtained in writing from the Head of Numerical Modelling at UKMO.    #
# ----------------------------- COPYRIGHT ---------------------------- #
#LL---------------------------------------------------------------------
#LL  Script:  unpackmodel
#LL---------------------------------------------------------------------
#LL
#LL  Purpose: Generates scripts and global variables required for
#LL           building the unified model.
#LL
#LL  Current Owner: Anette Van der Wal
#LL  Reviewer:                Date of review:
#LL
#LL  Tested under OS version: Digital OSF1 V4.0
#LL  UM version no: 4.5(p)  Date of test: 22nd September 1999
#LL
#LL  History:
#LL   Model
#LL  version  Date      Modification history:
#LL    3.2    04/06/93  Original version (Paul Burton)
#LL    3.4    29/06/94  Changed directory structure
#LL                     Also modified header layout.  (Tracey Smith)
#LL    3.4    05/09/94  Removed makescritps step and changed
#LL                     install to Install (T Smith)
#LL    3.4    03/11/94  Remove #!/bin/sh  (T Smith)
#LL    3.4    18/01/95  Major rewrite for vn3.4 (T Smith)
#LL    3.5    07/02/95  Improved unpacking of the Portable model
#LL                             (Tracey Smith & Nicola Farnon)
#LL    4.0    07/02/95  Introduce option for other platforms to compile
#LL                     the UM scripts automatically. (N.Farnon)
#LL    4.1    16/04/96  Major simplification. (Mussadiq Ahmed)
#LL    4.1    20/05/96  Edited to enable use on Met Office C90
#LL                     G Henderson
#LL    4.1    13/05/96  Use nupdate to extract mkscripts(Mussadiq Ahmed)
#LL    4.2    14/10/96  Changes for T3E
#LL    4.3    26/02/97  unpackmodel changed for new build scripts
#LL                     Lexcon is no longer supported and has been
#LL                     removed. - Nicola Farnon
#LL    4.3    04/03/97  Replace buildhost type GENERIC with workstation
#LL                     specific buildhosts HP_f77 and Dec_f77. This was
#LL                     done to aid testing, by getting a system up and
#LL                     running, without making changes to the current
#LL                     compile system structure.  Hand edits to the
#LL                     obj_xref file will be required if a system which
#LL                     not supported directly is set up.
#LL    4.4    15/10/97  Add in step to create an obj_xref file for the
#LL                     platform the UM scripts are being installed
#LL                     upon.  (S Robertson)
#LL    4.4    18/11/97  remove the untarring of portable UM
#LL                     for external users (Mussadiq Ahmed)
#LL    4.4    10/11/97  Changed to use ${NPROC:-8} in setglobalvars
#LL                     in case NPROC overidden by user.  K Rogers
#LL    4.5    15/09/98  Removed UMVERSION, updated PROGDEFS. K Rogers
#LL    4.5    12/06/98  Changed FORT to FFORT, and added LLOAD and LOPTS
#LL                     Added "" around FOPTS, LOPTS and COPTS
#LL                     (A Van der Wal)
#LL    4.5    12/06/98  Reset PROGDEFS and remove redundant code
#LL                     Add F_C_LINK default values
#LL                     Add missing CRAY DEF question
#LL                     (A Van der Wal)
#LL    4.5    14/07/98  Added FPATH to setvars and setglobalvars
#LL    4.5    03/08/98  Additional questions for Fujitsu (A Van der Wal)
#LL    4.5(p) 22/09/99  Major re-write for portable vn4.5
#LL
#LL  Programming standard: UMDP 3, version 7
#LL
#LL  Project task:
#LL
#LL  Logical components covered:
#LL
#LL  External documentation: UMDP X4, version 7
#LL
#L   Interface and arguments:
#L
#L   unpackmodel
#L
#L   -------------------------------------------------------------------
#L
#L   Called by: None
#L   Calls    : setvars (note: setvars is created within this script)
#L            : makescripts
#L            : mkobjxref
#L            : mkexecxref
#L            : mkcompvars
#L
#L   Imports:
#L
#L   Exports:
#L     UMMACHINE        - machine UM will run on
#L     BUILDHOST        - a build name; machine name and compiler
#L     UM_SECTOR_SIZE   - size of disk sectors for well-formed I/O
#L     UM_HOME          - UM user home directory
#L     UMDIR		- main UM directory
#L     UM_TMP           - UM temporary directory
#L     MY_OUTPUT        - Output directory
#L     SCRMODS          - Mods for scripts, applied as they are unpacked
#L     NPROC            - Number of processors for parallel compiles
#L     CCOM_CMD         - c compiler name
#L     CCOM_OPTS        - c compiler options
#L     CCOM_OPTIM       - c compiler optimizations
#L     FCOM_CMD         - fortran compiler name
#L     FCOM_OPTS        - fortran compiler options
#L     FCOM_OPTIM       - fortran compiler optimizations
#L     LCOM_CMD         - load command
#L     LCOM_OPTS        - load options
#L     LCOM_PATH        - load path
#L     LCOM_LIBS        - load libraries
#L     COM_SPECIFIC     - file containing deck specific compile options
#L     FC_LINK          - fortran-C interface
#L     FRL8             - c equivalent of fortran real
#L     BIGEND           - is the platform bigendian
#L     USE_CRAY_NUPDATE - use cray version of nupdate?
#L     UPDATEVN		- nupdate version number
#L     UPDATEDIR        - directory containing nupdate directory
#L     UM_PE_LABEL      - label for the high memory PE (if applicable)
#L     PROGDEFS         - list of *DEFS for the source code
#L     (made up of FC_LINK, FRL8, MPP, MPPRECON, BLDNOMPP, CRAY,
#L      CRI_OPEN, T3E, T3D, FUJITSU, VECTLIB)
#L     SCRDEFS          - list of *DEFS for the scripts
#L     (made up of UMMACHINE, CRAYMPP, VECTLIB, MPP, CRAYF90)
#L     FPATH
#L
#L   Local variables:
#L     LOG              - output log file
#L     CONFIG           - confiuration file
#L     CONFIG_TMP       - temporary configuration file
#L     MACH_DEFS        - file of machine default answers
#L     FCTEST           - directory containing the fc_test utility
#L     FCTEST_TMP       - temporary file containing output from fc_test
#L     FIGLET           - directory containing the figlet source code
#L     FIGLET_UTIL      - directory where the figlet executable will go
#L     BIGEND_UTIL      - directory containing the bigend utility
#L     TMPFILE          - a temporary file
#L     ANSWER           - used to read user input
#L     FRL_SIZE         - size of a Fortran real
#L     USE_CONFIG       - use answers from the configuration file
#L     PLATFORM         - number of the chosen platform
#L     VALID            - signifies whether answer is valid
#L
#L End of header -------------------------------------------------------

#=======================================================================
# File names

set -a
VN=4.5

LOG=$HOME/unpack_$VN.log
CONFIG=$HOME/config_$VN.cache
CONFIG_TMP=$HOME/config_$VN.cache.tmp
FCTEST=\$UMDIR/vn$VN/utils/fc_test-1.1
FCTEST_TMP=$HOME/fctest_out
FIGLET=\$UMDIR/vn$VN/utils/figlet-2.2
FIGLET_UTIL=\$UMDIR/bin/figlet
BIGEND_UTIL=\$UMDIR/vn$VN/utils/bigend-1.1
UPDATE_DEF=0.4.9
TMPFILE=/tmp/um45unpack

FIRST=`echo -e $0 | cut -c1`
if test "$FIRST" = "/"; then
  MACH_PATH=`dirname $0`
else
  MACH_PATH="`pwd`/`dirname $0`"
fi
MACH_DEFS=$MACH_PATH/mach_defaults

#=======================================================================
# Functions

check_tf()
{
  # Checks for a true or false answer

  ANSWER=null
  DEFAULT=$1
  while test "$ANSWER" = "null"; do
    read ANSWER
    ANSWER=${ANSWER:-$DEFAULT}
    ANSWER=`echo -e $ANSWER | tr "[A-Z]" "[a-z]"`

    case $ANSWER in
      t | true  | y | yes ) ANSWER=true;;
      f | false | n | no  ) ANSWER=false;;
      q | quit  | x | exit) exit;;
      *                   ) ANSWER=null;;
    esac

    if test "$ANSWER" = "null"; then
      echo -e "Invalid response"
      echo -e "Please re-enter your answer"
    fi
  done
}

getvar()
{
  VARNAME=$1
  FILE=$2

  LINE=`grep "^${VARNAME}=" $FILE`
  CC=$?
  if test $CC -eq 0; then
    OUTVAR=`echo -e $LINE | cut -f2- -d"="`
    echo -e $OUTVAR
  else
    exit 1
  fi
}

testcc()
{
  CC=$1
  INFO=$2

  if test $CC -ne 0; then
    echo -e "Unpackmodel: An error has been detected whilst"
    echo -e "             $INFO"
    echo -e "Unpackmodel: Program terminating"
    exit 1
  fi
}


#=======================================================================
# Start

echo -e "--------------------------------------------------------"
echo -e "       UK MET. OFFICE UNIFIED MODEL VERSION $VN         "
echo -e "                                                        "
echo -e "Please read Document X4 - Guidelines for Building the   "
echo -e "Unified Model on External Systems - before continuing   "
echo -e "                                                        "
echo -e "Progress will be recorded in the file:                  "
echo -e "$LOG"
echo -e "                                                        "
echo -e "Where applicable, default answers are given in [] after "
echo -e "the question; hitting <return> will select the default  "
echo -e "                                                        "
echo -e "Default answers will be taken from the file:            "
echo -e "$CONFIG"
echo -e "if it exists, otherwise from                            "
echo -e "$MACH_DEFS"
echo -e "--------------------------------------------------------"
echo -e
echo -e "Press RETURN to continue..."
read ANSWER
echo -e

# Check if log file already exists

if test -s $LOG; then
  echo -e "$LOG exists"
  echo -e "Overwrite? [n]"
  check_tf n
  if test "$ANSWER" = "false"; then
    exit
  fi
  echo -e
fi

echo -e "Stage 0 - Preliminaries" >> $LOG
echo -e "-----------------------" >> $LOG
echo -e >> $LOG

echo -e "--------------------------------------------------------"
echo -e " Step 0.1: Check Machine Defaults File Exists           "
echo -e "--------------------------------------------------------"
echo -e

if test -s "$MACH_DEFS"; then
  chmod 755 $MACH_DEFS
  echo -e "Machine defaults file: $MACH_DEFS" >> $LOG
else
  echo -e "File $MACH_DEFS doesn't exist"
  echo -e "Please extract from umsl before proceeding"
  exit 1
fi

echo -e "--------------------------------------------------------"
echo -e " Step 0.2: Choose Source of Defaults                    "
echo -e "--------------------------------------------------------"
echo -e

USE_CONFIG=false
if test -s $CONFIG; then
  echo -e "$CONFIG exists"
  echo -e "Use the defaults from here? [y]"
  check_tf y
  USE_CONFIG=$ANSWER
  echo -e
fi

if test "$USE_CONFIG" = "true"; then
  echo -e "Defaults taken from $CONFIG" | tee -a $LOG
  PLATFORM=`getvar PLATFORM $CONFIG`
else
  echo -e "Defaults taken from $MACH_DEFS" | tee -a $LOG
  rm -rf $CONFIG
  PLATFORM=1
  SKIP_QUESTIONS="false"
fi
echo -e

if test "$USE_CONFIG" = "true"; then

  echo -e "--------------------------------------------------------"
  echo -e " Step 0.3: Choose Quick or Slow Unpack                  "
  echo -e "--------------------------------------------------------"
  echo -e
  echo -e "Unpack the UM, taking answers directly from"
  echo -e "${CONFIG}? [n]"
  check_tf n
  if test "$ANSWER" = "false"; then
    SKIP_QUESTIONS="false"
  else
    SKIP_QUESTIONS="true"
  fi
fi

echo -e "Portable Unified Model vn$VN unpacking started on `date`" > $LOG
echo -e >> $LOG
echo -e >> $LOG

if test "$SKIP_QUESTIONS" = "false"; then

echo -e "Stage 1 - Machine Type, Directory Structure, Mods and Paths" \
     >> $LOG
echo -e "-----------------------------------------------------------" \
     >> $LOG
echo -e >> $LOG

echo -e "--------------------------------------------------------"
echo -e " Step 1.1: Select Machine Type                          "
echo -e "--------------------------------------------------------"
echo -e
echo -e "Please select a platform from the list of supported"
echo -e "platforms below: [$PLATFORM]"
echo -e
echo -e "1) Cray T3E (Met Office only)"
echo -e "2) T3E (Generic)"
echo -e "3) Cray Parallel Vector Processor"
echo -e "4) Hewlett Packard Workstation"
echo -e "5) Dec Alpha Workstation"
echo -e "6) SGI Origin/Octane"
echo -e "7) Linux x86 using Fujitsu Fortran90 compiler"
echo -e "8) Other"
echo -e "x) Exit script"
echo -e

VALID=null
while test "$VALID" = "null"
do
  read ANSWER
  ANSWER=${ANSWER:-$PLATFORM}

  case $ANSWER in
    [1-8] ) if test "$ANSWER" != "$PLATFORM" -a "$USE_CONFIG" = "true"
            then
              echo -e "Platform has changed since last build"
              echo -e "Cannot use defaults from $CONFIG"
              echo -e "Removing $CONFIG"
              echo -e "OVERRULE: Defaults taken from $MACH_DEFS" >> $LOG
              rm $CONFIG
            fi
            if test ! -s $CONFIG; then
              $MACH_DEFS $ANSWER $CONFIG
            fi
            VALID="true";;
    X | x ) exit;;
    *     ) echo -e "Invalid response"
            echo -e "Please re-enter your answer";;
  esac
done

cat > $CONFIG_TMP <<EOF
PLATFORM=$ANSWER
EOF

UMMACHINE=`getvar UMMACHINE $CONFIG`
cat >> $CONFIG_TMP <<EOF
UMMACHINE=$UMMACHINE
EOF

echo -e "UM Machine set to $UMMACHINE" >> $LOG
echo -e >> $LOG

# Get UM_SECTOR_SIZE and BUILDHOST. These are set values

UM_SECTOR_SIZE=`getvar UM_SECTOR_SIZE $CONFIG`
BUILDHOST=`getvar BUILDHOST $CONFIG`

cat >> $CONFIG_TMP <<EOF
UM_SECTOR_SIZE=$UM_SECTOR_SIZE
BUILDHOST=$BUILDHOST
EOF

if test "$UMMACHINE" != "METOCRAY"
then

  echo -e "--------------------------------------------------------"
  echo -e " Step 1.2: Build Directory Structure                    "
  echo -e "--------------------------------------------------------"
  echo -e

  # Set UM directories

  UM_HOME=`getvar UM_HOME $CONFIG`
  echo -e "Enter UM_HOME [$UM_HOME]"
  read ANSWER
  ANSWER=`eval "echo -e $ANSWER"`
  UM_HOME=${ANSWER:-$UM_HOME}
  cat >> $CONFIG_TMP <<EOF
UM_HOME=$UM_HOME
EOF

  if test ! -d $UM_HOME; then
    mkdir $UM_HOME
  fi

  echo -e "The UM home directory has been located at" >> $LOG
  echo -e "$UM_HOME" >> $LOG
  echo -e

  UMDIR=`getvar UMDIR $CONFIG`
  UMDIR=`eval "echo -e $UMDIR"`
  echo -e "Enter UMDIR [$UMDIR]"
  read ANSWER
  ANSWER=`eval "echo -e $ANSWER"`
  UMDIR=${ANSWER:-$UMDIR}
  cat >> $CONFIG_TMP <<EOF
UMDIR=$UMDIR
EOF
  export UMDIR

  if test ! -d $UMDIR; then
    mkdir $UMDIR
  fi

  echo -e "The main UM directory has been located at" >> $LOG
  echo -e "$UMDIR" >> $LOG
  echo -e

  UMTEST=`getvar UMTEST $CONFIG`
  UMTEST=`eval "echo -e $UMTEST"`
  echo -e "Enter UMTEST [$UMTEST]"
  read ANSWER
  ANSWER=`eval "echo -e $ANSWER"`
  UMTEST=${ANSWER:-$UMTEST}
  cat >> $CONFIG_TMP <<EOF
UMTEST=$UMTEST
EOF
  export UMTEST

  if test ! -d $UMTEST; then
    mkdir $UMTEST
  fi

  echo -e "The UM test directory has been located at" >> $LOG
  echo -e "$UMTEST" >> $LOG
  echo -e

  # Directories which will change for each user

  MY_UMHOME=`getvar MY_UMHOME $CONFIG`
  echo -e "Enter MY_UMHOME [$MY_UMHOME]"
  read ANSWER
  MY_UMHOME=${ANSWER:-$MY_UMHOME}
  cat >> $CONFIG_TMP <<EOF
MY_UMHOME=$MY_UMHOME
EOF

  echo -e "The user UM home directory has been located at" >> $LOG
  echo -e "$MY_UMHOME" >> $LOG
  echo -e

  UM_TMP=`getvar UM_TMP $CONFIG`
  echo -e "Enter UM_TMP [$UM_TMP]"
  read ANSWER
  UM_TMP=${ANSWER:-$UM_TMP}
  cat >> $CONFIG_TMP <<EOF
UM_TMP=$UM_TMP
EOF

  echo -e "The UM temporary directory has been located at" >> $LOG
  echo -e "$UM_TMP" >> $LOG
  echo -e

  MY_OUTPUT=`getvar MY_OUTPUT $CONFIG`
  echo -e "Enter MY_OUTPUT [$MY_OUTPUT]"
  read ANSWER
  MY_OUTPUT=${ANSWER:-$MY_OUTPUT}
  cat >> $CONFIG_TMP <<EOF
MY_OUTPUT=$MY_OUTPUT
EOF

  echo -e "The user output directory has been located at" >> $LOG
  echo -e "$MY_OUTPUT" >> $LOG
  echo -e

  if test ! -d $UMDIR/bin; then
    mkdir $UMDIR/bin
  fi

  echo -e "The UM bin directory is" >> $LOG
  echo -e "$UMDIR/bin" >> $LOG
  echo -e
  echo -e >> $LOG

  echo -e "--------------------------------------------------------"
  echo -e " Step 1.3: Script Modifications                         "
  echo -e "--------------------------------------------------------"
  echo -e

  SCRMODS=`getvar SCRMODS $CONFIG`
  echo -e "Enter SCRMODS, the file containing any mods for the"
  echo -e "scripts [$SCRMODS]"
  read ANSWER
  ANSWER=`eval "echo -e $ANSWER"`
  SCRMODS=${ANSWER:-$SCRMODS}
  cat >> $CONFIG_TMP <<EOF
SCRMODS=$SCRMODS
EOF

  if test -z "$SCRMODS"; then
    echo -e "Not using script mods" >> $LOG
  else
    echo -e "Using script mods from file" >> $LOG
    echo -e "$SCRMODS" >> $LOG
  fi
  echo -e >> $LOG
  echo -e

  echo -e "--------------------------------------------------------"
  echo -e " Step 1.4: Utility PATHs                                "
  echo -e "--------------------------------------------------------"
  echo -e

  UM_AWK=`whence awk`
  UM_SED=`whence sed`
  UM_GREP=`whence grep`

  echo -e "Change the default location ($UM_AWK) of awk? [n]"
  check_tf n
  CHANGE_AWK=$ANSWER

  if test "$CHANGE_AWK" = "true"; then
    UM_AWK=`getvar UM_AWK $CONFIG`
    echo -e "Enter UM_AWK, the path and name of the awk utility"
    echo -e "[$UM_AWK]"
    read ANSWER
    ANSWER=`eval "echo -e $ANSWER"`
    UM_AWK=${ANSWER:-$UM_AWK}
  fi

  echo -e "Change the default location ($UM_SED) of sed? [n]"
  check_tf n
  CHANGE_SED=$ANSWER

  if test "$CHANGE_SED" = "true"; then
    UM_SED=`getvar UM_SED $CONFIG`
    echo -e "Enter UM_SED, the path and name of the sed utility"
    echo -e "[$UM_SED]"
    read ANSWER
    ANSWER=`eval "echo -e $ANSWER"`
    UM_SED=${ANSWER:-$UM_SED}
  fi

  echo -e "Change the default location ($UM_GREP) of grep? [n]"
  check_tf n
  CHANGE_GREP=$ANSWER

  if test "$CHANGE_GREP" = "true"; then
    UM_GREP=`getvar UM_GREP $CONFIG`
    echo -e "Enter UM_GREP, the path and name of the grep utility"
    echo -e "[$UM_GREP]"
    read ANSWER
    ANSWER=`eval "echo -e $ANSWER"`
    UM_GREP=${ANSWER:-$UM_GREP}
  fi

else
  UM_AWK=`whence awk`
  UM_SED=`whence sed`
  UM_GREP=`whence grep`
fi

echo -e "The awk utility is $UM_AWK " >> $LOG
echo -e "The sed utility is $UM_SED " >> $LOG
echo -e "The grep utility is $UM_GREP " >> $LOG
echo -e >> $LOG

cat >> $CONFIG_TMP <<EOF
UM_AWK=$UM_AWK
UM_SED=$UM_SED
UM_GREP=$UM_GREP
EOF

#=======================================================================

echo -e "Stage 2 - Compiler Options / Software Management" >> $LOG
echo -e "------------------------------------------------" >> $LOG
echo -e >> $LOG

echo -e "--------------------------------------------------------"
echo -e " Step 2.1: Select Number of Parallel Compilations       "
echo -e "--------------------------------------------------------"
echo -e

NPROC=`getvar NPROC $CONFIG`
echo -e "Please select the number of compilations that can run"
echo -e "in parallel on your machine [$NPROC]"
read ANSWER
NPROC=${ANSWER:-$NPROC}
cat >> $CONFIG_TMP <<EOF
NPROC=$NPROC
EOF

echo -e "The number of parallel compilations is set to $NPROC" >> $LOG
echo -e >> $LOG
echo -e

echo -e "--------------------------------------------------------"
echo -e " Step 2.2: Compilers & Options                          "
echo -e "--------------------------------------------------------"
echo -e

# C compiler

CCOM_CMD=`getvar CCOM_CMD $CONFIG`
echo -e "Enter the name of your C compiler [$CCOM_CMD]" | tee -a $LOG
read ANSWER
CCOM_CMD=${ANSWER:-$CCOM_CMD}
echo -e "Answer: $CCOM_CMD" >> $LOG
cat >> $CONFIG_TMP <<EOF
CCOM_CMD=$CCOM_CMD
EOF

CCOM_OPTS=`getvar CCOM_OPTS $CONFIG`
echo -e "Enter the C compiler options [$CCOM_OPTS]" | tee -a $LOG
read "ANSWER"
CCOM_OPTS="${ANSWER:-$CCOM_OPTS}"
echo -e "Answer: $CCOM_OPTS" >> $LOG
cat >> $CONFIG_TMP <<EOF
CCOM_OPTS=$CCOM_OPTS
EOF

CCOM_OPTIM=`getvar CCOM_OPTIM $CONFIG`
echo -e "Enter the C compiler optimizations [$CCOM_OPTIM]" | tee -a $LOG
read "ANSWER"
CCOM_OPTIM="${ANSWER:-$CCOM_OPTIM}"
echo -e "Answer: $CCOM_OPTIM" >> $LOG
cat >> $CONFIG_TMP <<EOF
CCOM_OPTIM=$CCOM_OPTIM
EOF

# Fortran compiler

FCOM_CMD=`getvar FCOM_CMD $CONFIG`
echo -e "Enter the name of your Fortran compiler [$FCOM_CMD]"  | \
  tee -a $LOG
read ANSWER
FCOM_CMD=${ANSWER:-$FCOM_CMD}
echo -e "Answer: $FCOM_CMD" >> $LOG
cat >> $CONFIG_TMP <<EOF
FCOM_CMD=$FCOM_CMD
EOF

FCOM_OPTS=`getvar FCOM_OPTS $CONFIG`
echo -e "Enter the Fortran compiler options [$FCOM_OPTS]" | tee -a $LOG
read "ANSWER"
FCOM_OPTS="${ANSWER:-$FCOM_OPTS}"
echo -e "Answer: $FCOM_OPTS" >> $LOG
cat >> $CONFIG_TMP <<EOF
FCOM_OPTS=$FCOM_OPTS
EOF

FCOM_OPTIM=`getvar FCOM_OPTIM $CONFIG`
echo -e "Enter the Fortran compiler optimizations [$FCOM_OPTIM]" | \
  tee -a $LOG
read "ANSWER"
FCOM_OPTIM="${ANSWER:-$FCOM_OPTIM}"
echo -e "Answer: $FCOM_OPTIM" >> $LOG
cat >> $CONFIG_TMP <<EOF
FCOM_OPTIM=$FCOM_OPTIM
EOF

# Linker

LCOM_CMD=`getvar LCOM_CMD $CONFIG`
echo -e "Enter the name of your linker [$LCOM_CMD]" | tee -a $LOG
read ANSWER
LCOM_CMD=${ANSWER:-$LCOM_CMD}
echo -e "Answer: $LCOM_CMD" >> $LOG
cat >> $CONFIG_TMP <<EOF
LCOM_CMD=$LCOM_CMD
EOF

LCOM_OPTS=`getvar LCOM_OPTS $CONFIG`
echo -e "Enter the linker options [$LCOM_OPTS]" | tee -a $LOG
read "ANSWER"
LCOM_OPTS="${ANSWER:-$LCOM_OPTS}"
echo -e "Answer: $LCOM_OPTS" >> $LOG
cat >> $CONFIG_TMP <<EOF
LCOM_OPTS=$LCOM_OPTS
EOF

LCOM_PATH=`getvar LCOM_PATH $CONFIG`
echo -e "Enter any library path options [$LCOM_PATH]" | tee -a $LOG
read "ANSWER"
LCOM_PATH="${ANSWER:-$LCOM_PATH}"
echo -e "Answer: $LCOM_PATH" >> $LOG
cat >> $CONFIG_TMP <<EOF
LCOM_PATH=$LCOM_PATH
EOF

LCOM_LIBS=`getvar LCOM_LIBS $CONFIG`
echo -e "Enter any library options [$LCOM_LIBS]" | tee -a $LOG
read "ANSWER"
LCOM_LIBS="${ANSWER:-$LCOM_LIBS}"
echo -e "Answer: $LCOM_LIBS" >> $LOG
cat >> $CONFIG_TMP <<EOF
LCOM_LIBS=$LCOM_LIBS
EOF

COM_SPECIFIC=`getvar COM_SPECIFIC $CONFIG`
echo -e "Enter the file (with full path) containing any compile" | \
  tee -a $LOG
echo -e "options for specific decks [$COM_SPECIFIC]" | tee -a $LOG
read ANSWER
COM_SPECIFIC=${ANSWER:-`eval "echo -e $COM_SPECIFIC"`}
echo -e "Answer: $COM_SPECIFIC" >> $LOG
cat >> $CONFIG_TMP <<EOF
COM_SPECIFIC=$COM_SPECIFIC
EOF

echo -e >> $LOG
echo -e

echo -e "--------------------------------------------------------"
echo -e " Step 2.3: Fortran/C Interface and Wordlength           "
echo -e "--------------------------------------------------------"
echo -e

echo -e "The interface and wordlength can be calculated, or the"
echo -e "defaults can be used. Do the calculations? [y]"
check_tf y

if test "$ANSWER" = "true"; then
  echo -e "Calculating...please wait"
  echo -e

  FCTEST=`eval "echo -e $FCTEST"`
  cd $FCTEST
  make clean 2>/dev/null
  make > $FCTEST_TMP
  CC=$?
  testcc $CC "running fc_test"

  FC_LINK=`getvar FC_LINK $FCTEST_TMP`
  FRL8=`getvar FRL8 $FCTEST_TMP`
  INTLL=`getvar INTLL $FCTEST_TMP`
  BIGEND=`getvar BIGEND $FCTEST_TMP`
  FRL_SIZE=`getvar FRL_SIZE $FCTEST_TMP`
  cd - 1>/dev/null 2>&1

  if test "$FRL8" = "null"; then
    FRL8=`getvar FRL8 $CONFIG`
  fi
  if test "$INTLL" = "null"; then
    INTLL=`getvar INTLL $CONFIG`
  fi
  if test "$BIGEND" = "null"; then
    BIGEND=`getvar BIGEND $CONFIG`
  fi
  if test "$FRL_SIZ" = "null"; then
    FRL_SIZE=`getvar FRL_SIZE $CONFIG`
  fi
  rm $FCTEST_TMP

else
  FC_LINK=`getvar FC_LINK $CONFIG`
  FRL8=`getvar FRL8 $CONFIG`
  INTLL=`getvar INTLL $CONFIG`
  BIGEND=`getvar BIGEND $CONFIG`
  FRL_SIZE=`getvar FRL_SIZE $CONFIG`
fi

if test "$FC_LINK" = "null"; then
  testcc 1 "setting FC_LINK"
fi
if test "$FRL8" = "null"; then
  testcc 1 "setting FRL8"
fi
if test "$INTLL" = "null"; then
  testcc 1 "setting INTLL"
fi
if test "$BIGEND" = "null"; then
  testcc 1 "setting BIGEND"
fi
if test "$FRL_SIZE" = "null"; then
  testcc 1 "setting FRL_SIZE"
fi

case "$FC_LINK" in
  "C_UP"    ) FC_PHRASE="upper case";;
  "C_LOW"   ) FC_PHRASE="lower case";;
  "C_LOW_U" ) FC_PHRASE="lower case with trailing underscore";;
esac

cat >> $CONFIG_TMP <<EOF
FC_LINK=$FC_LINK
EOF

case "$FRL8" in
  "true"  ) FRL8_PHRASE="double";;
  "false" ) FRL8_PHRASE="float";;
esac

cat >> $CONFIG_TMP <<EOF
FRL8=$FRL8
EOF

if test "$FRL8" = "true"; then
  case "$INTLL" in
    "true"  ) INTLL_PHRASE="long long";;
    "false" ) INTLL_PHRASE="long";;
  esac
else
  INTLL_PHRASE="int"
fi

cat >> $CONFIG_TMP <<EOF
INTLL=$INTLL
EOF

case "$BIGEND" in
  "true"  ) BIGEND_PHRASE="big-endian";;
  "false" ) BIGEND_PHRASE="little-endian";;
esac

cat >> $CONFIG_TMP <<EOF
BIGEND=$BIGEND
EOF

cat >> $CONFIG_TMP <<EOF
FRL_SIZE=$FRL_SIZE
EOF

echo -e "Using the chosen compilers and options, on this platform:" >> $LOG
echo -e "(a) Fortran will interface with C routines which have" >> $LOG
echo -e "    names in $FC_PHRASE" >> $LOG
echo -e "(b) A C $FRL8_PHRASE has equivalent wordlength to a" >> $LOG
echo -e "    Fortran real" >> $LOG
echo -e "(c) A C $INTLL_PHRASE has equivalent wordlength to a" >> $LOG
echo -e "    Fortran integer" >> $LOG
echo -e "(d) The data representation is $BIGEND_PHRASE" >> $LOG
echo -e "(e) Fortran REAL's are $FRL_SIZE bits long" >> $LOG
echo -e >> $LOG
echo -e

ANSI_C=`getvar ANSI_C $CONFIG`
if test "$BIGEND" = "false"; then

  echo -e "This platform requires data to be little-endian" | tee -a $LOG
  echo -e "The bigend utility is required" | tee -a $LOG
  echo -e "Enter the C compiler flag for ANSI compliance [$ANSI_C]" \
        | tee -a $LOG

  read "ANSWER"
  ANSI_C="${ANSWER:-$ANSI_C}"
  echo -e "Answer: $ANSI_C" >> $LOG

  BIGEND_UTIL=`eval "echo -e $BIGEND_UTIL"`
  cd $BIGEND_UTIL
  echo -e "Compiling the bigend utility...please wait"
  $CCOM_CMD $ANSI_C bigend.c -o bigend
  CC=$?
  testcc $CC "compiling bigend"

  echo -e "Linking the bigend executable to \$UMDIR/bin" | \
        tee -a $LOG
  ln -sf $BIGEND_UTIL/bigend $UMDIR/bin 2>/dev/null
  cd - 1>/dev/null 2>&1
  echo -e

fi

cat >> $CONFIG_TMP <<EOF
ANSI_C=$ANSI_C
EOF

echo -e "--------------------------------------------------------"
echo -e " Step 2.4: Nupdate Software Manager                     "
echo -e "--------------------------------------------------------"
echo -e

echo -e "There are 2 flavours of nupdate:-"
echo -e "(1) Cray - recommended for Cray"
echo -e "(2) Portable - not tested on Cray"
echo -e "You should use one or the other"

USE_CRAY_NUPDATE=`getvar USE_CRAY_NUPDATE $CONFIG`
echo -e "Use Cray nupdate? [$USE_CRAY_NUPDATE]" | tee -a $LOG
check_tf $USE_CRAY_NUPDATE
USE_CRAY_NUPDATE=$ANSWER
echo -e "Answer: $USE_CRAY_NUPDATE" >> $LOG
cat >> $CONFIG_TMP <<EOF
USE_CRAY_NUPDATE=$USE_CRAY_NUPDATE
EOF

echo -e

if test "$USE_CRAY_NUPDATE" = "false"; then
  UPDATEVN=`getvar UPDATEVN $CONFIG`
  echo -e "The supplied version of portable nupdate is $UPDATE_DEF"
  echo -e "If you wish to use another version, enter it here [$UPDATEVN]"
  read ANSWER
  UPDATEVN=${ANSWER:-$UPDATEVN}
  cat >> $CONFIG_TMP <<EOF
UPDATEVN=$UPDATEVN
EOF

  echo -e

  UPDATEDIR=`getvar UPDATEDIR $CONFIG`
  echo -e "Enter the directory containing the top level nupdate"
  echo -e "directory [$UPDATEDIR]"
  read ANSWER
  ANSWER=`eval "echo -e $ANSWER"`
  UPDATEDIR=${ANSWER:-`eval "echo -e $UPDATEDIR"`}
  cat >> $CONFIG_TMP <<EOF
UPDATEDIR=$UPDATEDIR
EOF

  echo -e
else
  UPDATEDIR=`getvar UPDATEDIR $CONFIG`
  echo -e "Enter the directory containing the nupdate"
  echo -e "executable [$UPDATEDIR]"
  read ANSWER
  ANSWER=`eval "echo -e $ANSWER"`
  UPDATEDIR=${ANSWER:-`eval "echo -e $UPDATEDIR"`}
  cat >> $CONFIG_TMP <<EOF
UPDATEDIR=$UPDATEDIR
EOF
  if test ! -z "$UPDATEDIR"; then
    if test "$UPDATEDIR" != "$UMDIR/bin"; then
      echo -e "Linking the nupdate executable to \$UMDIR/bin" | \
        tee -a $LOG
      ln -sf $UPDATEDIR/nupdate $UMDIR/bin 2>/dev/null
    fi
  fi
fi
echo -e >> $LOG
echo -e

if test "$UMMACHINE" != "METOCRAY"; then

  whence banner 1>/dev/null 2>&1
  CC=$?

  if test $CC -ne 0; then

    echo -e "--------------------------------------------------------"
    echo -e " Step 2.5: Banner Command                               "
    echo -e "--------------------------------------------------------"
    echo -e

    echo -e "The banner command is not available on this platform"
    echo -e "Please wait whilst the figlet utility is compiled"

    FIGLET=`eval "echo -e $FIGLET"`
    cd $FIGLET
    FIGLET_UTIL=`eval "echo -e $FIGLET_UTIL"`
    export FIGLET_UTIL
    make clean 2>/dev/null
    make install
    CC=$?
    testcc $CC "compiling figlet"
    cd -

    echo -e "Linking the figlet executable to \$UMDIR/bin/banner" | \
        tee -a $LOG
    echo -e >> $LOG
    ln -sf $FIGLET_UTIL/figlet $UMDIR/bin/banner 2>/dev/null
    testcc $CC "linking figlet"
  fi
fi

#=======================================================================

echo -e "Stage 3 - Platform Definitions" >> $LOG
echo -e "------------------------------" >> $LOG
echo -e >> $LOG

echo -e "--------------------------------------------------------"
echo -e " Step 3.1: Execution Mode                               "
echo -e "--------------------------------------------------------"
echo -e

MPP=`getvar MPP $CONFIG`
echo -e "Build the MPP code? [$MPP]" | tee -a $LOG
check_tf $MPP
MPP=$ANSWER
MPPRECON=$MPP
echo -e "Answer: $MPP" >> $LOG
  cat >> $CONFIG_TMP <<EOF
MPP=$MPP
MPPRECON=$MPPRECON
EOF

echo -e

BLDNOMPP=`getvar BLDNOMPP $CONFIG`
echo -e "Build the non-MPP code? [$BLDNOMPP]" | tee -a $LOG
check_tf $BLDNOMPP
BLDNOMPP=$ANSWER
echo -e "Answer: $BLDNOMPP" >> $LOG
  cat >> $CONFIG_TMP <<EOF
BLDNOMPP=$BLDNOMPP
EOF

echo -e
echo -e >> $LOG

echo -e "--------------------------------------------------------"
echo -e " Step 3.2: Platform questions for machine OTHER         "
echo -e "--------------------------------------------------------"
echo -e

CRAY=`getvar CRAY $CONFIG`
if test "$UMMACHINE" = "OTHER"; then
  echo -e "Is this machine a CRAY supercomputer? [$CRAY]" | tee -a $LOG
  check_tf $CRAY
  CRAY=$ANSWER
  echo -e "Answer: $CRAY" >> $LOG
fi
cat >> $CONFIG_TMP <<EOF
CRAY=$CRAY
EOF

T3E=`getvar T3E $CONFIG`
if test "$UMMACHINE" = "OTHER"; then
  echo -e "Is this machine a T3E? [$T3E]" | tee -a $LOG
  check_tf $T3E
  T3E=$ANSWER
  echo -e "Answer: $T3E" >> $LOG
fi
cat >> $CONFIG_TMP <<EOF
T3E=$T3E
EOF

T3D=`getvar T3D $CONFIG`
if test "$UMMACHINE" = "OTHER"; then
  echo -e "Is this machine a T3D? [$T3D]" | tee -a $LOG
  check_tf $T3D
  T3D=$ANSWER
  echo -e "Answer: $T3D" >> $LOG
fi
cat >> $CONFIG_TMP <<EOF
T3D=$T3D
EOF

FUJITSU=`getvar FUJITSU $CONFIG`
if test "$UMMACHINE" = "OTHER"; then
  echo -e "Is this machine a Fujitsu VPP? [$FUJITSU]" | tee -a $LOG
  check_tf $FUJITSU
  FUJITSU=$ANSWER
  echo -e "Answer: $FUJITSU" >> $LOG
  echo -e
  echo -e >> $LOG
fi
cat >> $CONFIG_TMP <<EOF
FUJITSU=$FUJITSU
EOF

SGI=`getvar SGI $CONFIG`
if test "$UMMACHINE" = "OTHER"; then
  echo -e "Is this machine a SGI Origin? [$SGI]" | tee -a $LOG
  check_tf $SGI
  SGI=$ANSWER
  echo -e "Answer: $SGI" >> $LOG
  echo -e
  echo -e >> $LOG
fi
cat >> $CONFIG_TMP <<EOF
SGI=$SGI
EOF

SUN=`getvar SUN $CONFIG`
if test "$UMMACHINE" = "OTHER"; then
  echo -e "Is this machine a Sun? [$SUN]" | tee -a $LOG
  check_tf $SUN
  SUN=$ANSWER
  echo -e "Answer: $SUN" >> $LOG
  echo -e
  echo -e >> $LOG
fi
cat >> $CONFIG_TMP <<EOF
SUN=$SUN
EOF

LINUX=`getvar LINUX $CONFIG`
if test "$UMMACHINE" = "OTHER"; then
  echo -e "Is this machine an x86 Linux? [$LINUX]" | tee -a $LOG
  check_tf $LINUX
  LINUX=$ANSWER
  echo -e "Answer: $LINUX" >> $LOG
  echo -e
  echo -e >> $LOG
fi
cat >> $CONFIG_TMP <<EOF
LINUX=$LINUX
EOF

echo -e "--------------------------------------------------------"
echo -e " Step 3.3: Platform specifics (T3E & MPP machines only) "
echo -e "--------------------------------------------------------"
echo -e

VECTLIB=`getvar VECTLIB $CONFIG`
if test "$T3E" = "true"; then
  VECTLIBNAME=_vect
  echo -e "Some Cray T3E machines have a fast vector library" | tee -a $LOG
  echo -e "called lib${VECTLIBNAME}.a" | tee -a $LOG
  echo -e "Would you like to use this library? [$VECTLIB]" | tee -a $LOG
  check_tf $VECTLIB
  VECTLIB=$ANSWER
  echo -e "Answer: $VECTLIB" >> $LOG
  echo -e
  echo -e >> $LOG

  if test "$VECTLIB" = "true"; then

    # Test for vector library in LCOM_LIBS and add if necessary
    ADDLIB=`echo -e $LCOM_LIBS | grep $VECTLIBNAME`
    if test -z "$ADDLIB"; then
      echo -e "The fast vector library is not in the list of libraries"
      echo -e "which will be passed to the loader"
      echo -e "Adding it to the list..."
      echo -e
      sed "s/LCOM_LIBS=/LCOM_LIBS=-l$VECTLIBNAME /" $CONFIG_TMP > \
        $TMPFILE
      mv $TMPFILE $CONFIG_TMP
      LCOM_LIBS=`getvar LCOM_LIBS $CONFIG_TMP`
      echo -e "LCOM_LIBS updated to $LCOM_LIBS" >> $LOG
    fi

    # Add extra library path if required
    echo -e "Please enter the pathname (no -L) of lib${VECTLIBNAME}.a" \
      | tee -a $LOG
    echo -e "if it is neither in a default library location"
    echo -e "nor in the list below:"
    echo -e $LCOM_PATH
    read ANSWER
    ANSWER=`eval "echo -e $ANSWER"`
    echo -e "Answer: $ANSWER" >> $LOG

    if test ! -z "$ANSWER"; then
      ADDPATH=`echo -e $LCOM_PATH | grep $ANSWER`
      if test -z "$ADDPATH"; then
        sed "s%LCOM_PATH=%LCOM_PATH=-L$ANSWER %" $CONFIG_TMP > $TMPFILE
        mv $TMPFILE $CONFIG_TMP
        LCOM_PATH=`getvar LCOM_PATH $CONFIG_TMP`
        echo -e "LCOM_PATH updated to $LCOM_PATH" >> $LOG
      fi
    fi
    echo -e >> $LOG
  fi
fi
cat >> $CONFIG_TMP <<EOF
VECTLIB=$VECTLIB
EOF

echo -e

UM_PE_LABEL=`getvar UM_PE_LABEL $CONFIG`
if test "$MPP" = "true"; then
  echo -e "Some MPP machines have a labelled high memory PE" | tee -a $LOG
  echo -e "Enter the label for this PE" [$UM_PE_LABEL] | tee -a $LOG
  read ANSWER
  UM_PE_LABEL=${ANSWER:-$UM_PE_LABEL}
  echo -e "Answer: $UM_PE_LABEL" >> $LOG
  echo -e
  echo -e >> $LOG
fi
cat >> $CONFIG_TMP <<EOF
UM_PE_LABEL=$UM_PE_LABEL
EOF

#=======================================================================

if test "$UMMACHINE" != "METOCRAY"; then
  echo -e "Stage 4 - Directory Location" >> $LOG
  echo -e "----------------------------" >> $LOG
  echo -e >> $LOG

  echo -e "--------------------------------------------------------"
  echo -e " Step 4.1: Locate UMPL & UMSL                           "
  echo -e "--------------------------------------------------------"
  echo -e

  echo -e "Locating program (umpl) and script (umsl) libraries"
  echo -e
  if test "$USE_CRAY_NUPDATE" = "false"; then

    cd $UMDIR/vn$VN/source

    if test -d umpl.dir -a ! -d umpl; then
      if test -f umpl; then
        mv umpl umpl.file
        testcc $? "moving umpl to umpl.file"
      fi
      mv umpl.dir umpl
      testcc $? "moving umpl.dir to umpl"
    fi
    if test -d umsl.dir -a ! -d umsl; then
      if test -f umsl; then
        mv umsl umsl.file
        testcc $? "moving umsl to umsl.file"
      fi
      mv umsl.dir umsl
      testcc $? "moving umsl.dir to umsl"
    fi
    cd - 1>/dev/null 2>&1

    echo -e "umpl.dir renamed to umpl; umsl.dir renamed to umsl" >> $LOG

    echo -e "--------------------------------------------------------"
    echo -e " Step 4.2: Build Portable Nupdate                       "
    echo -e "--------------------------------------------------------"
    echo -e

    cd $UPDATEDIR/update$UPDATEVN
    echo -e "Creating portable nupdate version $UPDATEVN"
    echo -e

    export Ccmp COPTS
    if test "$UMMACHINE" = "CRAYMPP" -o "$UMMACHINE" = "CRAYPVP"; then
      make -f makefile.cr
      testcc $? "making portable nupdate"
    else
      make -f makefile.general
      testcc $? "making portable nupdate"
    fi
#    elif test "$UMMACHINE" = "HP"; then
#      make -f makefile.hp
#      testcc $? "making portable nupdate"
#    elif test "$UMMACHINE" = "DECALPHA"; then
#      make -f makefile.da
#      testcc $? "making portable nupdate"
#    elif test "$UMMACHINE" = "OTHER"; then
#      make -f makefile.other
#      testcc $? "making portable nupdate"
#    else
#      echo -e "Don't know how to make portable nupdate for this platform"
#      echo -e "Exiting script"
#      exit 1
#    fi
    cp nupdate mklib $UMDIR/bin
    echo -e "Portable nupdate executable is located in \$UMDIR/bin"  | \
      tee -a $LOG
    echo -e >> $LOG
    cd - 1>/dev/null 2>&1
  else

    cd $UMDIR/vn$VN/source
    if test -f umpl.file -a ! -f umpl; then
      if test -d umpl; then
        mv umpl umpl.dir
        testcc $? "moving umpl to umpl.dir"
      fi
      mv umpl.file umpl
      testcc $? "moving umpl.file to umpl"
    fi
    if test -f umsl.file -a ! -f umsl; then
      if test -d umsl; then
        mv umsl umsl.dir
        testcc $? "moving umsl to umsl.dir"
      fi
      mv umsl.file umsl
      testcc $? "moving umsl.file to umsl"
    fi
    cd - 1>/dev/null 2>&1

    echo -e "umpl.file renamed to umpl; umsl.file renamed to umsl" >> $LOG
  fi
fi

#=======================================================================

echo -e "Stage 5 - Set up Nupdate *Defs Variables" >> $LOG
echo -e "----------------------------------------" >> $LOG
echo -e >> $LOG

echo -e "--------------------------------------------------------"
echo -e " Step 5.1: Set up PROGDEFS                              "
echo -e "--------------------------------------------------------"
echo -e

PROGDEFS=null
PROGDEFS=$FC_LINK

if test "$FRL8" = "true"; then
  PROGDEFS="FRL8,$PROGDEFS"
fi

if test "$INTLL" = "true"; then
  PROGDEFS="INTLL,$PROGDEFS"
fi

if test "$MPP" = "true"; then
  PROGDEFS="MPP,$PROGDEFS"
fi

if test "$MPPRECON" = "true"; then
  PROGDEFS="MPPRECON,$PROGDEFS"
fi

if test "$BLDNOMPP" = "true"; then
  PROGDEFS="BLDNOMPP,$PROGDEFS"
fi

if test "$CRAY" = "true"; then
  PROGDEFS="CRAY,$PROGDEFS"
fi

# Ask BOB about CRI_OPEN
if test "$T3E" = "true"; then
  PROGDEFS="T3E,CRI_OPEN,$PROGDEFS"
fi

if test "$T3D" = "true"; then
  PROGDEFS="T3D,$PROGDEFS"
fi

if test "$FUJITSU" = "true"; then
  PROGDEFS="FUJITSU,$PROGDEFS"
fi

if test "$SGI" = "true"; then
  PROGDEFS="SGI,$PROGDEFS"
fi

if test "$SUN" = "true"; then
  PROGDEFS="SUN,$PROGDEFS"
fi

if test "$LINUX" = "true"; then
  PROGDEFS="LINUX,$PROGDEFS"
fi

if test "$VECTLIB" = "true"; then
  PROGDEFS="VECTLIB,$PROGDEFS"
fi

cat >> $CONFIG_TMP <<EOF
PROGDEFS=$PROGDEFS
EOF

echo -e "--------------------------------------------------------"
echo -e " Step 5.2: Set up SCRDEFS                               "
echo -e "--------------------------------------------------------"
echo -e

SCRDEFS=null
SCRDEFS=$UMMACHINE

if test "$UMMACHINE" = "METOCRAY"; then
  SCRDEFS="CRAYMPP,$SCRDEFS"
fi

if test "$VECTLIB" = "true"; then
  SCRDEFS="VECTLIB,$SCRDEFS"
fi

if test "$MPP" = "true"; then
  SCRDEFS="MPP,$SCRDEFS"
fi

if test "$T3E" = "true" -o "$T3D" = "true"; then
  SCRDEFS="CRAYF90,$SCRDEFS"
fi

cat >> $CONFIG_TMP <<EOF
SCRDEFS=$SCRDEFS
EOF

echo -e "Program nupdate *DEFS: " >> $LOG
echo -e "PROGDEFS=$PROGDEFS" >> $LOG
echo -e "Script nupdate *DEFS: " >> $LOG
echo -e "SCRDEFS=$SCRDEFS" >> $LOG
echo -e >> $LOG

#=======================================================================

echo -e "Stage 6 - File Creation" >> $LOG
echo -e "-----------------------" >> $LOG
echo -e >> $LOG

if test "$UMMACHINE" != "METOCRAY"; then

  echo -e "--------------------------------------------------------"
  echo -e " Step 6.1: Setvars File                                 "
  echo -e "--------------------------------------------------------"
  echo -e

  cat > $UM_HOME/setvars_$VN << EOF
# Pathnames (should be different for each user)
MY_UMHOME=$MY_UMHOME
TMPDIR=$UM_TMP
MY_OUTPUT=$MY_OUTPUT

# Pathnames (should remain unchanged)
UM_HOME=$UM_HOME
UMDIR=$UMDIR
UMTEST=$UMTEST

# Variables (may be altered for each user)
NPROC=\${NPROC:-$NPROC}

# Variables (should remain unchanged)
UMMACHINE=$UMMACHINE
BUILDHOST=$BUILDHOST
SCRDEFS=$SCRDEFS
PROGDEFS=$PROGDEFS
UM_AWK=$UM_AWK
UM_SED=$UM_SED
UM_GREP=$UM_GREP

# Paths
PATH=\$UMDIR/bin:\$PATH:.:\$UMDIR/vn$VN/utils
FPATH=\$UMDIR/vn$VN/scripts/functions:\$FPATH

# Exports
export MY_UMHOME TMPDIR MY_OUTPUT UM_HOME UMDIR UMTEST
export NPROC UMMACHINE BUILDHOST SCRDEFS PROGDEFS
export UM_AWK UM_SED UM_GREP
export PATH FPATH

# Create directories if they don't exist
[ ! -d \$MY_UMHOME ] && mkdir -p \$MY_UMHOME
[ ! -d \$TMPDIR ] && mkdir -p \$TMPDIR
[ ! -d \$MY_OUTPUT ] && mkdir -p \$MY_OUTPUT
EOF

  if test "$UMMACHINE" = "DECALPHA"
  then
    cat >> $UM_HOME/setvars_$VN << EOF

# DecAlpha specific
ulimit -s 131072
EOF
  fi

  echo -e "$UM_HOME/setvars_$VN created" | tee -a $LOG

  chmod +x $UM_HOME/setvars_$VN
  ln -sf $UM_HOME/setvars_$VN $UM_HOME/setvars 2>/dev/null
#  . $UM_HOME/setvars

fi

echo -e "--------------------------------------------------------"
echo -e " Step 6.2: Setglobalvars File                           "
echo -e "--------------------------------------------------------"
echo -e

if [ ! -d $UMDIR/vn$VN ]; then
  mkdir $UMDIR/vn$VN
fi
if [ ! -d $UMDIR/vn$VN/scripts ]; then
  mkdir $UMDIR/vn$VN/scripts
fi

cat > $UMDIR/vn$VN/scripts/setglobalvars << EOF
UMMACHINE=$UMMACHINE
UM_SECTOR_SIZE=$UM_SECTOR_SIZE
BUILDHOST=$BUILDHOST
NPROC=$NPROC
UM_PE_LABEL=$UM_PE_LABEL
SCRDEFS=$SCRDEFS
PROGDEFS=$PROGDEFS
FPATH=\$UMDIR/vn$VN/scripts/functions:\$FPATH
export UMMACHINE BUILDHOST NPROC SCRDEFS PROGDEFS UM_PE_LABEL FPATH
EOF

echo -e "$UMDIR/vn$VN/scripts/setglobalvars created" | tee -a $LOG
echo -e >> $LOG

echo -e "--------------------------------------------------------"
echo -e " Step 6.3: Config.cache File                            "
echo -e "--------------------------------------------------------"
echo -e

echo -e "OK to overwrite config.cache file? [y]"
check_tf y
if test "$ANSWER" = "true"; then
  cp $CONFIG_TMP $CONFIG
fi

fi # End of SKIP_QUESTIONS

. $UM_HOME/setvars

#=======================================================================

echo -e "Stage 7 - Model Unpacking" >> $LOG
echo -e "-------------------------" >> $LOG
echo -e >> $LOG

echo -e "--------------------------------------------------------"
echo -e " Step 7.1: Script Extraction                            "
echo -e "--------------------------------------------------------"
echo -e

echo -e "The following options have been set..."
sleep 2
more $CONFIG
rm -f $CONFIG_TMP
echo -e
echo -e "OK to go ahead and unpack the UM with these options? [y]"
check_tf y
if test "$ANSWER" != "true"; then
  echo -e "Program terminating without unpacking the UM" | tee -a $LOG
  exit 1
fi

if [ ! -d $UMDIR/vn$VN/scripts/Install ]; then
  mkdir $UMDIR/vn$VN/scripts/Install
fi
cd $UMDIR/vn$VN/scripts/Install
nupdate -p $UMDIR/vn$VN/source/umsl -q mkscripts -c mkscripts -a f
testcc $? "running nupdate to create mkscripts"

sed "s/ *$//" mkscripts.f > mkscripts
rm mkscripts.f
chmod 755 mkscripts

echo -e "Starting script extraction" | tee -a $LOG
echo -e | tee -a $LOG

./mkscripts >> $LOG
testcc $? "running mkscripts"

echo -e "Script extraction complete"
echo -e

echo -e "--------------------------------------------------------"
echo -e " Step 7.2: Create cross reference files                 "
echo -e "--------------------------------------------------------"
echo -e

. $UMDIR/vn$VN/scripts/setglobalvars >> $LOG

echo -e "Making obj_xref" >> $LOG
echo -e >> $LOG
$UMDIR/vn$VN/scripts/mkobjxref \
  $UMDIR/vn$VN/source/obj_xref_base \
  $UMDIR/vn$VN/source/obj_xref \
  $BUILDHOST >>$LOG
testcc $? "creating obj_xref"

echo -e >> $LOG

echo -e "Making exec_xref" >> $LOG
echo -e >> $LOG
$UMDIR/vn$VN/scripts/mkexecxref \
  $UMDIR/vn$VN/source/exec_xref_base \
  $UMDIR/vn$VN/source/exec_xref \
  $BUILDHOST >>$LOG
testcc $? "creating exec_xref"

echo -e "Cross reference file creation complete"
echo -e

echo -e "--------------------------------------------------------"
echo -e " Step 7.3: Create compile_vars file                     "
echo -e "--------------------------------------------------------"
echo -e

$UMDIR/vn$VN/scripts/mkcompvars \
  $UMDIR/vn$VN/source/compile_vars \
  $COM_SPECIFIC >>$LOG
testcc $? "creating compile_vars"

echo -e "Compile_vars file creation complete"
echo -e

echo -e "--------------------------------------------------------"
echo -e " Step 7.4: Tidy up                                      "
echo -e "--------------------------------------------------------"
echo -e

if test "$UMMACHINE" != "METOCRAY"; then
  echo -e "NOTE: Check the file $LOG"
  echo -e "      to make sure that UM unpacking has been successful."
  echo -e "      Remember to source the file $UM_HOME/setvars in order"
  echo -e "      to access the UM environment variables."
  echo -e "      Type:"
  echo -e "      . $UM_HOME/setvars"
  echo -e "      and add this to your logon profile"
fi

echo -e >> $LOG
echo -e "Model unpacking finished at `date`" | tee -a $LOG
