#!/bin/ksh
# ----------------------------- COPYRIGHT ---------------------------- #
#           (c) BRITISH CROWN COPYRIGHT 2000, THE MET.OFFICE           #
#                                                                      #
# Use, duplication or disclosure of this code is subject to the        #
# restrictions as set forth in the contract. If no contract has been   #
# raised with this copy of the code, use, duplication or disclosure    #
# of it is strictly prohibited. Permission to do so must be obtained   #
# in writing from the Head of Numerical Modelling at The Met. Office.  #
# ----------------------------- COPYRIGHT ---------------------------- #
#
#LL  Function:  createcomb
#LL---------------------------------------------------------------------
#LL
#LL  Purpose: takes as input a space separated list of DEFS and given
#LL           mccomb (machine defs) generate a list of def combinations
#LL
#LL  Current Owner: Anette Van der Wal
#LL  Reviewer: ????               Date of review: ????
#LL
#LL  Tested under OS version: UNICOS <UNICOS version number>
#LL  UM version no: 4.5       Date of test:  <date of test>
#LL
#LL  History:
#LL   Model
#LL  version  Date        Modification history:
#LL   4.5     14/07/98    Original version (A Van der Wal).
#LL
#LL  Programming standard: UMDP 3, version <UMDP 3 version number>
#LL
#LL  External documentation:
#LL    <UMDP number & name of external documentation>
#LL
#L   Interface and arguments: none
#L
#L   -------------------------------------------------------------------
#L
#L   Called by: mkobjxref
#L
#L   Calls    : none
#L
#L   Imports  : none
#L
#L   Exports  : none
#L
#L   Local variables: none
#L
#L   End of header -----------------------------------------------------

createcomb()
{
  defsm=$*

  # initialise counter for combinations to 1
  # and the first combination to empty string ""
  count=1
  comb[$count]=""

  if [[ -z "$defsm" ]]
  then
    comb[$count]="G0"
  else
    for mdef in $defsm
    do
      #echo -e MDEF $mdef

      # branch combinations if m(achine)def can be both "on" and
      # "off" on this platform

      if [[ "$mccomb" = *"$mdef<"[yY]":"[nN]">"* ]]
      then
        # set basecount to number of elements currently in the
        # combination array and initialise the loop counter i,
        # used for branching, to 1
        basecount=$count
        i=1

        while ((i <= $basecount))
        do
          # copy existing combination (mdef "off")
          ((count = count + 1))
          if [[ "${comb[$i]}" = "" ]]
          then
            comb[$count]=${comb[$i]}"G0"
          else
            comb[$count]=${comb[$i]}
          fi
          # append mdef to existing combination (mdef "on")
          comb[$i]=${comb[$i]}${mdef%\[*\]}

          # increment branch loop counter
          ((i = i + 1))
        done
      fi

      # base case the m(achine)def is "on" for this platform
      if [[ "$mccomb" = *"$mdef<"[yY]">"* ]]
      then
        # initialise the loop counter j, used to traverse comb(ination)
        # array, to 1
        j=1

        while ((j <= $count))
        do
          # append mdef to existing combination
          comb[$j]=${comb[$j]}${mdef%\[*\]}
          ((j = j + 1))
        done
      fi
    done

    # non of the possible machine defs are set on this platform
    if [[ "${comb[$count]}" = "" ]]
    then
      comb[$count]=G0
    fi
  fi

  # initialise the loop counter j, used to travers the comb(ination)
  # array, to enable its contents to be output
  out=""
  j=$count

  while ((j >= 1))
  do
    #return combinations as a : separated string
    out=$out${comb[$j]}":"
    (( j = j - 1 ))
  done

  echo -e $out
}
