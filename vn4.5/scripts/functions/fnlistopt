#!/bin/ksh
# ----------------------------- COPYRIGHT ---------------------------- #
#           (c) BRITISH CROWN COPYRIGHT 2000, THE MET.OFFICE           #
#                                                                      #
# Use, duplication or disclosure of this code is subject to the        #
# restrictions as set forth in the contract. If no contract has been   #
# raised with this copy of the code, use, duplication or disclosure    #
# of it is strictly prohibited. Permission to do so must be obtained   #
# in writing from the Head of Numerical Modelling at The Met. Office.  #
# ----------------------------- COPYRIGHT ---------------------------- #
#LL  Function:  fnlistopt
#LL---------------------------------------------------------------------
#LL
#LL  Purpose: ?????????????????????????????
#LL
#LL  Inputs: file = commp_vars file which contains
#LL                 (i)   default fortran compiler options
#LL                 (ii)  default loader compiler options
#LL                 (iii) default C compiler options
#LL                 (iv)  deck specific compiler options
#LL          deck = can be either a "DECKNAME" or ""
#LL          type = the type of the information which is to be parsed
#LL                 from the file;
#LL                 (i)   COMP, fortran compiler
#LL                 (ii)  CCOM, C compiler
#LL                 (iii) LOAD, loader compiler.
#LL
#LL  Current Owner: Anette Van der Wal
#LL  Reviewer: ????               Date of review: ????
#LL
#LL  Tested under OS version: UNICOS <UNICOS version number>
#LL  UM version no: 4.5       Date of test:  <date of test>
#LL
#LL  History:
#LL   Model
#LL  version  Date        Modification history:
#LL   4.5     14/07/98    Original version (A Van der Wal).
#LL
#LL  Programming standard: UMDP 3, version <UMDP 3 version number>
#LL
#LL  External documentation:
#LL    <UMDP number & name of external documentation>
#LL
#L   Interface and arguments: none
#L
#L   -------------------------------------------------------------------
#L
#L   Called by: qsmncompile
#L
#L   Calls    : none
#L
#L   Imports  : none
#L
#L   Exports  : none
#L
#L   Local variables: none
#L
#L   End of header -----------------------------------------------------

fnlistopt()
{
  unset error_flag xcomopts
  # copy input args into sensibly named variables
  file=$1 # ucompvars file
  deck=$2 # Any valid deck name
  type=$3 # FCOM|CCOM|LCOM

  case $type in
    'FCOM') istr=@fort ;;
    'LCOM') istr=@load ;;
    'CCOM') istr=@ccom ;;
         *)
echo -e "ERROR: unknown arg \"$type\". Try FCOM, LCOM or CCOM." 1>&2
            error_flag=true ;;
  esac

  if [ "$error_flag" = true ]
  then
    :
  else

  # Obtain default compiler and options i.e. i(nterim)commmand
  # and i(nterim)comopts values. These only need to be set once, on
  # first call of shell function, hence the if test.

    if [ -z "$icommand" ]
    then
      icommand=`$UM_GREP "@define.*$type\_CMD"  $file| cut -d= -f2-`
      icomopts=`$UM_GREP "$istr.*$type\_OPTS" $file| cut -d= -f2-`
    fi

#EXAMPLE 1---------------------------------------------------
# parsefile $UCOMPVAR "" FCOM
# returns the global default for the fortran compiler.  As the
# deck argument is empty not looking for deck specific info.
#
# $UM_GREP FCOM_CMD $UCOMPVARS -> FCOM_CMD=f90 | cut -d= -f2-
# -> f90
# $UM_GREP FCOM_OPTS $UCOMPVARS -> FCOM_OPTS= | cut -d= -f2-
# -> ""
# icommand=f90 icomopts=""
#------------------------------------------------------------

    # If a deck name was input check if it exists in the file
    if [ ! -z "$deck" ]
    then
      test=`$UM_GREP -E -i "^\+$deck|$deck" $file`
    fi

    # If no deck has been given as an argument to the func. do not
    # have to look for deck specific command options (in loop below).
    # Similarly, where a deck name has been input but is not given as
    # an entry in the user compile vars file, this is uneccessary.

    if [ -z "$deck" ] || [ -z "$test" ]
    then
      command=$icommand
      comopts=$icomopts
      xcomopts=`$UM_GREP -E -v "$type\_CMD|$type\_OPTS" $file|\
        $UM_GREP -E "^$istr.*$type\_|^\+$istr.*$type\_" | cut -d= -f2-`

#EXAMPLE 1 CONT'D---------------------------------------------
# command=f90
# comopts=""
# xcomopts are additional compiler options for the command type
# $UM_GREP -E -v "FCOM_CMD|FCOM_OPTS" $file -> ignores lines in the
# file which contain these elements | $UM_GREP -E "^@fort.*$FCOM" ->
#  @fort  FCOM_DISABLE=
#  @fort  FCOM_ENABLE=
#  @fort  FCOM_OPTIM=-Oaggress -Oscalar3
#  @fort  FCOM_OPTS=
# | cut -d= -f2- -> -Oaggress -Oscalar3
# xcomopts=-Oaggress -Oscalar3
#------------------------------------------------------------

    else
      # Set deck (local) command overides.
      command=`$UM_GREP -i "$deck $type\_CMD" $file|cut -d= -f2-`
      comopts=`$UM_GREP -i "$deck $type\_OPTS" $file|cut -d= -f2-`

      # If there are no deck command overides, set to defaults.
      if [ -z "$command" ];then command=$icommand;fi
      if [ -z "$comopts" ];then comopts=$icomopts;fi

#EXAMPLE 2---------------------------------------------------
# parsefile $UCOMPVARS "ADJCTL1A" FCOM
# From the if statements above established that there are no deck
# command and opts overrides so command=f90 and comopts="" Now need to
# look for possible options (loopopts) for this command type.
#
# loopopts=FCOM_DISABLE
#	   FCOM_ENABLE
#          FCOM_OPTIM
#          FCOM_OPTS
#------------------------------------------------------------

      loopopts=`$UM_GREP -E -v "$type\_CMD|$type\_OPTS" $file|\
                    $UM_GREP -E "$istr.*$type\_" |\
                    cut -d= -f1 |\
                    $UM_AWK '{print $2}'|sort -u`

      # loop over the options for the command type to determine
      # if any overrides for it, have been set for the given deck

      for opt in $loopopts
      do
        unset option     # unset this for every iteration
        unset optionfull # ...and this too.
       optionfull=`$UM_GREP -E -i "^$deck *$opt=|^\+$deck *$opt=" $file`
        option=`echo -e $optionfull | cut -d= -f2-`
        if [ -z "$optionfull" ]
        then # there are no deck specific overrides for the option
          option=\
`$UM_GREP -E "^$istr.*$opt=|^\+$istr.*$opt=" $file|cut -d= -f2-`
        fi
        xcomopts="$xcomopts $option" # add to accumulated options
      done
    fi
    echo -e $command:::$comopts $xcomopts # return command line/opts
  fi
}
