*IF DEF,C93_1A,OR,DEF,C93_2A                                               GNF0F402.4     
C ******************************COPYRIGHT******************************    GTS2F400.1603  
C (c) CROWN COPYRIGHT 1995, METEOROLOGICAL OFFICE, All Rights Reserved.    GTS2F400.1604  
C                                                                          GTS2F400.1605  
C Use, duplication or disclosure of this code is subject to the            GTS2F400.1606  
C restrictions as set forth in the contract.                               GTS2F400.1607  
C                                                                          GTS2F400.1608  
C                Meteorological Office                                     GTS2F400.1609  
C                London Road                                               GTS2F400.1610  
C                BRACKNELL                                                 GTS2F400.1611  
C                Berkshire UK                                              GTS2F400.1612  
C                RG12 2SZ                                                  GTS2F400.1613  
C                                                                          GTS2F400.1614  
C If no contract has been raised with this copy of the code, the use,      GTS2F400.1615  
C duplication or disclosure of it is strictly prohibited.  Permission      GTS2F400.1616  
C to do so must first be obtained in writing from the Head of Numerical    GTS2F400.1617  
C Modelling at the above address.                                          GTS2F400.1618  
C ******************************COPYRIGHT******************************    GTS2F400.1619  
C                                                                          GTS2F400.1620  
!+ 2D Limited area p.d.e. solver, using zero Dirichlet b.c.'s.             D2LAMP1A.3     
!                                                                          D2LAMP1A.4     
! Subroutine Interface:                                                    D2LAMP1A.5     
      SUBROUTINE DEL_SQUARED_LAM_P                                         GTS0F304.1     
     & (P_field, row_len, LonOffset, LonPts,                               GTS0F304.2     
     &  LatOffset, LatPts, EarthRadiusInv, DLonInv, DLatInv,               D2LAMP1A.7     
     &  cos_p_lat, sec_p_lat, cos_v_lat, source, solution)                 D2LAMP1A.8     
                                                                           D2LAMP1A.9     
      IMPLICIT NONE                                                        D2LAMP1A.10    
!                                                                          D2LAMP1A.11    
! Description:                                                             D2LAMP1A.12    
!  This routine solves a 2D Poisson equation on a section of a sphere,     D2LAMP1A.13    
!  defined by coordinate boundaries, using a multigrid method. Both the    D2LAMP1A.14    
!  source and solution arrays are on pressure grids.                       D2LAMP1A.15    
!  Zero Dirichlet boundary conditions are imposed.                         D2LAMP1A.16    
!                                                                          D2LAMP1A.17    
! Method:                                                                  D2LAMP1A.18    
!  Uses the multigrid solver MG_CNTL developed by Mark Mawson and          D2LAMP1A.19    
!  documented by him under the title "Numerical solution of Elliptic       D2LAMP1A.20    
!  Equations using Multigrid Methods". It is used here with version = 4.   D2LAMP1A.21    
!                                                                          D2LAMP1A.22    
!  The first guess for the solution is taken to be an array of zeros.      D2LAMP1A.23    
!                                                                          D2LAMP1A.24    
!  Provision is made for solving on a subset of the full limited area      D2LAMP1A.25    
!  grid thus allowing the problem to be solved on a grid for which the     D2LAMP1A.26    
!  multigrid method is efficient.  The subset region is specified by 4     D2LAMP1A.27    
!  variables: LonOffset; LonPts; LatOffset; LatPts.  Ideally, both         D2LAMP1A.28    
!  LonPts & LatPts (the length of the subset grid in each dimension)       D2LAMP1A.29    
!  SHOULD be of the form 2**(l-1) +1:  where l is an integer >= 1. They    D2LAMP1A.30    
!  MUST be of the form m*2**(l-1) +1:  where m is an integer >= 2,         D2LAMP1A.31    
!  and l is an integer >= 1.                                               D2LAMP1A.32    
!                                                                          D2LAMP1A.33    
!  IMPORTANT: This routine expects the source and solution arrays to be    D2LAMP1A.34    
!  of the same extent as the full limited area pressure grid (values of    D2LAMP1A.35    
!  the solution outside the subset region are set to zero).                D2LAMP1A.36    
!                                                                          D2LAMP1A.37    
! Current Code Owner: Phil Andrews                                         D2LAMP1A.38    
! History:      Model                                                      D2LAMP1A.39    
! Date:        Version:  Comment:                                          D2LAMP1A.40    
!   3/11/93      3.3     Original version. (Phil Andrews).                 D2LAMP1A.41    
!   7/12/93      3.3     Altered to call version 2.0 of the multigrid      D2LAMP1A.42    
!                        code. (Phil Andrews).                             D2LAMP1A.43    
!   7/12/93      3.3     Split subroutine declaration line to              GTS0F304.3     
!                        avoid lexcon making the line too                  GTS0F304.4     
!                        long.  Tracey Smith                               GTS0F304.5     
CLL vn4.2  07/11/96:Allow this routine to be used in C93_2A (Farnon)       GNF0F402.3     
!                                                                          D2LAMP1A.44    
! Code Description:                                                        D2LAMP1A.45    
!   Language: FORTRAN 77 + extensions                                      D2LAMP1A.46    
!                                                                          D2LAMP1A.47    
! System component covered:                                                D2LAMP1A.48    
! System Task:                                                             D2LAMP1A.49    
!                                                                          D2LAMP1A.50    
! Declarations: these are of the form:-                                    D2LAMP1A.51    
!     INTEGER      ExampleVariable      !Description of variable           D2LAMP1A.52    
!                                                                          D2LAMP1A.53    
! Subroutine arguments:                                                    D2LAMP1A.54    
!   Scalar arguments with Intent (In):                                     D2LAMP1A.55    
      INTEGER        P_field      ! Number of pressure points in full,     D2LAMP1A.56    
                                  ! unsubsetted, LAM grid.                 D2LAMP1A.57    
      INTEGER        row_len      ! Row length of full LAM grid.           D2LAMP1A.58    
      INTEGER        LonOffset    ! Longitude offset of start of subset    D2LAMP1A.59    
                                  ! of LAM grid from start of full LAM     D2LAMP1A.60    
                                  ! grid.                                  D2LAMP1A.61    
      INTEGER        LonPts       ! Longitude extent of subset region.     D2LAMP1A.62    
      INTEGER        LatOffset    ! Latitude offset of start of subset     D2LAMP1A.63    
                                  ! of LAM grid from start of full LAM     D2LAMP1A.64    
                                  ! grid.                                  D2LAMP1A.65    
      INTEGER        LatPts       ! Latitude extent of subset region.      D2LAMP1A.66    
                                                                           D2LAMP1A.67    
      REAL           EarthRadiusInv ! 1.0 / radius of the Earth.           D2LAMP1A.68    
      REAL           DLonInv      ! 1.0/ longitude step.                   D2LAMP1A.69    
      REAL           DLatInv      ! 1.0/ latitude step.                    D2LAMP1A.70    
                                                                           D2LAMP1A.71    
! Array arguments with Intent (In):                                        D2LAMP1A.72    
      REAL           cos_p_lat(P_field) ! cos of latitude on full LAM      D2LAMP1A.73    
      REAL           sec_p_lat(P_field) ! sec of latitude on full LAM      D2LAMP1A.74    
      REAL           cos_V_lat(P_field - row_len) ! cos of latitude        D2LAMP1A.75    
                                  ! on V wind component grid.              D2LAMP1A.76    
      REAL           source(P_field)! Array holding the right              D2LAMP1A.77    
                                  ! hand side of Poisson's equn.           D2LAMP1A.78    
                                                                           D2LAMP1A.79    
! Array arguments with Intent (Out):                                       D2LAMP1A.80    
      REAL           solution(P_field)! Is on the full LAM grid, but       D2LAMP1A.81    
                                  ! values outside the subset region are   D2LAMP1A.82    
                                  ! set to zero.                           D2LAMP1A.83    
                                                                           D2LAMP1A.84    
! Local parameters:                                                        D2LAMP1A.85    
! N.B. These are all control parameters for the multigrid solver.          D2LAMP1A.86    
      INTEGER        version      ! Selects mode of operation of the       D2LAMP1A.87    
        PARAMETER   (version = 4) ! multigrid solver.                      D2LAMP1A.88    
      INTEGER        k_bc         ! Select vertical bc type(s).            D2LAMP1A.89    
        PARAMETER   (k_bc = 1)                                             D2LAMP1A.90    
      INTEGER        MxnGrds      ! Max number of grids.                   D2LAMP1A.91    
        PARAMETER   (MxnGrds = 100)                                        D2LAMP1A.92    
      INTEGER        levels       ! extent in k direction                  D2LAMP1A.93    
        PARAMETER   (levels = 1)  ! i.e. only one level                    D2LAMP1A.94    
      INTEGER        MaxIts       ! Max number of multigrid iteratons.     D2LAMP1A.95    
        PARAMETER   (MaxIts = 100)                                         D2LAMP1A.96    
      INTEGER        Iprint       ! Selects diagnostics from multigrid.    D2LAMP1A.97    
        PARAMETER   (Iprint = 0)                                           D2LAMP1A.98    
      INTEGER        Ksmooth      ! Contols choice of smoother             D2LAMP1A.99    
        PARAMETER   (Ksmooth = 16)! i-line zebra                           D2LAMP1A.100   
      INTEGER        NPre         ! No of smooths on each grid on way      D2LAMP1A.101   
        PARAMETER   (NPre = 3)    ! down.                                  D2LAMP1A.102   
      INTEGER        NPost        ! No of smooths on each grid on way      D2LAMP1A.103   
        PARAMETER   (NPost = 3)   ! back up.                               D2LAMP1A.104   
      INTEGER        NCoarse      ! No of smooths on coarsest grid.        D2LAMP1A.105   
        PARAMETER   (NCoarse = 2)                                          D2LAMP1A.106   
      INTEGER        KRestrict    ! Selects restriction algorithm          D2LAMP1A.107   
        PARAMETER   (KRestrict = 3) ! (Full weighting).                    D2LAMP1A.108   
      INTEGER        NcGc         ! Selects cycle to use.                  D2LAMP1A.109   
        PARAMETER   (NcGc = 1)    ! V cycle.                               D2LAMP1A.110   
                                                                           D2LAMP1A.111   
      REAL           Relax        ! Relaxation parameter for Jacobi        D2LAMP1A.112   
        PARAMETER   (Relax = 1)   ! smoother.                              D2LAMP1A.113   
      REAL           Tol_Res      ! Sets factor to reduce initial          D2LAMP1A.114   
        PARAMETER   (Tol_Res = 1.0E-8)! residual by.                       D2LAMP1A.115   
      REAL           WorstSmoothingRate ! min. acceptable improvement      D2LAMP1A.116   
        PARAMETER   (WorstSmoothingRate = 0.95) ! in PSR in one cycle.     D2LAMP1A.117   
                                                                           D2LAMP1A.118   
! Local scalars:                                                           D2LAMP1A.119   
      INTEGER        x            ! Loop counter in Longitude direction.   D2LAMP1A.120   
      INTEGER        y            ! Loop counter in Latitude  direction.   D2LAMP1A.121   
      INTEGER        w            ! Index for full LAM arrays              D2LAMP1A.122   
                                                                           D2LAMP1A.123   
! Local dynamic arrays:                                                    D2LAMP1A.124   
      REAL           Z_Q(1)       ! Z values at k levels.                  D2LAMP1A.125   
      REAL           Z_Mid(2)     ! Z values at k + 1/2 levels.            D2LAMP1A.126   
      REAL           rhs(LonPts, LatPts, levels) ! Source terms on         D2LAMP1A.127   
                                  ! subset of LAM grid.                    D2LAMP1A.128   
      REAL           Q(LonPts, LatPts, levels) ! On input to mg_cntl is    D2LAMP1A.129   
                                  ! first guess at the solution plus the   D2LAMP1A.130   
                                  ! boundary conditions at the edges       D2LAMP1A.131   
                                  ! (set to zero in this routine).         D2LAMP1A.132   
                                  ! On output is the solution.             D2LAMP1A.133   
      REAL           coeff_A  (LonPts, LatPts, levels)  ! Coeffs of the    D2LAMP1A.134   
      REAL           coeff_B  (LonPts, LatPts, levels)  ! pde being        D2LAMP1A.135   
      REAL           coeff_C1 (LonPts, LatPts, levels)  ! solved. See      D2LAMP1A.136   
      REAL           coeff_C2 (LonPts, LatPts, levels)  ! documentation    D2LAMP1A.137   
      REAL           coeff_DEF(LonPts, LatPts, levels)  ! for the          D2LAMP1A.138   
      REAL           coeff_D  (LonPts, LatPts, levels)  ! multigrid        D2LAMP1A.139   
      REAL           coeff_E  (LonPts, LatPts, levels)  ! solver.          D2LAMP1A.140   
      REAL           coeff_F  (LonPts, LatPts, levels)  !                  D2LAMP1A.141   
      REAL           coeff_G  (LonPts, LatPts, levels)  !                  D2LAMP1A.142   
      REAL           cosPlat(LonPts, LatPts) ! cos latitude at pressure    D2LAMP1A.143   
                                  ! points on subset of LAM grid.          D2LAMP1A.144   
      REAL           secPlat(LonPts, LatPts) ! sec latitude at pressure.   D2LAMP1A.145   
                                  ! points on subset of LAM grid.          D2LAMP1A.146   
      REAL           cosVlat(LonPts, LatPts) ! cos latitude at             D2LAMP1A.147   
                                  ! V wind grid points on subset of LAM.   D2LAMP1A.148   
                                                                           D2LAMP1A.149   
! Function & Subroutine calls:                                             D2LAMP1A.150   
      External mg_cntl                                                     D2LAMP1A.151   
!-                                                                         D2LAMP1A.152   
C*                                                                         D2LAMP1A.153   
! 1.0 Initialize                                                           D2LAMP1A.154   
      Z_Q(1)   = 0.0                                                       D2LAMP1A.155   
      Z_Mid(1) = 0.0                                                       D2LAMP1A.156   
      Z_Mid(2) = 0.0                                                       D2LAMP1A.157   
                                                                           D2LAMP1A.158   
! Subset source array. Initalize the coeff_, trig & rhs arrays.            D2LAMP1A.159   
      Do y = 1, LatPts                                                     D2LAMP1A.160   
        Do x = 1, LonPts                                                   D2LAMP1A.161   
          w = (x + LonOffset) + ((y + LatOffset -1) * row_len)             D2LAMP1A.162   
                                                                           D2LAMP1A.163   
          cosPlat(x, y)      = cos_p_lat(w)                                D2LAMP1A.164   
          secPlat(x, y)      = sec_p_lat(w)                                D2LAMP1A.165   
          rhs(x, y, 1)       = source(w)                                   D2LAMP1A.166   
          Q(x, y, 1)         = 0.0                                         D2LAMP1A.167   
          coeff_A(x, y, 1)   = 1.0                                         D2LAMP1A.168   
          coeff_B(x, y, 1)   = 1.0                                         D2LAMP1A.169   
          coeff_C1(x, y, 1)  = 0.0                                         D2LAMP1A.170   
          coeff_C2(x, y, 1)  = 0.0                                         D2LAMP1A.171   
          coeff_DEF(x, y, 1) = 0.0                                         D2LAMP1A.172   
          coeff_D(x, y, 1)   = 0.0                                         D2LAMP1A.173   
          coeff_E(x, y, 1)   = 0.0                                         D2LAMP1A.174   
          coeff_F(x, y, 1)   = 0.0                                         D2LAMP1A.175   
          coeff_G(x, y, 1)   = 0.0                                         D2LAMP1A.176   
                                                                           D2LAMP1A.177   
        End do                                                             D2LAMP1A.178   
      End do                                                               D2LAMP1A.179   
                                                                           D2LAMP1A.180   
      Do y = 1, LatPts                                                     D2LAMP1A.181   
        Do x = 1, LonPts - 1                                               D2LAMP1A.182   
          w = (x + LonOffset) + ((y + LatOffset -1) * row_len)             D2LAMP1A.183   
                                                                           D2LAMP1A.184   
          cosVlat(x, y) = cos_V_lat(w)                                     D2LAMP1A.185   
                                                                           D2LAMP1A.186   
        End do                                                             D2LAMP1A.187   
                                                                           D2LAMP1A.188   
        cosVlat(LonPts, y) = 0.0 ! This extra row shouldnt be used!        D2LAMP1A.189   
                                                                           D2LAMP1A.190   
      End do                                                               D2LAMP1A.191   
                                                                           D2LAMP1A.192   
! 2.0 Call the multigrid routine                                           D2LAMP1A.193   
      Call mg_cntl (MxnGrds, LonPts, LatPts, levels,     ! Intent In       D2LAMP1A.194   
     &  MaxIts, Tol_Res, Iprint, Ksmooth,                !   "     "       D2LAMP1A.195   
     &  NPre, NPost, NCoarse, Relax, Krestrict,          !   "     "       D2LAMP1A.196   
     &  NcGc, coeff_A, coeff_B, coeff_C1, coeff_C2,      !   "     "       D2LAMP1A.197   
     &  coeff_DEF, coeff_D, coeff_E, coeff_F, coeff_G,   !   "     "       D2LAMP1A.198   
     &  Q,                                               ! Intent InOut    D2LAMP1A.199   
     &  rhs, cosPlat, secPlat, cosVlat, EarthRadiusInv,  ! Intent In       D2LAMP1A.200   
     &  DLonInv, DLatInv, WorstSmoothingRate,            !   "     "       D2LAMP1A.201   
     &  version, k_bc, Z_Q, Z_Mid)                       !   "     "       D2LAMP1A.202   
                                                                           D2LAMP1A.203   
! 3.0 Put the answer into the full LAM array.                              D2LAMP1A.204   
! Initialize solution to zero:                                             D2LAMP1A.205   
      Do w = 1, P_field                                                    D2LAMP1A.206   
        solution(w) = 0.0                                                  D2LAMP1A.207   
                                                                           D2LAMP1A.208   
      End do                                                               D2LAMP1A.209   
                                                                           D2LAMP1A.210   
! Now copy Q into solution                                                 D2LAMP1A.211   
      Do y = 1, LatPts                                                     D2LAMP1A.212   
        Do x = 1, LonPts                                                   D2LAMP1A.213   
          w = x + LonOffset + ((y + LatOffset -1) * row_len)               D2LAMP1A.214   
                                                                           D2LAMP1A.215   
          solution(w) = Q(x, y, 1)                                         D2LAMP1A.216   
                                                                           D2LAMP1A.217   
        End do                                                             D2LAMP1A.218   
      End do                                                               D2LAMP1A.219   
                                                                           D2LAMP1A.220   
! Thats it                                                                 D2LAMP1A.221   
      Return                                                               D2LAMP1A.222   
      End                                                                  D2LAMP1A.223   
*ENDIF                                                                     D2LAMP1A.224   
