*IF DEF,C92_1A                                                             VERCUB1A.2     
C (c) CROWN COPYRIGHT 1995, METEOROLOGICAL OFFICE, All Rights Reserved.    GTS2F400.15490 
C                                                                          GTS2F400.15491 
C Use, duplication or disclosure of this code is subject to the            GTS2F400.15492 
C restrictions as set forth in the contract.                               GTS2F400.15493 
C                                                                          GTS2F400.15494 
C                Meteorological Office                                     GTS2F400.15495 
C                London Road                                               GTS2F400.15496 
C                BRACKNELL                                                 GTS2F400.15497 
C                Berkshire UK                                              GTS2F400.15498 
C                RG12 2SZ                                                  GTS2F400.15499 
C                                                                          GTS2F400.15500 
C If no contract has been raised with this copy of the code, the use,      GTS2F400.15501 
C duplication or disclosure of it is strictly prohibited.  Permission      GTS2F400.15502 
C to do so must first be obtained in writing from the Head of Numerical    GTS2F400.15503 
C Modelling at the above address.                                          GTS2F400.15504 
C ******************************COPYRIGHT******************************    GTS2F400.15505 
C                                                                          GTS2F400.15506 
        Subroutine VerticalInterpCubic                                     VERCUB1A.3     
     &      ( len1In,                                                      VERCUB1A.4     
     &          len2In,                                                    VERCUB1A.5     
     &          len3In,                                                    VERCUB1A.6     
     &          len3Out,                                                   VERCUB1A.7     
     &          KOut,                                                      VERCUB1A.8     
     &          RIn,                                                       VERCUB1A.9     
     &          ROut,                                                      VERCUB1A.10    
     &          DataIn,                                                    VERCUB1A.11    
     &          DataOut )                                                  VERCUB1A.12    
                                                                           VERCUB1A.13    
!   Description                                                            VERCUB1A.14    
!   Cubic Lagrange interpolation of DataIn at RIn                          VERCUB1A.15    
!   to DataOut at ROut in the vertical                                     VERCUB1A.16    
!   i.e. 3rd dimension of the arrays.                                      VERCUB1A.17    
!                                                                          VERCUB1A.18    
! Method:                                                                  VERCUB1A.19    
!   Simplified version of Mark Mawson's general interpolation routine      VERCUB1A.20    
!   Cubic Lagrange                                                         VERCUB1A.21    
!                The proposed semi-Lagrangian advection scheme for the     VERCUB1A.22    
!                   semi-Implicit Unified Model integration scheme.        VERCUB1A.23    
!                         F.R. Division working paper No 162.              VERCUB1A.24    
!                                                                          VERCUB1A.25    
! Current Code Owner: Stuart Bell                                          VERCUB1A.26    
!                                                                          VERCUB1A.27    
! History:                                                                 VERCUB1A.28    
! Version   Date     Comment                                               VERCUB1A.29    
! -------   ----     -------                                               VERCUB1A.30    
! 4.0      11/7/95   Equiv. to VAR code as at time of build:Stuart Bell    VERCUB1A.31    
!                                                                          VERCUB1A.32    
! Code Description:                                                        VERCUB1A.33    
!   Language:           Fortran 77 plus                                    VERCUB1A.34    
!   Software Standards: "UM and Met O standards".                          VERCUB1A.35    
!                                                                          VERCUB1A.36    
! Declarations:                                                            VERCUB1A.37    
                                                                           VERCUB1A.38    
        Implicit none                                                      VERCUB1A.39    
                                                                           VERCUB1A.40    
! Subroutine arguments                                                     VERCUB1A.41    
! Scalar arguments with :intent(in)                                        VERCUB1A.42    
        Integer   len1In    ! Extent of DataIn in i direction.             VERCUB1A.43    
        Integer   len2In    ! Extent of DataIn in j direction.             VERCUB1A.44    
        Integer   len3In    ! Extent of DataIn in k direction.             VERCUB1A.45    
        Integer   len3Out   ! Extent of DataOut in k direction.            VERCUB1A.46    
                                                                           VERCUB1A.47    
! Array  arguments with :intent(in)                                        VERCUB1A.48    
        Integer   KOut (len1In,len2In,len3Out) ! level in RIn below ROut   VERCUB1A.49    
                                                                           VERCUB1A.50    
        Real  RIn  (len1In,len2In,len3In)  ! Vertical coordinate input     VERCUB1A.51    
                                                                           VERCUB1A.52    
        Real  ROut (len1In,len2In,len3Out)  ! Vertical coordinate output   VERCUB1A.53    
                                                                           VERCUB1A.54    
        Real  DataIn (len1In,len2In,len3In) ! Data on the original         VERCUB1A.55    
!                                           ! vertical levels.             VERCUB1A.56    
                                                                           VERCUB1A.57    
! Array  arguments with :intent(out)                                       VERCUB1A.58    
        Real     DataOut (len1In,len2In,len3Out) ! Data interpolated to    VERCUB1A.59    
!                                                ! new vertical levels.    VERCUB1A.60    
                                                                           VERCUB1A.61    
! Local scalars:                                                           VERCUB1A.62    
        Integer              i, j, k           ! Loop indices              VERCUB1A.63    
                                                                           VERCUB1A.64    
        Real                 rhereminus     ! } Temporary data stores      VERCUB1A.65    
        Real                 rhere          ! } for elements of the        VERCUB1A.66    
        Real                 rhereplus      ! } RIn array                  VERCUB1A.67    
        Real                 rhereplus2     ! }                            VERCUB1A.68    
        Real                 Z1, Z2, Z3, Z4 ! Stores for partial sums      VERCUB1A.69    
                                                                           VERCUB1A.70    
!- End of header                                                           VERCUB1A.71    
                                                                           VERCUB1A.72    
         Do k = 1, len3Out                                                 VERCUB1A.73    
          Do j = 1, len2In                                                 VERCUB1A.74    
           Do i = 1, len1In                                                VERCUB1A.75    
          If (KOut(i,j,k) .eq. 1 .or.                                      VERCUB1A.76    
     &        KOut(i,j,k) .eq. len3In -1) then                             VERCUB1A.77    
! use the linear method to interpolate between bottom most levels          VERCUB1A.78    
! or top most levels.                                                      VERCUB1A.79    
           rhere           = RIn (i,j,KOut(i,j,k))                         VERCUB1A.80    
             rhereplus      = RIn (i,j,KOut(i,j,k) + 1)                    VERCUB1A.81    
                                                                           VERCUB1A.82    
             DataOut(i,j,k) = ( ( (ROut(i,j,k) - rhere)                    VERCUB1A.83    
     &                         * DataIn (i,j,KOut(i,j,k) + 1) )            VERCUB1A.84    
     &                      - ( (ROut(i,j,k) - rhereplus)                  VERCUB1A.85    
     &                         * DataIn (i,j,KOut(i,j,k))     )            VERCUB1A.86    
     &                      )  / ( rhereplus - rhere )                     VERCUB1A.87    
                                                                           VERCUB1A.88    
          Else ! use cubic interpolation.                                  VERCUB1A.89    
           rhereminus     = RIn (i,j,KOut(i,j,k) - 1)                      VERCUB1A.90    
           rhere           = RIn (i,j,KOut(i,j,k))                         VERCUB1A.91    
           rhereplus      = RIn (i,j,KOut(i,j,k) + 1)                      VERCUB1A.92    
           rhereplus2     = RIn (i,j,KOut(i,j,k) + 2)                      VERCUB1A.93    
                                                                           VERCUB1A.94    
           Z1 =  ( (ROut(i,j,k) - rhere)                                   VERCUB1A.95    
     &           * (ROut(i,j,k) - rhereplus)                               VERCUB1A.96    
     &           * (ROut(i,j,k) - rhereplus2)                              VERCUB1A.97    
     &           *  DataIn (i,j,KOut(i,j,k)-1)  )                          VERCUB1A.98    
     &           /                                                         VERCUB1A.99    
     &           ( (rhereminus - rhere)                                    VERCUB1A.100   
     &           * (rhereminus - rhereplus)                                VERCUB1A.101   
     &           * (rhereminus - rhereplus2)  )                            VERCUB1A.102   
                                                                           VERCUB1A.103   
           Z2 =  ( (ROut(i,j,k) - rhereminus)                              VERCUB1A.104   
     &           * (ROut(i,j,k) - rhereplus)                               VERCUB1A.105   
     &           * (ROut(i,j,k) - rhereplus2)                              VERCUB1A.106   
     &           * DataIn (i,j,KOut(i,j,k))     )                          VERCUB1A.107   
     &           /                                                         VERCUB1A.108   
     &           ( (rhere - rhereminus)                                    VERCUB1A.109   
     &           * (rhere - rhereplus)                                     VERCUB1A.110   
     &           * (rhere - rhereplus2)        )                           VERCUB1A.111   
                                                                           VERCUB1A.112   
           Z3 =  ( (ROut(i,j,k) - rhereminus)                              VERCUB1A.113   
     &           * (ROut(i,j,k) - rhere)                                   VERCUB1A.114   
     &           * (ROut(i,j,k) - rhereplus2)                              VERCUB1A.115   
     &           * DataIn (i,j,KOut(i,j,k)+1)   )                          VERCUB1A.116   
     &            /                                                        VERCUB1A.117   
     &            ( (rhereplus - rhereminus)                               VERCUB1A.118   
     &           * (rhereplus - rhere)                                     VERCUB1A.119   
     &           * (rhereplus - rhereplus2)   )                            VERCUB1A.120   
                                                                           VERCUB1A.121   
           Z4 =  ( (ROut(i,j,k) - rhereminus)                              VERCUB1A.122   
     &           * (ROut(i,j,k) - rhere)                                   VERCUB1A.123   
     &           * (ROut(i,j,k) - rhereplus)                               VERCUB1A.124   
     &           * DataIn (i,j,KOut(i,j,k)+2)   )                          VERCUB1A.125   
     &           /                                                         VERCUB1A.126   
     &           ( (rhereplus2 - rhereminus)                               VERCUB1A.127   
     &           * (rhereplus2 - rhere)                                    VERCUB1A.128   
     &           * (rhereplus2 - rhereplus)   )                            VERCUB1A.129   
                                                                           VERCUB1A.130   
           DataOut (i,j,k) = Z1+Z2+Z3+Z4                                   VERCUB1A.131   
                                                                           VERCUB1A.132   
          End If                                                           VERCUB1A.133   
           End Do                                                          VERCUB1A.134   
          End Do                                                           VERCUB1A.135   
         End Do                                                            VERCUB1A.136   
                                                                           VERCUB1A.137   
        Return                                                             VERCUB1A.138   
        End                                                                VERCUB1A.139   
*ENDIF                                                                     VERCUB1A.140   
