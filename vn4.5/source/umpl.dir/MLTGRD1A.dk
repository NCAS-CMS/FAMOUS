*IF DEF,C93_1A,OR,DEF,C93_2A                                               GNF0F402.18    
C ******************************COPYRIGHT******************************    GTS2F400.6013  
C (c) CROWN COPYRIGHT 1995, METEOROLOGICAL OFFICE, All Rights Reserved.    GTS2F400.6014  
C                                                                          GTS2F400.6015  
C Use, duplication or disclosure of this code is subject to the            GTS2F400.6016  
C restrictions as set forth in the contract.                               GTS2F400.6017  
C                                                                          GTS2F400.6018  
C                Meteorological Office                                     GTS2F400.6019  
C                London Road                                               GTS2F400.6020  
C                BRACKNELL                                                 GTS2F400.6021  
C                Berkshire UK                                              GTS2F400.6022  
C                RG12 2SZ                                                  GTS2F400.6023  
C                                                                          GTS2F400.6024  
C If no contract has been raised with this copy of the code, the use,      GTS2F400.6025  
C duplication or disclosure of it is strictly prohibited.  Permission      GTS2F400.6026  
C to do so must first be obtained in writing from the Head of Numerical    GTS2F400.6027  
C Modelling at the above address.                                          GTS2F400.6028  
C ******************************COPYRIGHT******************************    GTS2F400.6029  
C                                                                          GTS2F400.6030  
CLL   SUBROUTINE MG_CALC_Z                                                 MLTGRD1A.3     
CLL                                                                        MLTGRD1A.4     
CLL   PURPOSE:                                                             MLTGRD1A.5     
CLL   -------                                                              MLTGRD1A.6     
CLL   SETS VERTICAL LEVELS FOR ALL GRIDS.                                  MLTGRD1A.7     
CLL                                                                        MLTGRD1A.8     
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.9     
CLL                                                                        MLTGRD1A.10    
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.11    
CLL VERSION  DATE                                                          MLTGRD1A.12    
CLL   3.3             WRITTEN BY M. H. MAWSON.                             MLTGRD1A.13    
CLL vn4.2  07/11/96:Allow this routine to be used in C93_2A (Farnon)       GNF0F402.17    
CLL                                                                        MLTGRD1A.14    
CLL                                                                        MLTGRD1A.15    
CLLEND -----------------------------------------------------------------   MLTGRD1A.16    
                                                                           MLTGRD1A.17    
C*L ARGUMENT LIST.                                                         MLTGRD1A.18    
                                                                           MLTGRD1A.19    
      SUBROUTINE MG_CALC_Z(Z_Q_GRIDS,Z_MID_GRIDS,START_ADDRESS_Z,          MLTGRD1A.20    
     &                     LAST_ADDRESS_Z,NGRIDS,KMAX,RES_DIRS)            MLTGRD1A.21    
                                                                           MLTGRD1A.22    
      IMPLICIT NONE                                                        MLTGRD1A.23    
                                                                           MLTGRD1A.24    
      INTEGER                                                              MLTGRD1A.25    
     &  NGRIDS        !IN NUMBER OF GRIDS                                  MLTGRD1A.26    
                                                                           MLTGRD1A.27    
      INTEGER                                                              MLTGRD1A.28    
     &  KMAX(NGRIDS) !IN NUMBER OF LEVELS ON EACH GRID                     MLTGRD1A.29    
     &, START_ADDRESS_Z(NGRIDS) !IN START ADDRESS FOR EACH ARRAY OF        MLTGRD1A.30    
     &                          !   LEVELS ON EACH GRID                    MLTGRD1A.31    
     &, LAST_ADDRESS_Z          !IN USED TO DIMENSION SPACE REQUIRED       MLTGRD1A.32    
     &, RES_DIRS(NGRIDS)        !IN NUMBER OF DIRECTIONS TO RESTRICT IN    MLTGRD1A.33    
                                                                           MLTGRD1A.34    
      REAL                                                                 MLTGRD1A.35    
     &  Z_Q_GRIDS(LAST_ADDRESS_Z) !INOUT HOLDS ALL Z LEVELS AT Q POINTS    MLTGRD1A.36    
     &, Z_MID_GRIDS(LAST_ADDRESS_Z) !INOUT HOLDS Z VALUES AT MID-POINTS    MLTGRD1A.37    
     &                              !      BETWEEN Q POINTS IN VERTICAL    MLTGRD1A.38    
                                                                           MLTGRD1A.39    
C*----------------------------------------------------------------------   MLTGRD1A.40    
                                                                           MLTGRD1A.41    
C*L NO LOCAL WORK ARRAYS REQUIRED.                                         MLTGRD1A.42    
C*----------------------------------------------------------------------   MLTGRD1A.43    
C    LOCAL VARIABLES.                                                      MLTGRD1A.44    
      INTEGER                                                              MLTGRD1A.45    
     & I,J                                                                 MLTGRD1A.46    
                                                                           MLTGRD1A.47    
C*L NO EXTERNAL ROUTINES CALLED.                                           MLTGRD1A.48    
C*----------------------------------------------------------------------   MLTGRD1A.49    
                                                                           MLTGRD1A.50    
CL----------------------------------------------------------------------   MLTGRD1A.51    
CL    SECTION 1. SET LEVELS FOR EACH GRID.                                 MLTGRD1A.52    
CL----------------------------------------------------------------------   MLTGRD1A.53    
                                                                           MLTGRD1A.54    
      DO I= NGRIDS-1,1,-1                                                  MLTGRD1A.55    
        IF(MOD(RES_DIRS(I+1),2).EQ.1) THEN                                 MLTGRD1A.56    
C SET Q LEVELS                                                             MLTGRD1A.57    
          DO J=1,KMAX(I)                                                   MLTGRD1A.58    
            Z_Q_GRIDS(START_ADDRESS_Z(I)+J-1) =                            MLTGRD1A.59    
     &                Z_Q_GRIDS(START_ADDRESS_Z(I+1)+2*J-2)                MLTGRD1A.60    
          END DO                                                           MLTGRD1A.61    
C INTERPOLATE MID-LEVELS, CURRENTLY SET TO SIMPLE LINEAR                   MLTGRD1A.62    
C FIRST COPY BOTTOM AND TOP LEVEL WHICH REMAIN UNCHANGED                   MLTGRD1A.63    
          Z_MID_GRIDS(START_ADDRESS_Z(I)) =                                MLTGRD1A.64    
     &                Z_MID_GRIDS(START_ADDRESS_Z(I+1))                    MLTGRD1A.65    
          Z_MID_GRIDS(START_ADDRESS_Z(I)+ KMAX(I)) =                       MLTGRD1A.66    
     &                Z_MID_GRIDS(START_ADDRESS_Z(I+1)+KMAX(I+1))          MLTGRD1A.67    
          DO J=1,KMAX(I)-1                                                 MLTGRD1A.68    
            Z_MID_GRIDS(START_ADDRESS_Z(I)+J) = .5*                        MLTGRD1A.69    
     &               (Z_Q_GRIDS(START_ADDRESS_Z(I)+J-1) +                  MLTGRD1A.70    
     &                Z_Q_GRIDS(START_ADDRESS_Z(I)+J))                     MLTGRD1A.71    
          END DO                                                           MLTGRD1A.72    
        ELSE                                                               MLTGRD1A.73    
C SAME VERTICAL LEVELS AS LAST GRID SO SIMPLY COPY.                        MLTGRD1A.74    
          DO J=1,KMAX(I)                                                   MLTGRD1A.75    
            Z_Q_GRIDS(START_ADDRESS_Z(I)+J-1) =                            MLTGRD1A.76    
     &                Z_Q_GRIDS(START_ADDRESS_Z(I+1)+J-1)                  MLTGRD1A.77    
          END DO                                                           MLTGRD1A.78    
          DO J=1,KMAX(I)+1                                                 MLTGRD1A.79    
            Z_MID_GRIDS(START_ADDRESS_Z(I)+J-1) =                          MLTGRD1A.80    
     &                Z_MID_GRIDS(START_ADDRESS_Z(I+1)+J-1)                MLTGRD1A.81    
          END DO                                                           MLTGRD1A.82    
        END IF                                                             MLTGRD1A.83    
      END DO                                                               MLTGRD1A.84    
                                                                           MLTGRD1A.85    
CL    END OF ROUTINE MG_CALC_Z                                             MLTGRD1A.86    
                                                                           MLTGRD1A.87    
      RETURN                                                               MLTGRD1A.88    
      END                                                                  MLTGRD1A.89    
CLL   SUBROUTINE MG_K_MATRIX                                               MLTGRD1A.90    
CLL                                                                        MLTGRD1A.91    
CLL   PURPOSE:                                                             MLTGRD1A.92    
CLL   -------                                                              MLTGRD1A.93    
CLL   CALCULATES CURRENT VALUE OF LEFT-HAND-SIDE OF P.D.E. FOR A GIVEN     MLTGRD1A.94    
CLL   VALUE OF I AND J. SETS MATRIX ENTRIES TO SOLVE FOR CORRECTION.       MLTGRD1A.95    
CLL                                                                        MLTGRD1A.96    
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.97    
CLL                                                                        MLTGRD1A.98    
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.99    
CLL VERSION  DATE                                                          MLTGRD1A.100   
CLL   3.3             WRITTEN BY M. H. MAWSON.                             MLTGRD1A.101   
CLL                                                                        MLTGRD1A.102   
CLL   PROGRAMMING STANDARD: UNIFIED MODEL DOCUMENTATION PAPER NO. 4        MLTGRD1A.103   
CLL                                                                        MLTGRD1A.104   
CLLEND -----------------------------------------------------------------   MLTGRD1A.105   
                                                                           MLTGRD1A.106   
C*L ARGUMENT LIST.                                                         MLTGRD1A.107   
                                                                           MLTGRD1A.108   
      SUBROUTINE MG_K_MATRIX(                                              MLTGRD1A.109   
     &                       LHS,A0,A1,A2,Q,A,B,C1,C2,DEF,D,E,F,G,         MLTGRD1A.110   
     &                       I_DIM,J_DIM,K_DIM,                            MLTGRD1A.111   
     &                       COS_P_LATITUDE,SEC_P_LATITUDE,                MLTGRD1A.112   
     &                       COS_V_LATITUDE,EARTH_RADIUS_INVERSE,          MLTGRD1A.113   
     &                       LATITUDE_STEP_INVERSE,                        MLTGRD1A.114   
     &                       LONGITUDE_STEP_INVERSE,                       MLTGRD1A.115   
     &                       I,J,VERSION,Z_Q,Z_MID,I_NT,J_NT)              MLTGRD1A.116   
                                                                           MLTGRD1A.117   
      IMPLICIT NONE                                                        MLTGRD1A.118   
                                                                           MLTGRD1A.119   
      LOGICAL                                                              MLTGRD1A.120   
     &  I_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN I DIRECTION   MLTGRD1A.121   
     &, J_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN J DIRECTION   MLTGRD1A.122   
                                                                           MLTGRD1A.123   
      INTEGER                                                              MLTGRD1A.124   
     &  I_DIM         !IN. NUMBER OF NODES IN THE I-DIRECTION              MLTGRD1A.125   
     &, J_DIM         !IN. NUMBER OF NODES IN THE J-DIRECTION              MLTGRD1A.126   
     &, K_DIM         !IN. NUMBER OF NODES IN THE K-DIRECTION              MLTGRD1A.127   
     &, I             !IN. VALUE OF I FOR WHICH LHS AND COEFFS ARE REQ.    MLTGRD1A.128   
     &, J             !IN. VALUE OF J FOR WHICH LHS AND COEFFS ARE REQ.    MLTGRD1A.129   
     &, VERSION       !IN. VERSION OF MULTIGRID SCHEME.                    MLTGRD1A.130   
                                                                           MLTGRD1A.131   
      REAL                                                                 MLTGRD1A.132   
     &  Q(I_DIM,J_DIM,K_DIM)    !IN. SOLUTION                              MLTGRD1A.133   
     &, A(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.134   
     &, B(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.135   
     &, C1(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.136   
     &, C2(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.137   
     &, DEF(I_DIM,J_DIM,K_DIM)  !IN. COEFFICIENT                           MLTGRD1A.138   
     &, D(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.139   
     &, E(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.140   
     &, F(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.141   
     &, G(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.142   
     &, COS_P_LATITUDE(I_DIM,J_DIM) !IN. COSINE OF LATITUDE AT Q POINTS    MLTGRD1A.143   
     &, COS_V_LATITUDE(I_DIM,J_DIM-1)!IN. COSINE OF LATITUDE AT B POINTS   MLTGRD1A.144   
     &, SEC_P_LATITUDE(I_DIM,J_DIM)!IN. 1./COSINE OF LATITUDE AT Q POINT   MLTGRD1A.145   
     &, Z_Q(K_DIM)              !IN. Z AT Q POINTS.                        MLTGRD1A.146   
     &, Z_MID(0:K_DIM)          !IN. Z MIDWAY BETWEEN Q POINTS.            MLTGRD1A.147   
                                                                           MLTGRD1A.148   
      REAL                                                                 MLTGRD1A.149   
     &  EARTH_RADIUS_INVERSE    !IN. 1/EARTH RADIUS                        MLTGRD1A.150   
     &, LATITUDE_STEP_INVERSE   !IN. 1/LATITUDE STEP LENGTH IN RADIANS     MLTGRD1A.151   
     &, LONGITUDE_STEP_INVERSE  !IN. 1/LONGITUDE STEP LENGTH IN RADIANS    MLTGRD1A.152   
                                                                           MLTGRD1A.153   
      REAL                                                                 MLTGRD1A.154   
     &  LHS(K_DIM)         !OUT. LEFT-HAND-SIDE.                           MLTGRD1A.155   
     &, A0(K_DIM)          !OUT. DIAGONAL MATRIX COEFFICIENT.              MLTGRD1A.156   
     &, A1(K_DIM)          !OUT. SUPER-DIAGONAL MATRIX COEFFICIENT.        MLTGRD1A.157   
     &, A2(K_DIM)          !OUT. SUB-DIAGONAL MATRIX COEFFICIENT.          MLTGRD1A.158   
C*----------------------------------------------------------------------   MLTGRD1A.159   
                                                                           MLTGRD1A.160   
C*L NO LOCAL WORK ARRAYS REQUIRED.                                         MLTGRD1A.161   
C*----------------------------------------------------------------------   MLTGRD1A.162   
C LOCAL VARIABLES.                                                         MLTGRD1A.163   
                                                                           MLTGRD1A.164   
      INTEGER                                                              MLTGRD1A.165   
     &  K,I2,IC                                                            MLTGRD1A.166   
                                                                           MLTGRD1A.167   
      REAL                                                                 MLTGRD1A.168   
     &  SCALAR                                                             MLTGRD1A.169   
     &, SCALARS                                                            MLTGRD1A.170   
     &, SCALAR1                                                            MLTGRD1A.171   
     &, SCALAR2                                                            MLTGRD1A.172   
                                                                           MLTGRD1A.173   
C*L NO EXTERNAL ROUTINES CALLED.                                           MLTGRD1A.174   
C*----------------------------------------------------------------------   MLTGRD1A.175   
                                                                           MLTGRD1A.176   
CL----------------------------------------------------------------------   MLTGRD1A.177   
CL    SECTION 1. CALCULATE LEFT-HAND-SIDE OF P.D.E.                        MLTGRD1A.178   
CL               AND MATRIX COEFFICIENTS.                                  MLTGRD1A.179   
CL----------------------------------------------------------------------   MLTGRD1A.180   
                                                                           MLTGRD1A.181   
C ----------------------------------------------------------------------   MLTGRD1A.182   
CL    SECTION 1.1 CALCULATE K-DIRECTION DERIVATIVES.                       MLTGRD1A.183   
C ----------------------------------------------------------------------   MLTGRD1A.184   
                                                                           MLTGRD1A.185   
C SET ZERO COEFFICIENTS IN MATRICES.                                       MLTGRD1A.186   
      A1(K_DIM) = 0.                                                       MLTGRD1A.187   
      A2(1) = 0.                                                           MLTGRD1A.188   
                                                                           MLTGRD1A.189   
      K=1                                                                  MLTGRD1A.190   
      SCALAR = 1./(Z_MID(K) - Z_MID(K-1))                                  MLTGRD1A.191   
      SCALAR1 = 1./(Z_Q(K+1) - Z_Q(K))                                     MLTGRD1A.192   
      LHS(K) = SCALAR*(Q(I,J,K+1)*C2(I,J,K+1)                              MLTGRD1A.193   
     &                    -Q(I,J,K)*C2(I,J,K))*C1(I,J,K)*SCALAR1           MLTGRD1A.194   
     &                      - Q(I,J,K)*G(I,J,K)                            MLTGRD1A.195   
      A0(K) = - SCALAR*C1(I,J,K)*SCALAR1*C2(I,J,K)                         MLTGRD1A.196   
     &            - G(I,J,K)                                               MLTGRD1A.197   
      A1(K) = SCALAR*C1(I,J,K)*SCALAR1*C2(I,J,K+1)                         MLTGRD1A.198   
      IF(Z_Q(1).NE.Z_MID(1)) THEN                                          MLTGRD1A.199   
C INCLUDE FIRST DERIVATIVE TERM WHEN NON-ZERO                              MLTGRD1A.200   
        LHS(K) = LHS(K)  + .5*SCALAR1*DEF(I,J,K)*F(I,J,K)*                 MLTGRD1A.201   
     &                     (Q(I,J,K+1)*C2(I,J,K+1)-Q(I,J,K)*C2(I,J,K))     MLTGRD1A.202   
        A0(K) = A0(K) - .5*SCALAR1*DEF(I,J,K)*F(I,J,K)*C2(I,J,K)           MLTGRD1A.203   
        A1(K) = A1(K) + .5*SCALAR1*DEF(I,J,K)*F(I,J,K)*C2(I,J,K+1)         MLTGRD1A.204   
      END IF                                                               MLTGRD1A.205   
      K=K_DIM                                                              MLTGRD1A.206   
      SCALAR = 1./(Z_MID(K) - Z_MID(K-1))                                  MLTGRD1A.207   
      SCALAR2 = 1./(Z_Q(K) - Z_Q(K-1))                                     MLTGRD1A.208   
      LHS(K) = - SCALAR*(Q(I,J,K)*C2(I,J,K)                                MLTGRD1A.209   
     &                 -Q(I,J,K-1)*C2(I,J,K-1))*C1(I,J,K-1)*SCALAR2        MLTGRD1A.210   
     &                      - Q(I,J,K)*G(I,J,K)                            MLTGRD1A.211   
      A0(K) = - SCALAR*C1(I,J,K-1)*SCALAR2*C2(I,J,K)                       MLTGRD1A.212   
     &            - G(I,J,K)                                               MLTGRD1A.213   
      A2(K) = SCALAR*C1(I,J,K-1)*SCALAR1*C2(I,J,K-1)                       MLTGRD1A.214   
      IF(Z_Q(K_DIM).NE.Z_MID(K_DIM+1)) THEN                                MLTGRD1A.215   
C INCLUDE FIRST DERIVATIVE TERM WHEN NON-ZERO                              MLTGRD1A.216   
        LHS(K) = LHS(K)  + .5*SCALAR2*DEF(I,J,K)*F(I,J,K-1)*               MLTGRD1A.217   
     &                     (Q(I,J,K)*C2(I,J,K)-Q(I,J,K-1)*C2(I,J,K-1))     MLTGRD1A.218   
        A0(K) = A0(K) + .5*SCALAR2*DEF(I,J,K)*F(I,J,K-1)*C2(I,J,K)         MLTGRD1A.219   
        A2(K) = A2(K) - .5*SCALAR2*DEF(I,J,K)*F(I,J,K-1)*C2(I,J,K-1)       MLTGRD1A.220   
      END IF                                                               MLTGRD1A.221   
      DO K=2,K_DIM-1                                                       MLTGRD1A.222   
        SCALAR = 1./(Z_MID(K) - Z_MID(K-1))                                MLTGRD1A.223   
        SCALAR1 = 1./(Z_Q(K+1) - Z_Q(K))                                   MLTGRD1A.224   
        SCALAR2 = 1./(Z_Q(K) - Z_Q(K-1))                                   MLTGRD1A.225   
        LHS(K) =  SCALAR*                                                  MLTGRD1A.226   
     &               ((Q(I,J,K+1)*C2(I,J,K+1)-Q(I,J,K)*C2(I,J,K))          MLTGRD1A.227   
     &                *C1(I,J,K)*SCALAR1                                   MLTGRD1A.228   
     &               -(Q(I,J,K)*C2(I,J,K)-Q(I,J,K-1)*C2(I,J,K-1))          MLTGRD1A.229   
     &                *C1(I,J,K-1)*SCALAR2)                                MLTGRD1A.230   
     &               +.5*DEF(I,J,K)*                                       MLTGRD1A.231   
     &               ((Q(I,J,K+1)*C2(I,J,K+1)-Q(I,J,K)*C2(I,J,K))          MLTGRD1A.232   
     &                *F(I,J,K)*SCALAR1                                    MLTGRD1A.233   
     &               +(Q(I,J,K)*C2(I,J,K)-Q(I,J,K-1)*C2(I,J,K-1))          MLTGRD1A.234   
     &                *F(I,J,K-1)*SCALAR2)                                 MLTGRD1A.235   
     &                      - Q(I,J,K)*G(I,J,K)                            MLTGRD1A.236   
        A0(K) = - SCALAR*(C1(I,J,K)*SCALAR1                                MLTGRD1A.237   
     &                              +C1(I,J,K-1)*SCALAR2)*C2(I,J,K)        MLTGRD1A.238   
     &               +.5*DEF(I,J,K)*(F(I,J,K-1)*SCALAR2                    MLTGRD1A.239   
     &                               -F(I,J,K)*SCALAR1)*C2(I,J,K)          MLTGRD1A.240   
     &            - G(I,J,K)                                               MLTGRD1A.241   
        A1(K) = SCALAR*C1(I,J,K)*SCALAR1*C2(I,J,K+1)                       MLTGRD1A.242   
     &             + .5*SCALAR1*DEF(I,J,K)*F(I,J,K)*C2(I,J,K+1)            MLTGRD1A.243   
        A2(K) = SCALAR*C1(I,J,K-1)*SCALAR1*C2(I,J,K-1)                     MLTGRD1A.244   
     &              - .5*SCALAR2*DEF(I,J,K)*F(I,J,K-1)*C2(I,J,K-1)         MLTGRD1A.245   
      END DO                                                               MLTGRD1A.246   
                                                                           MLTGRD1A.247   
C ----------------------------------------------------------------------   MLTGRD1A.248   
CL    SECTION 1.2 CALCULATE AND ADD ON I-DIRECTION DERIVATIVES.            MLTGRD1A.249   
C ----------------------------------------------------------------------   MLTGRD1A.250   
                                                                           MLTGRD1A.251   
      IF(I_NT) THEN                                                        MLTGRD1A.252   
        SCALAR = EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*                MLTGRD1A.253   
     &           LONGITUDE_STEP_INVERSE*LONGITUDE_STEP_INVERSE             MLTGRD1A.254   
        SCALARS= EARTH_RADIUS_INVERSE*LONGITUDE_STEP_INVERSE               MLTGRD1A.255   
                                                                           MLTGRD1A.256   
C NOT EXECUTED AT POLES IN GLOBAL VERSION.                                 MLTGRD1A.257   
        IF(.NOT.(J.EQ.1 .AND. VERSION.LT.3 .AND. J_NT) .AND.               MLTGRD1A.258   
     &     .NOT.(J.EQ.J_DIM .AND. VERSION.LT.3 .AND. J_NT)) THEN           MLTGRD1A.259   
          IF(I.EQ.1) THEN                                                  MLTGRD1A.260   
CL FIRST POINT ON ROW                                                      MLTGRD1A.261   
            IF(VERSION.LT.3) THEN                                          MLTGRD1A.262   
CL GLOBAL                                                                  MLTGRD1A.263   
              SCALAR1= SCALAR*SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)      MLTGRD1A.264   
              DO K=1,K_DIM                                                 MLTGRD1A.265   
                A0(K)  = A0(K) - (A(I_DIM,J,K)+A(I,J,K))*SCALAR1           MLTGRD1A.266   
     &                 +.5*DEF(I,J,K)*SCALARS*SEC_P_LATITUDE(I,J)*         MLTGRD1A.267   
     &                 (D(I_DIM,J,K)-D(I,J,K))                             MLTGRD1A.268   
                LHS(K) = LHS(K)+(Q(I_DIM,J,K)*A(I_DIM,J,K) - Q(I,J,K) *    MLTGRD1A.269   
     &              (A(I_DIM,J,K) + A(I,J,K)) + Q(I+1,J,K)*A(I,J,K))       MLTGRD1A.270   
     &               *SCALAR1                                              MLTGRD1A.271   
     &                   + .5*DEF(I,J,K)*SCALARS*SEC_P_LATITUDE(I,J)*      MLTGRD1A.272   
     &                   (D(I,J,K)*(Q(I+1,J,K)-Q(I,J,K))+D(I_DIM,J,K)*     MLTGRD1A.273   
     &                   (Q(I,J,K)-Q(I_DIM,J,K)))                          MLTGRD1A.274   
              END DO                                                       MLTGRD1A.275   
            ELSE                                                           MLTGRD1A.276   
CL LIMITED AREA                                                            MLTGRD1A.277   
              SCALAR1= SCALAR*SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)      MLTGRD1A.278   
              DO K=1,K_DIM                                                 MLTGRD1A.279   
                A0(K)  = A0(K) - 2.*A(I,J,K)*SCALAR1                       MLTGRD1A.280   
                LHS(K) = LHS(K) - 2.*(Q(I,J,K) * A(I,J,K) -                MLTGRD1A.281   
     &                           Q(I+1,J,K)*A(I,J,K))*SCALAR1              MLTGRD1A.282   
              END DO                                                       MLTGRD1A.283   
            END IF                                                         MLTGRD1A.284   
          ELSE IF (I.EQ.I_DIM) THEN                                        MLTGRD1A.285   
CL LAST POINT ON ROW                                                       MLTGRD1A.286   
            IF(VERSION.LT.3) THEN                                          MLTGRD1A.287   
CL GLOBAL                                                                  MLTGRD1A.288   
              SCALAR1= SCALAR*SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)      MLTGRD1A.289   
              DO K=1,K_DIM                                                 MLTGRD1A.290   
                A0(K)  = A0(K) - (A(I-1,J,K)+A(I,J,K))*SCALAR1             MLTGRD1A.291   
     &                 +.5*DEF(I,J,K)*SCALARS*SEC_P_LATITUDE(I,J)*         MLTGRD1A.292   
     &                 (D(I-1,J,K)-D(I,J,K))                               MLTGRD1A.293   
                LHS(K) = LHS(K) + (Q(I-1,J,K)*A(I-1,J,K) - Q(I,J,K) *      MLTGRD1A.294   
     &              (A(I-1,J,K) + A(I,J,K)) + Q(1,J,K)*A(I,J,K))           MLTGRD1A.295   
     &               *SCALAR1                                              MLTGRD1A.296   
     &                   + .5*DEF(I,J,K)*SCALARS*SEC_P_LATITUDE(I,J)*      MLTGRD1A.297   
     &                   (D(I,J,K)*(Q(1,J,K)-Q(I,J,K))+D(I-1,J,K)*         MLTGRD1A.298   
     &                   (Q(I,J,K)-Q(I-1,J,K)))                            MLTGRD1A.299   
              END DO                                                       MLTGRD1A.300   
            ELSE                                                           MLTGRD1A.301   
CL LIMITED AREA                                                            MLTGRD1A.302   
              SCALAR1= SCALAR*SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)      MLTGRD1A.303   
              DO K=1,K_DIM                                                 MLTGRD1A.304   
                A0(K)  = A0(K) - 2.*A(I-1,J,K)*SCALAR1                     MLTGRD1A.305   
                LHS(K) = LHS(K) + 2.*(Q(I-1,J,K) * A(I-1,J,K) -            MLTGRD1A.306   
     &                           Q(I,J,K)*A(I-1,J,K))*SCALAR1              MLTGRD1A.307   
              END DO                                                       MLTGRD1A.308   
            END IF                                                         MLTGRD1A.309   
          ELSE                                                             MLTGRD1A.310   
CL ALL OTHER POINTS ON ROW                                                 MLTGRD1A.311   
            SCALAR1 = SCALAR*SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)       MLTGRD1A.312   
            DO K=1,K_DIM                                                   MLTGRD1A.313   
              A0(K)  = A0(K) - (A(I-1,J,K)+A(I,J,K))*SCALAR1               MLTGRD1A.314   
     &                 +.5*DEF(I,J,K)*SCALARS*SEC_P_LATITUDE(I,J)*         MLTGRD1A.315   
     &                 (D(I-1,J,K)-D(I,J,K))                               MLTGRD1A.316   
              LHS(K) = LHS(K) + (Q(I-1,J,K)*A(I-1,J,K) - Q(I,J,K) *        MLTGRD1A.317   
     &              (A(I-1,J,K) + A(I,J,K)) + Q(I+1,J,K)*A(I,J,K))         MLTGRD1A.318   
     &               *SCALAR1                                              MLTGRD1A.319   
     &                   + .5*DEF(I,J,K)*SCALARS*SEC_P_LATITUDE(I,J)*      MLTGRD1A.320   
     &                   (D(I,J,K)*(Q(I+1,J,K)-Q(I,J,K))+D(I-1,J,K)*       MLTGRD1A.321   
     &                   (Q(I,J,K)-Q(I-1,J,K)))                            MLTGRD1A.322   
            END DO                                                         MLTGRD1A.323   
          END IF                                                           MLTGRD1A.324   
        END IF                                                             MLTGRD1A.325   
      END IF                                                               MLTGRD1A.326   
                                                                           MLTGRD1A.327   
C ----------------------------------------------------------------------   MLTGRD1A.328   
CL    SECTION 1.3 CALCULATE J-DIRECTION DERIVATIVES.                       MLTGRD1A.329   
C ----------------------------------------------------------------------   MLTGRD1A.330   
                                                                           MLTGRD1A.331   
      IF (J_NT) THEN                                                       MLTGRD1A.332   
        SCALAR = EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*                MLTGRD1A.333   
     &           LATITUDE_STEP_INVERSE*LATITUDE_STEP_INVERSE               MLTGRD1A.334   
        SCALARS= EARTH_RADIUS_INVERSE*LATITUDE_STEP_INVERSE                MLTGRD1A.335   
        IF(J.EQ.1) THEN                                                    MLTGRD1A.336   
CL NORTHERN BOUNDARY                                                       MLTGRD1A.337   
          IF(VERSION.LT.3) THEN                                            MLTGRD1A.338   
CL GLOBAL                                                                  MLTGRD1A.339   
            DO K=1,K_DIM                                                   MLTGRD1A.340   
              I2 = I_DIM/2                                                 MLTGRD1A.341   
              SCALAR1 = 0.                                                 MLTGRD1A.342   
              SCALAR2 = 0.                                                 MLTGRD1A.343   
                                                                           MLTGRD1A.344   
C SUM ALL TERMS AT POLE.                                                   MLTGRD1A.345   
              DO IC= 1,I_DIM/2                                             MLTGRD1A.346   
                SCALAR1 = SCALAR1 + ((Q(IC,2,K)-Q(IC,1,K))                 MLTGRD1A.347   
     &                       *B(IC,1,K)*COS_V_LATITUDE(IC,1)               MLTGRD1A.348   
     &                        -(Q(IC+I2,1,K) -Q(IC+I2,2,K))                MLTGRD1A.349   
     &                        *B(IC+I2,1,K)*COS_V_LATITUDE(IC+I2,1))       MLTGRD1A.350   
     &                        *SEC_P_LATITUDE(IC,1)*SCALAR                 MLTGRD1A.351   
     &                    +DEF(1,1,K)*SCALARS*                             MLTGRD1A.352   
     &                    (E(IC,1,K)*(Q(IC,1,K)-Q(IC,2,K))+                MLTGRD1A.353   
     &                     E(IC+I2,1,K)*(Q(IC+I2,1,K)-Q(IC+I2,2,K)))       MLTGRD1A.354   
                 SCALAR2 = SCALAR2 - (B(IC,1,K)*COS_V_LATITUDE(IC,1)       MLTGRD1A.355   
     &                    +B(IC+I2,1,K)*COS_V_LATITUDE(IC+I2,1))           MLTGRD1A.356   
     &                     *SEC_P_LATITUDE(IC,1)*SCALAR                    MLTGRD1A.357   
     &                    +DEF(1,1,K)*SCALARS*                             MLTGRD1A.358   
     &                    (E(IC,1,K)+E(IC+I2,1,K))                         MLTGRD1A.359   
              END DO                                                       MLTGRD1A.360   
                                                                           MLTGRD1A.361   
              LHS(K) = LHS(K) + SCALAR1                                    MLTGRD1A.362   
              A0(K) = A0(K) + SCALAR2                                      MLTGRD1A.363   
            END DO                                                         MLTGRD1A.364   
                                                                           MLTGRD1A.365   
C RESCALE VALUES BY I_DIM SINCE RESIDUAL IS STORED AS R/I_DIM AT POLES     MLTGRD1A.366   
            DO K=1,K_DIM                                                   MLTGRD1A.367   
              LHS(K) = LHS(K) /I_DIM                                       MLTGRD1A.368   
              A0(K) = A0(K) /I_DIM                                         MLTGRD1A.369   
              A1(K) = A1(K) /I_DIM                                         MLTGRD1A.370   
              A2(K) = A2(K) /I_DIM                                         MLTGRD1A.371   
            END DO                                                         MLTGRD1A.372   
                                                                           MLTGRD1A.373   
          ELSE                                                             MLTGRD1A.374   
                                                                           MLTGRD1A.375   
CL LIMITED AREA                                                            MLTGRD1A.376   
            DO K=1,K_DIM                                                   MLTGRD1A.377   
              LHS(K) = LHS(K) -2.*(Q(I,J,K)*B(I,J,K)                       MLTGRD1A.378   
     &                        -Q(I,J+1,K)*B(I,J,K))*COS_V_LATITUDE(I,J)    MLTGRD1A.379   
     &                    *SEC_P_LATITUDE(I,J)*SCALAR                      MLTGRD1A.380   
              A0(K)  = A0(K) - 2.*B(I,J,K)*COS_V_LATITUDE(I,J)             MLTGRD1A.381   
     &                    *SEC_P_LATITUDE(I,J)*SCALAR                      MLTGRD1A.382   
            END DO                                                         MLTGRD1A.383   
          END IF                                                           MLTGRD1A.384   
                                                                           MLTGRD1A.385   
        ELSE IF (J.EQ.J_DIM) THEN                                          MLTGRD1A.386   
                                                                           MLTGRD1A.387   
CL SOUTHERN BOUNDARY                                                       MLTGRD1A.388   
          IF(VERSION.LT.3) THEN                                            MLTGRD1A.389   
CL GLOBAL                                                                  MLTGRD1A.390   
            DO K=1,K_DIM                                                   MLTGRD1A.391   
              I2 = I_DIM/2                                                 MLTGRD1A.392   
              SCALAR1 = 0.                                                 MLTGRD1A.393   
              SCALAR2 = 0.                                                 MLTGRD1A.394   
                                                                           MLTGRD1A.395   
C SUM ALL TERMS AT POLE.                                                   MLTGRD1A.396   
              DO IC= 1,I_DIM/2                                             MLTGRD1A.397   
                SCALAR1 = SCALAR1 +((Q(IC,J_DIM-1,K) -Q(IC,J_DIM,K))       MLTGRD1A.398   
     &                      *B(IC,J_DIM-1,K)*COS_V_LATITUDE(IC,J_DIM-1)    MLTGRD1A.399   
     &                      -(Q(IC+I2,J_DIM,K)-Q(IC+I2,J_DIM-1,K))         MLTGRD1A.400   
     &                      *B(IC+I2,J_DIM-1,K)*                           MLTGRD1A.401   
     &                      COS_V_LATITUDE(IC+I2,J_DIM-1))                 MLTGRD1A.402   
     &                      *SEC_P_LATITUDE(IC,J_DIM)*SCALAR               MLTGRD1A.403   
     &                    +DEF(1,J_DIM,K)*SCALARS*                         MLTGRD1A.404   
     &                (E(IC,J_DIM-1,K)*(Q(IC,J_DIM-1,K)-Q(IC,J_DIM,K))+    MLTGRD1A.405   
     &                     E(IC+I2,J_DIM-1,K)*(Q(IC+I2,J_DIM-1,K)          MLTGRD1A.406   
     &                                         -Q(IC+I2,J_DIM,K)))         MLTGRD1A.407   
                SCALAR2 = SCALAR2 - (B(IC,J_DIM-1,K)*                      MLTGRD1A.408   
     &                      COS_V_LATITUDE(IC,J_DIM-1)                     MLTGRD1A.409   
     &                      +B(IC+I2,J_DIM-1,K)*                           MLTGRD1A.410   
     &                      COS_V_LATITUDE(IC+I2,J_DIM-1))                 MLTGRD1A.411   
     &                      *SEC_P_LATITUDE(IC,J_DIM)*SCALAR               MLTGRD1A.412   
     &                      -DEF(1,J_DIM,K)*SCALARS*                       MLTGRD1A.413   
     &                      (E(IC,J_DIM-1,K)+E(IC+I2,J_DIM-1,K))           MLTGRD1A.414   
               END DO                                                      MLTGRD1A.415   
                                                                           MLTGRD1A.416   
               LHS(K) = LHS(K) + SCALAR1                                   MLTGRD1A.417   
               A0(K) = A0(K) + SCALAR2                                     MLTGRD1A.418   
             END DO                                                        MLTGRD1A.419   
                                                                           MLTGRD1A.420   
C RESCALE VALUES BY I_DIM SINCE RESIDUAL IS STORED AS R/I_DIM AT POLES     MLTGRD1A.421   
            DO K=1,K_DIM                                                   MLTGRD1A.422   
               LHS(K) = LHS(K) /I_DIM                                      MLTGRD1A.423   
               A0(K) = A0(K) /I_DIM                                        MLTGRD1A.424   
               A1(K) = A1(K) /I_DIM                                        MLTGRD1A.425   
               A2(K) = A2(K) /I_DIM                                        MLTGRD1A.426   
            END DO                                                         MLTGRD1A.427   
                                                                           MLTGRD1A.428   
          ELSE                                                             MLTGRD1A.429   
CL LIMITED AREA                                                            MLTGRD1A.430   
            DO K=1,K_DIM                                                   MLTGRD1A.431   
              LHS(K) = LHS(K) + 2.*(Q(I,J-1,K)*B(I,J-1,K)                  MLTGRD1A.432   
     &                    -Q(I,J,K)*B(I,J-1,K))*COS_V_LATITUDE(I,J-1)      MLTGRD1A.433   
     &                    *SEC_P_LATITUDE(I,J)*SCALAR                      MLTGRD1A.434   
              A0(K)  = A0(K) - 2.*B(I,J-1,K)*COS_V_LATITUDE(I,J-1)         MLTGRD1A.435   
     &                    *SEC_P_LATITUDE(I,J)*SCALAR                      MLTGRD1A.436   
             END DO                                                        MLTGRD1A.437   
          END IF                                                           MLTGRD1A.438   
        ELSE                                                               MLTGRD1A.439   
          DO K=1,K_DIM                                                     MLTGRD1A.440   
CL ALL OTHER POINTS                                                        MLTGRD1A.441   
            LHS(K) = LHS(K) + ((Q(I,J-1,K)*B(I,J-1,K)                      MLTGRD1A.442   
     &                    -Q(I,J,K)*B(I,J-1,K))*COS_V_LATITUDE(I,J-1)      MLTGRD1A.443   
     &                    -(Q(I,J,K)*B(I,J,K)                              MLTGRD1A.444   
     &                    -Q(I,J+1,K)*B(I,J,K))*COS_V_LATITUDE(I,J))       MLTGRD1A.445   
     &                    *SEC_P_LATITUDE(I,J)*SCALAR                      MLTGRD1A.446   
     &                      +DEF(I,J,K)*.5*SCALARS*                        MLTGRD1A.447   
     &                      (E(I,J-1,K)*(Q(I,J-1,K)-Q(I,J,K))+             MLTGRD1A.448   
     &                       E(I,J,K)*(Q(I,J,K)-Q(I,J+1,K)))               MLTGRD1A.449   
            A0(K)  = A0(K) - (B(I,J-1,K)*COS_V_LATITUDE(I,J-1)             MLTGRD1A.450   
     &                      +B(I,J,K)*COS_V_LATITUDE(I,J))                 MLTGRD1A.451   
     &                    *SEC_P_LATITUDE(I,J)*SCALAR                      MLTGRD1A.452   
     &                      +DEF(I,J,K)*.5*SCALARS*                        MLTGRD1A.453   
     &                      (E(I,J,K)-E(I,J-1,K))                          MLTGRD1A.454   
          END DO                                                           MLTGRD1A.455   
        END IF                                                             MLTGRD1A.456   
      END IF                                                               MLTGRD1A.457   
                                                                           MLTGRD1A.458   
CL    END OF ROUTINE MG_K_MATRIX                                           MLTGRD1A.459   
                                                                           MLTGRD1A.460   
      RETURN                                                               MLTGRD1A.461   
      END                                                                  MLTGRD1A.462   
CLL   SUBROUTINE MG_LEFT_HAND_SIDE                                         MLTGRD1A.463   
CLL                                                                        MLTGRD1A.464   
CLL   PURPOSE:                                                             MLTGRD1A.465   
CLL   -------                                                              MLTGRD1A.466   
CLL   CALCULATES CURRENT VALUE OF LEFT-HAND-SIDE OF P.D.E.                 MLTGRD1A.467   
CLL                                                                        MLTGRD1A.468   
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.469   
CLL                                                                        MLTGRD1A.470   
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.471   
CLL VERSION  DATE                                                          MLTGRD1A.472   
CLL   3.3                                                                  MLTGRD1A.473   
CLL                                                                        MLTGRD1A.474   
CLL                                                                        MLTGRD1A.475   
CLLEND -----------------------------------------------------------------   MLTGRD1A.476   
                                                                           MLTGRD1A.477   
C*L ARGUMENT LIST.                                                         MLTGRD1A.478   
                                                                           MLTGRD1A.479   
      SUBROUTINE MG_LEFT_HAND_SIDE(                                        MLTGRD1A.480   
     &                             Q,A,B,C1,C2,DEF,D,E,F,G,                MLTGRD1A.481   
     &                             LHS,I_DIM,J_DIM,K_DIM,                  MLTGRD1A.482   
     &                             COS_P_LATITUDE,SEC_P_LATITUDE,          MLTGRD1A.483   
     &                             COS_V_LATITUDE,                         MLTGRD1A.484   
     &                             EARTH_RADIUS_INVERSE,                   MLTGRD1A.485   
     &                             LATITUDE_STEP_INVERSE,                  MLTGRD1A.486   
     &                             LONGITUDE_STEP_INVERSE,VERSION,         MLTGRD1A.487   
     &                             I_NT,J_NT,K_NT,Z_Q,Z_MID)               MLTGRD1A.488   
                                                                           MLTGRD1A.489   
      IMPLICIT NONE                                                        MLTGRD1A.490   
                                                                           MLTGRD1A.491   
      LOGICAL                                                              MLTGRD1A.492   
     &  I_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN I DIRECTION   MLTGRD1A.493   
     &, J_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN J DIRECTION   MLTGRD1A.494   
     &, K_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN K DIRECTION   MLTGRD1A.495   
                                                                           MLTGRD1A.496   
      INTEGER                                                              MLTGRD1A.497   
     &  I_DIM         !IN. NUMBER OF NODES IN THE I-DIRECTION              MLTGRD1A.498   
     &, J_DIM         !IN. NUMBER OF NODES IN THE J-DIRECTION              MLTGRD1A.499   
     &, K_DIM         !IN. NUMBER OF NODES IN THE K-DIRECTION              MLTGRD1A.500   
     &, VERSION       !IN. VERSION OF SCHEME BEING USED.                   MLTGRD1A.501   
                                                                           MLTGRD1A.502   
      REAL                                                                 MLTGRD1A.503   
     &  Q(I_DIM,J_DIM,K_DIM)    !IN. SOLUTION                              MLTGRD1A.504   
     &, A(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.505   
     &, B(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.506   
     &, C1(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.507   
     &, C2(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.508   
     &, DEF(I_DIM,J_DIM,K_DIM)  !IN. COEFFICIENT                           MLTGRD1A.509   
     &, D(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.510   
     &, E(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.511   
     &, F(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.512   
     &, G(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.513   
     &, COS_P_LATITUDE(I_DIM,J_DIM) !IN. COSINE OF LATITUDE AT Q POINTS    MLTGRD1A.514   
     &, COS_V_LATITUDE(I_DIM,J_DIM-1)!IN. COSINE OF LATITUDE AT B POINTS   MLTGRD1A.515   
     &, SEC_P_LATITUDE(I_DIM,J_DIM)!IN. 1./COSINE OF LATITUDE AT Q POINT   MLTGRD1A.516   
     &, Z_Q(K_DIM)              !IN. Z AT Q POINTS.                        MLTGRD1A.517   
     &, Z_MID(0:K_DIM)          !IN. Z AT MID POINTS BETWEEN Q POINTS.     MLTGRD1A.518   
                                                                           MLTGRD1A.519   
      REAL                                                                 MLTGRD1A.520   
     &  EARTH_RADIUS_INVERSE    !IN. 1/EARTH RADIUS                        MLTGRD1A.521   
     &, LATITUDE_STEP_INVERSE   !IN. 1/LATITUDE STEP LENGTH IN RADIANS     MLTGRD1A.522   
     &, LONGITUDE_STEP_INVERSE  !IN. 1/LONGITUDE STEP LENGTH IN RADIANS    MLTGRD1A.523   
                                                                           MLTGRD1A.524   
      REAL                                                                 MLTGRD1A.525   
     &  LHS(I_DIM,J_DIM,K_DIM)  !OUT. LEFT-HAND-SIDE.                      MLTGRD1A.526   
C*----------------------------------------------------------------------   MLTGRD1A.527   
                                                                           MLTGRD1A.528   
C*L NO LOCAL WORK ARRAYS REQUIRED.                                         MLTGRD1A.529   
C*----------------------------------------------------------------------   MLTGRD1A.530   
C LOCAL VARIABLES.                                                         MLTGRD1A.531   
                                                                           MLTGRD1A.532   
      INTEGER                                                              MLTGRD1A.533   
     &  I,J,K,I2,JB,JE                                                     MLTGRD1A.534   
                                                                           MLTGRD1A.535   
      REAL                                                                 MLTGRD1A.536   
     &  SCALAR                                                             MLTGRD1A.537   
     &, SCALARS                                                            MLTGRD1A.538   
     &, SCALAR1                                                            MLTGRD1A.539   
     &, SCALAR2                                                            MLTGRD1A.540   
                                                                           MLTGRD1A.541   
C*L NO EXTERNAL ROUTINES CALLED.                                           MLTGRD1A.542   
C*----------------------------------------------------------------------   MLTGRD1A.543   
                                                                           MLTGRD1A.544   
CL----------------------------------------------------------------------   MLTGRD1A.545   
CL    SECTION 1. CALCULATE LEFT-HAND-SIDE OF P.D.E.                        MLTGRD1A.546   
CL----------------------------------------------------------------------   MLTGRD1A.547   
                                                                           MLTGRD1A.548   
CL    LOOP OVER LEVELS.                                                    MLTGRD1A.549   
                                                                           MLTGRD1A.550   
      DO K = 1,K_DIM                                                       MLTGRD1A.551   
                                                                           MLTGRD1A.552   
        DO J=1,J_DIM                                                       MLTGRD1A.553   
          DO I=1,I_DIM                                                     MLTGRD1A.554   
            LHS(I,J,K) = - Q(I,J,K)*G(I,J,K)                               MLTGRD1A.555   
          END DO                                                           MLTGRD1A.556   
        END DO                                                             MLTGRD1A.557   
                                                                           MLTGRD1A.558   
C ----------------------------------------------------------------------   MLTGRD1A.559   
CL    SECTION 1.1 CALCULATE I-DIRECTION DERIVATIVES.                       MLTGRD1A.560   
C ----------------------------------------------------------------------   MLTGRD1A.561   
                                                                           MLTGRD1A.562   
        IF (I_NT) THEN                                                     MLTGRD1A.563   
          SCALAR = EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*              MLTGRD1A.564   
     &             LONGITUDE_STEP_INVERSE*LONGITUDE_STEP_INVERSE           MLTGRD1A.565   
          SCALARS= EARTH_RADIUS_INVERSE*LONGITUDE_STEP_INVERSE             MLTGRD1A.566   
          IF(VERSION.LT.3) THEN                                            MLTGRD1A.567   
C I DIRECTION DERIVATIVES ARE MEANINGLESS AT THE BOUNDARIES.               MLTGRD1A.568   
            JB = 2                                                         MLTGRD1A.569   
            JE = J_DIM-1                                                   MLTGRD1A.570   
          ELSE                                                             MLTGRD1A.571   
            JB = 1                                                         MLTGRD1A.572   
            JE = J_DIM                                                     MLTGRD1A.573   
          END IF                                                           MLTGRD1A.574   
          DO J = JB,JE                                                     MLTGRD1A.575   
            DO I= 2,I_DIM-1                                                MLTGRD1A.576   
              LHS(I,J,K)= LHS(I,J,K) +                                     MLTGRD1A.577   
     &                   (Q(I-1,J,K)*A(I-1,J,K)- Q(I,J,K) * (A(I-1,J,K)    MLTGRD1A.578   
     &                   +A(I,J,K)) + Q(I+1,J,K)*A(I,J,K))                 MLTGRD1A.579   
     &                   *SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)          MLTGRD1A.580   
     &                   *SCALAR                                           MLTGRD1A.581   
     &                   + .5*DEF(I,J,K)*SCALARS*SEC_P_LATITUDE(I,J)*      MLTGRD1A.582   
     &                   (D(I,J,K)*(Q(I+1,J,K)-Q(I,J,K))+D(I-1,J,K)*       MLTGRD1A.583   
     &                   (Q(I,J,K)-Q(I-1,J,K)))                            MLTGRD1A.584   
            END DO                                                         MLTGRD1A.585   
C END POINTS ON EACH ROW.                                                  MLTGRD1A.586   
            IF (VERSION.LT.3) THEN                                         MLTGRD1A.587   
              LHS(1,J,K) = LHS(1,J,K) +                                    MLTGRD1A.588   
     &                    (Q(I_DIM,J,K)*A(I_DIM,J,K) - Q(1,J,K) *          MLTGRD1A.589   
     &                 (A(I_DIM,J,K) + A(1,J,K)) + Q(2,J,K)*A(1,J,K))      MLTGRD1A.590   
     &                   *SEC_P_LATITUDE(1,J)*SEC_P_LATITUDE(1,J)          MLTGRD1A.591   
     &                   *SCALAR                                           MLTGRD1A.592   
     &                     + .5*DEF(1,J,K)*SCALARS*SEC_P_LATITUDE(1,J)*    MLTGRD1A.593   
     &                     (D(1,J,K)*(Q(2,J,K)-Q(1,J,K))+D(I_DIM,J,K)*     MLTGRD1A.594   
     &                      (Q(1,J,K)-Q(I_DIM,J,K)))                       MLTGRD1A.595   
              LHS(I_DIM,J,K)=LHS(I_DIM,J,K) +                              MLTGRD1A.596   
     &                       (Q(I_DIM-1,J,K)*A(I_DIM-1,J,K)-Q(I_DIM,J,K)   MLTGRD1A.597   
     &                    *(A(I_DIM-1,J,K) + A(I_DIM,J,K)) + Q(1,J,K)      MLTGRD1A.598   
     &                    *A(I_DIM,J,K))*SEC_P_LATITUDE(I_DIM,J)           MLTGRD1A.599   
     &                    *SEC_P_LATITUDE(I_DIM,J)*SCALAR                  MLTGRD1A.600   
     &             + .5*DEF(I_DIM,J,K)*SCALARS*SEC_P_LATITUDE(I_DIM,J)*    MLTGRD1A.601   
     &            (D(I_DIM,J,K)*(Q(1,J,K)-Q(I_DIM,J,K))+D(I_DIM-1,J,K)*    MLTGRD1A.602   
     &             (Q(I_DIM,J,K)-Q(I_DIM-1,J,K)))                          MLTGRD1A.603   
            ELSE                                                           MLTGRD1A.604   
              LHS(1,J,K) = LHS(1,J,K)                                      MLTGRD1A.605   
     &                     +2.*( Q(2,J,K) - Q(1,J,K)) * A(1,J,K)           MLTGRD1A.606   
     &                     *SEC_P_LATITUDE(1,J)*SEC_P_LATITUDE(1,J)        MLTGRD1A.607   
     &                     *SCALAR                                         MLTGRD1A.608   
              LHS(I_DIM,J,K) = LHS(I_DIM,J,K)                              MLTGRD1A.609   
     &                       + 2.*(Q(I_DIM-1,J,K) - Q(I_DIM,J,K))          MLTGRD1A.610   
     &                    * A(I_DIM-1,J,K)*SEC_P_LATITUDE(I_DIM,J)         MLTGRD1A.611   
     &                    *SEC_P_LATITUDE(I_DIM,J)*SCALAR                  MLTGRD1A.612   
            END IF                                                         MLTGRD1A.613   
          END DO                                                           MLTGRD1A.614   
        END IF                                                             MLTGRD1A.615   
                                                                           MLTGRD1A.616   
C ----------------------------------------------------------------------   MLTGRD1A.617   
CL    SECTION 1.2 CALCULATE J-DIRECTION DERIVATIVES.                       MLTGRD1A.618   
CL                ADD IN NON-DERIVATIVE TERMS AT POLES.                    MLTGRD1A.619   
C ----------------------------------------------------------------------   MLTGRD1A.620   
                                                                           MLTGRD1A.621   
        IF (J_NT) THEN                                                     MLTGRD1A.622   
          SCALAR = EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*              MLTGRD1A.623   
     &             LATITUDE_STEP_INVERSE*LATITUDE_STEP_INVERSE             MLTGRD1A.624   
          SCALARS= EARTH_RADIUS_INVERSE*LATITUDE_STEP_INVERSE              MLTGRD1A.625   
          DO J = 2,J_DIM-1                                                 MLTGRD1A.626   
            DO I= 1,I_DIM                                                  MLTGRD1A.627   
              LHS(I,J,K) = LHS(I,J,K) +                                    MLTGRD1A.628   
     &                     ((Q(I,J-1,K)-Q(I,J,K))                          MLTGRD1A.629   
     &                      *B(I,J-1,K)*COS_V_LATITUDE(I,J-1)              MLTGRD1A.630   
     &                      -(Q(I,J,K)-Q(I,J+1,K))                         MLTGRD1A.631   
     &                      *B(I,J,K)*COS_V_LATITUDE(I,J))                 MLTGRD1A.632   
     &                      *SEC_P_LATITUDE(I,J)*SCALAR                    MLTGRD1A.633   
     &                     +DEF(I,J,K)*.5*SCALARS*                         MLTGRD1A.634   
     &                     (E(I,J-1,K)*(Q(I,J-1,K)-Q(I,J,K))+              MLTGRD1A.635   
     &                      E(I,J,K)*(Q(I,J,K)-Q(I,J+1,K)))                MLTGRD1A.636   
            END DO                                                         MLTGRD1A.637   
          END DO                                                           MLTGRD1A.638   
                                                                           MLTGRD1A.639   
C ----------------------------------------------------------------------   MLTGRD1A.640   
CL    SECTION 1.2.1 BOUNDARY TERMS IN J-DIRECTION.                         MLTGRD1A.641   
C ----------------------------------------------------------------------   MLTGRD1A.642   
                                                                           MLTGRD1A.643   
          IF (VERSION.LT.3.AND.J_NT) THEN                                  MLTGRD1A.644   
CL    GLOBAL VERSION SO CALCULATE VALUE AT POLES.                          MLTGRD1A.645   
CL    NORTH POLE                                                           MLTGRD1A.646   
                                                                           MLTGRD1A.647   
            I2 = I_DIM/2                                                   MLTGRD1A.648   
                                                                           MLTGRD1A.649   
C SUM ALL TERMS AT POLE.                                                   MLTGRD1A.650   
            DO I= 1,I_DIM/2                                                MLTGRD1A.651   
              LHS(1,1,K) = LHS(1,1,K) +                                    MLTGRD1A.652   
     &                   ((Q(I,2,K)-Q(I,1,K))                              MLTGRD1A.653   
     &                    *B(I,1,K)*COS_V_LATITUDE(I,1)                    MLTGRD1A.654   
     &                   -(Q(I+I2,1,K)-Q(I+I2,2,K))                        MLTGRD1A.655   
     &                    *B(I+I2,1,K)*COS_V_LATITUDE(I+I2,1))             MLTGRD1A.656   
     &                    *SEC_P_LATITUDE(I,1)*SCALAR                      MLTGRD1A.657   
     &                    +DEF(1,1,K)*SCALARS*                             MLTGRD1A.658   
     &                    (E(I,1,K)*(Q(I,1,K)-Q(I,2,K))+                   MLTGRD1A.659   
     &                     E(I+I2,1,K)*(Q(I+I2,1,K)-Q(I+I2,2,K)))          MLTGRD1A.660   
            END DO                                                         MLTGRD1A.661   
                                                                           MLTGRD1A.662   
CL    SOUTH POLE                                                           MLTGRD1A.663   
                                                                           MLTGRD1A.664   
C SUM ALL TERMS AT POLE.                                                   MLTGRD1A.665   
            DO I= 1,I_DIM/2                                                MLTGRD1A.666   
              LHS(1,J_DIM,K) = LHS(1,J_DIM,K) +                            MLTGRD1A.667   
     &                       ((Q(I,J_DIM-1,K)-Q(I,J_DIM,K))                MLTGRD1A.668   
     &                        *B(I,J_DIM-1,K)*                             MLTGRD1A.669   
     &                        COS_V_LATITUDE(I,J_DIM-1)                    MLTGRD1A.670   
     &                        -(Q(I+I2,J_DIM,K)-Q(I+I2,J_DIM-1,K))         MLTGRD1A.671   
     &                        *B(I+I2,J_DIM-1,K)*                          MLTGRD1A.672   
     &                        COS_V_LATITUDE(I+I2,J_DIM-1))                MLTGRD1A.673   
     &                        *SEC_P_LATITUDE(I,J_DIM)*SCALAR              MLTGRD1A.674   
     &                    +DEF(1,J_DIM,K)*SCALARS*                         MLTGRD1A.675   
     &                (E(I,J_DIM-1,K)*(Q(I,J_DIM-1,K)-Q(I,J_DIM,K))+       MLTGRD1A.676   
     &                     E(I+I2,J_DIM-1,K)*(Q(I+I2,J_DIM-1,K)            MLTGRD1A.677   
     &                            -Q(I2+I,J_DIM,K)))                       MLTGRD1A.678   
            END DO                                                         MLTGRD1A.679   
                                                                           MLTGRD1A.680   
C SET ALL POLAR VALUES TO BE THE SAME                                      MLTGRD1A.681   
C NOTE VALUES NEED AVERAGING, THIS IS DONE AFTER VERTICAL TERM CODE.       MLTGRD1A.682   
            DO I= 2,I_DIM                                                  MLTGRD1A.683   
              LHS(I,1,K) = LHS(1,1,K)                                      MLTGRD1A.684   
              LHS(I,J_DIM,K) = LHS(1,J_DIM,K)                              MLTGRD1A.685   
            END DO                                                         MLTGRD1A.686   
                                                                           MLTGRD1A.687   
          ELSE                                                             MLTGRD1A.688   
CL LIMITED AREA CODE, INCLUDE BOUNDARY DERIVATIVES.                        MLTGRD1A.689   
            SCALAR = EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*            MLTGRD1A.690   
     &               LATITUDE_STEP_INVERSE*LATITUDE_STEP_INVERSE           MLTGRD1A.691   
            J = J_DIM                                                      MLTGRD1A.692   
            DO I= 1,I_DIM                                                  MLTGRD1A.693   
              LHS(I,1,K) = LHS(I,1,K) - 2.*(Q(I,1,K)-Q(I,2,K))             MLTGRD1A.694   
     &                      *B(I,1,K)*COS_V_LATITUDE(I,1)                  MLTGRD1A.695   
     &                      *SEC_P_LATITUDE(I,1)*SCALAR                    MLTGRD1A.696   
              LHS(I,J,K) = LHS(I,J,K) + 2.*(Q(I,J-1,K)-Q(I,J,K))           MLTGRD1A.697   
     &                    *B(I,J-1,K)*COS_V_LATITUDE(I,J-1)                MLTGRD1A.698   
     &                    *SEC_P_LATITUDE(I,J)*SCALAR                      MLTGRD1A.699   
            END DO                                                         MLTGRD1A.700   
                                                                           MLTGRD1A.701   
          END IF                                                           MLTGRD1A.702   
                                                                           MLTGRD1A.703   
        END IF                                                             MLTGRD1A.704   
                                                                           MLTGRD1A.705   
C ----------------------------------------------------------------------   MLTGRD1A.706   
CL    SECTION 1.3 CALCULATE K-DIRECTION DERIVATIVES.                       MLTGRD1A.707   
C ----------------------------------------------------------------------   MLTGRD1A.708   
                                                                           MLTGRD1A.709   
        IF (K_NT) THEN                                                     MLTGRD1A.710   
          IF(K.EQ.1) THEN                                                  MLTGRD1A.711   
            SCALAR = 1./(Z_MID(K) - Z_MID(K-1))                            MLTGRD1A.712   
            SCALAR1 = 1./(Z_Q(K+1) - Z_Q(K))                               MLTGRD1A.713   
            DO J=1,J_DIM                                                   MLTGRD1A.714   
              DO I=1,I_DIM                                                 MLTGRD1A.715   
                LHS(I,J,K) = LHS(I,J,K) + SCALAR*                          MLTGRD1A.716   
     &                     (Q(I,J,K+1)*C2(I,J,K+1)                         MLTGRD1A.717   
     &                    -Q(I,J,K)*C2(I,J,K))*C1(I,J,K)*SCALAR1           MLTGRD1A.718   
                IF(Z_Q(1).NE.Z_MID(1)) THEN                                MLTGRD1A.719   
C INCLUDE FIRST DERIVATIVE TERM WHEN NON-ZERO                              MLTGRD1A.720   
                  LHS(I,J,K) = LHS(I,J,K) + .5*SCALAR1*DEF(I,J,K)*         MLTGRD1A.721   
     &                            F(I,J,K)*(Q(I,J,K+1)*C2(I,J,K+1)         MLTGRD1A.722   
     &                                      -Q(I,J,K)*C2(I,J,K))           MLTGRD1A.723   
                END IF                                                     MLTGRD1A.724   
              END DO                                                       MLTGRD1A.725   
            END DO                                                         MLTGRD1A.726   
          ELSE IF (K.EQ.K_DIM) THEN                                        MLTGRD1A.727   
            SCALAR = 1./(Z_MID(K) - Z_MID(K-1))                            MLTGRD1A.728   
            SCALAR2 = 1./(Z_Q(K) - Z_Q(K-1))                               MLTGRD1A.729   
            DO J=1,J_DIM                                                   MLTGRD1A.730   
              DO I=1,I_DIM                                                 MLTGRD1A.731   
                LHS(I,J,K) = LHS(I,J,K) - SCALAR*                          MLTGRD1A.732   
     &                      (Q(I,J,K)*C2(I,J,K)                            MLTGRD1A.733   
     &                 -Q(I,J,K-1)*C2(I,J,K-1))*C1(I,J,K-1)*SCALAR2        MLTGRD1A.734   
                IF(Z_Q(K_DIM).NE.Z_MID(K_DIM+1)) THEN                      MLTGRD1A.735   
C INCLUDE FIRST DERIVATIVE TERM WHEN NON-ZERO                              MLTGRD1A.736   
                  LHS(I,J,K) = LHS(I,J,K)  + .5*SCALAR2*DEF(I,J,K)*        MLTGRD1A.737   
     &                            F(I,J,K-1)*(Q(I,J,K)*C2(I,J,K)           MLTGRD1A.738   
     &                                      -Q(I,J,K-1)*C2(I,J,K-1))       MLTGRD1A.739   
                END IF                                                     MLTGRD1A.740   
              END DO                                                       MLTGRD1A.741   
            END DO                                                         MLTGRD1A.742   
          ELSE                                                             MLTGRD1A.743   
            SCALAR = 1./(Z_MID(K) - Z_MID(K-1))                            MLTGRD1A.744   
            SCALAR1 = 1./(Z_Q(K+1) - Z_Q(K))                               MLTGRD1A.745   
            SCALAR2 = 1./(Z_Q(K) - Z_Q(K-1))                               MLTGRD1A.746   
            DO J=1,J_DIM                                                   MLTGRD1A.747   
              DO I=1,I_DIM                                                 MLTGRD1A.748   
                LHS(I,J,K) = LHS(I,J,K) + SCALAR*                          MLTGRD1A.749   
     &               ((Q(I,J,K+1)*C2(I,J,K+1)-Q(I,J,K)*C2(I,J,K))          MLTGRD1A.750   
     &                *C1(I,J,K)*SCALAR1                                   MLTGRD1A.751   
     &               -(Q(I,J,K)*C2(I,J,K)-Q(I,J,K-1)*C2(I,J,K-1))          MLTGRD1A.752   
     &                *C1(I,J,K-1)*SCALAR2)                                MLTGRD1A.753   
     &               +.5*DEF(I,J,K)*                                       MLTGRD1A.754   
     &               (F(I,J,K)*SCALAR1*                                    MLTGRD1A.755   
     &                (Q(I,J,K+1)*C2(I,J,K+1)-Q(I,J,K)*C2(I,J,K))          MLTGRD1A.756   
     &               +(Q(I,J,K)*C2(I,J,K)-Q(I,J,K-1)*C2(I,J,K-1))          MLTGRD1A.757   
     &                *F(I,J,K-1)*SCALAR2)                                 MLTGRD1A.758   
              END DO                                                       MLTGRD1A.759   
            END DO                                                         MLTGRD1A.760   
          END IF                                                           MLTGRD1A.761   
        END IF                                                             MLTGRD1A.762   
                                                                           MLTGRD1A.763   
C ----------------------------------------------------------------------   MLTGRD1A.764   
CL    SECTION 1.4 AVERAGE GLOBAL POLAR VALUES.                             MLTGRD1A.765   
C ----------------------------------------------------------------------   MLTGRD1A.766   
                                                                           MLTGRD1A.767   
        IF (VERSION.LT.3.AND.J_NT) THEN                                    MLTGRD1A.768   
          DO I=1,I_DIM                                                     MLTGRD1A.769   
            LHS(I,1,K) = LHS(I,1,K) / I_DIM                                MLTGRD1A.770   
            LHS(I,J_DIM,K) = LHS(I,J_DIM,K) / I_DIM                        MLTGRD1A.771   
          END DO                                                           MLTGRD1A.772   
        END IF                                                             MLTGRD1A.773   
                                                                           MLTGRD1A.774   
CL    END LOOP OVER LEVELS.                                                MLTGRD1A.775   
      END DO                                                               MLTGRD1A.776   
                                                                           MLTGRD1A.777   
CL    END OF ROUTINE MG_LEFT_HAND_SIDE                                     MLTGRD1A.778   
                                                                           MLTGRD1A.779   
      RETURN                                                               MLTGRD1A.780   
      END                                                                  MLTGRD1A.781   
CLL   SUBROUTINE MG_CNTL                                                   MLTGRD1A.782   
CLL                                                                        MLTGRD1A.783   
CLL   PURPOSE:                                                             MLTGRD1A.784   
CLL   -------                                                              MLTGRD1A.785   
CLL   top level multi-grid control routine to solve 1 p.d.e. in 1,2 or 3   MLTGRD1A.786   
CLL   dimensions on a choice of domains.                                   MLTGRD1A.787   
CLL                                                                        MLTGRD1A.788   
CLL   d ( A dQ ) + d ( B dQ ) + C1 d ( C2 dQ )                             MLTGRD1A.789   
CLL   --    --     --    --        --     --                               MLTGRD1A.790   
CLL   dx    dx     dy    dy        dz     dz                               MLTGRD1A.791   
CLL                                                                        MLTGRD1A.792   
CLL   + DEF (  D dQ + E dQ + F dQ )  - G Q = RHS                           MLTGRD1A.793   
CLL              --     --     --                                          MLTGRD1A.794   
CLL              dx     dy     dz                                          MLTGRD1A.795   
CLL                                                                        MLTGRD1A.796   
CLL   but with (x,y) replaced by spherical polars                          MLTGRD1A.797   
CLL                                                                        MLTGRD1A.798   
CLL   See Variable VERSION for currently implemented domain options.       MLTGRD1A.799   
CLL                                                                        MLTGRD1A.800   
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.801   
CLL                                                                        MLTGRD1A.802   
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.803   
CLL VERSION  DATE                                                          MLTGRD1A.804   
CLL   3.3             WRITTEN BY M. H. MAWSON.                             MLTGRD1A.805   
CLL                                                                        MLTGRD1A.806   
CLL                                                                        MLTGRD1A.807   
CLL   Documentation: FR SOFTWARE DOCUMENTATION                             MLTGRD1A.808   
CLL                  Multigrid Methods for Elliptic Equations.             MLTGRD1A.809   
CLL                  Version 2. December 1993.                             MLTGRD1A.810   
CLL                  Mark H. Mawson.                                       MLTGRD1A.811   
CLL                                                                        MLTGRD1A.812   
CLLEND -----------------------------------------------------------------   MLTGRD1A.813   
                                                                           MLTGRD1A.814   
C*L ARGUMENT LIST.                                                         MLTGRD1A.815   
                                                                           MLTGRD1A.816   
      SUBROUTINE MG_CNTL(MXNGRDS,I_LENGTH,J_LENGTH,K_LENGTH,               MLTGRD1A.817   
     &                   MAXITS,TOL_RES,IPRINT,                            MLTGRD1A.818   
     &                   KSMOOTH,NPRE,NPOST,NCOARSE,W,                     MLTGRD1A.819   
     &                   KREST,NCGC,A,B,C1,C2,DEF,D,E,F,G,Q,RHS,           MLTGRD1A.820   
     &                   COS_P_LATITUDE,SEC_P_LATITUDE,                    MLTGRD1A.821   
     &                   COS_V_LATITUDE,EARTH_RADIUS_INVERSE,              MLTGRD1A.822   
     &                   LONGITUDE_STEP_INVERSE,LATITUDE_STEP_INVERSE,     MLTGRD1A.823   
     &                   WORST_SMOOTHING_RATE,VERSION,K_BC,Z_Q,Z_MID)      MLTGRD1A.824   
                                                                           MLTGRD1A.825   
      IMPLICIT NONE                                                        MLTGRD1A.826   
                                                                           MLTGRD1A.827   
      INTEGER                                                              MLTGRD1A.828   
     &  VERSION    !IN  1 - Global                                         MLTGRD1A.829   
     &             !    2 - Global with equatorial solution prescribed     MLTGRD1A.830   
     &             !    3 - Limited Area, Neumann B.C`s in x and y.        MLTGRD1A.831   
     &             !    4 - Limited Area, Dirichlet B.C`s in x and y.      MLTGRD1A.832   
     &, K_BC       !IN  Code for Boundary condition in K direction.        MLTGRD1A.833   
     &             !    1 - Neumann Boundary condition bottom & top.       MLTGRD1A.834   
     &             !    2 - Neumann condition bottom, Dirichlet top.       MLTGRD1A.835   
     &             !    3 - Dirichlet condition bottom, Neumann top.       MLTGRD1A.836   
     &             !    4 - Dirichlet condition bottom & top.              MLTGRD1A.837   
                                                                           MLTGRD1A.838   
      INTEGER                                                              MLTGRD1A.839   
     &  MXNGRDS    !IN. MAXIMUM NUMBER OF GRIDS ALLOWED.                   MLTGRD1A.840   
     &, I_LENGTH   !IN. NUMBER OF POINTS IN I DIRECTION.                   MLTGRD1A.841   
     &, J_LENGTH   !IN. NUMBER OF POINTS IN J DIRECTION.                   MLTGRD1A.842   
     &, K_LENGTH   !IN. NUMBER OF POINTS IN K DIRECTION.                   MLTGRD1A.843   
     &, MAXITS     !IN. MAX NO OF FAS ITERATIONS WITHOUT CONVERGENCE       MLTGRD1A.844   
     &, IPRINT     !IN. PARAMETER CONTROLLING QUANTITY OF OUTPUT:          MLTGRD1A.845   
     &             !    0 - NONE                                           MLTGRD1A.846   
     &             !    1 - NUMBER OF ITERATIONS REQUIRED AND TIME TAKEN   MLTGRD1A.847   
     &             !    2 - & CONVERGENCE HISTORY                          MLTGRD1A.848   
     &             !    3 - & JOB DESCRIPTION                              MLTGRD1A.849   
                                                                           MLTGRD1A.850   
      INTEGER                                                              MLTGRD1A.851   
     & KSMOOTH  !IN. KIND OF ITERATIVE METHOD USED AS A SMOOTHER:          MLTGRD1A.852   
     &          !    1 - I-LINE JACOBI                                     MLTGRD1A.853   
     &          !    2 - J-LINE JACOBI                                     MLTGRD1A.854   
     &          !    3 - K-LINE JACOBI                                     MLTGRD1A.855   
     &          !    4 - I&J-LINE JACOBI                                   MLTGRD1A.856   
     &          !    5 - I&K LINE JACOBI                                   MLTGRD1A.857   
     &          !    6 - J&K-LINE JACOBI                                   MLTGRD1A.858   
     &          !    7 - 3D ALTERNATING LINE JACOBI                        MLTGRD1A.859   
     &          !    8 - I-LINE GAUSS-SEIDEL                               MLTGRD1A.860   
     &          !    9 - J-LINE GAUSS-SEIDEL                               MLTGRD1A.861   
     &          !   10 - K-LINE GAUSS-SEIDEL                               MLTGRD1A.862   
     &          !   11 - I&J-LINE GAUSS-SEIDEL                             MLTGRD1A.863   
     &          !   12 - I&K-LINE GAUSS-SEIDEL                             MLTGRD1A.864   
     &          !   13 - J&K-LINE GAUSS-SEIDEL                             MLTGRD1A.865   
     &          !   14 - 3D ALTERNATING LINE GAUSS-SEIDEL                  MLTGRD1A.866   
     &          !   15 - 3D ALTERNATING SYMMETRIC LINE GAUSS-SEIDEL        MLTGRD1A.867   
     &          !   16 - I-LINE ZEBRA                                      MLTGRD1A.868   
     &          !   17 - J-LINE ZEBRA                                      MLTGRD1A.869   
     &          !   18 - K-LINE ZEBRA                                      MLTGRD1A.870   
     &          !   19 - I&J-LINE ZEBRA                                    MLTGRD1A.871   
     &          !   20 - I&K-LINE ZEBRA                                    MLTGRD1A.872   
     &          !   21 - J&K-LINE ZEBRA                                    MLTGRD1A.873   
     &          !   22 - 3D ALTERNATING LINE ZEBRA                         MLTGRD1A.874   
     &          !   23 - JACOBI POINT SMOOTHER                             MLTGRD1A.875   
     &          !   24 - GAUSS-SEIDEL POINT SMOOTHER                       MLTGRD1A.876   
     &          !   25 - SYMMETRIC GAUSS-SEIDEL POINT SMOOTHER             MLTGRD1A.877   
     &          !   26 - RED-BLACK POINT SMOOTHER                          MLTGRD1A.878   
                                                                           MLTGRD1A.879   
      INTEGER                                                              MLTGRD1A.880   
     &  NPRE       !IN. NO OF PRE-SMOOTHING SWEEPS                         MLTGRD1A.881   
     &, NPOST      !IN. NO OF POST-SMOOTHING SWEEPS                        MLTGRD1A.882   
     &, NCOARSE    !IN. NO OF ITERATIONS OF SMOOTHER ON COARSEST MESH      MLTGRD1A.883   
     &, KREST      !IN. KIND OF RESTRICTION USED:                          MLTGRD1A.884   
     &             !     1     - INJECTION                                 MLTGRD1A.885   
     &             !     2     - HALF-INJECTION                            MLTGRD1A.886   
     &             !     3     - FULL-WEIGHTING                            MLTGRD1A.887   
     &, NCGC       !IN. NO OF COARSE GRID CORRECTIONS:                     MLTGRD1A.888   
     &             !    1     - V-CYCLES                                   MLTGRD1A.889   
     &             !    2     - W-CYCLES                                   MLTGRD1A.890   
     &             !    >2    - FULL MG-CYCLES                             MLTGRD1A.891   
                                                                           MLTGRD1A.892   
      REAL                                                                 MLTGRD1A.893   
     &  EARTH_RADIUS_INVERSE    !IN.                                       MLTGRD1A.894   
     &, LONGITUDE_STEP_INVERSE  !IN.                                       MLTGRD1A.895   
     &, LATITUDE_STEP_INVERSE   !IN.                                       MLTGRD1A.896   
     &, W                       !IN. RELAXATION PARAMETER FOR EACH         MLTGRD1A.897   
     &                          !    VARIABLE IN SYSTEM.                   MLTGRD1A.898   
     &, TOL_RES                 !IN. TOLERANCE FOR RESIDUAL NORM           MLTGRD1A.899   
     &                          !    RELATIVE TO INITIAL RESIDUAL          MLTGRD1A.900   
     &, WORST_SMOOTHING_RATE    !IN. WORST PRACTICAL SMOOTHING RATE        MLTGRD1A.901   
     &                          !    ACCEPTABLE BEFORE CONVERGENCE         MLTGRD1A.902   
     &                          !    OR MAXIMUM ITERATIONS REACHED.        MLTGRD1A.903   
                                                                           MLTGRD1A.904   
      REAL                                                                 MLTGRD1A.905   
     &  A(I_LENGTH,J_LENGTH,K_LENGTH) !IN. COEFFICIENT                     MLTGRD1A.906   
     &, B(I_LENGTH,J_LENGTH,K_LENGTH) !IN. COEFFICIENT                     MLTGRD1A.907   
     &, C1(I_LENGTH,J_LENGTH,K_LENGTH) !IN. COEFFICIENT                    MLTGRD1A.908   
     &, C2(I_LENGTH,J_LENGTH,K_LENGTH) !IN. COEFFICIENT                    MLTGRD1A.909   
     &, DEF(I_LENGTH,J_LENGTH,K_LENGTH) !IN. COEFFICIENT                   MLTGRD1A.910   
     &, D(I_LENGTH,J_LENGTH,K_LENGTH) !IN. COEFFICIENT                     MLTGRD1A.911   
     &, E(I_LENGTH,J_LENGTH,K_LENGTH) !IN. COEFFICIENT                     MLTGRD1A.912   
     &, F(I_LENGTH,J_LENGTH,K_LENGTH) !IN. COEFFICIENT                     MLTGRD1A.913   
     &, G(I_LENGTH,J_LENGTH,K_LENGTH) !IN. COEFFICIENT                     MLTGRD1A.914   
     &, RHS(I_LENGTH,J_LENGTH,K_LENGTH)                                    MLTGRD1A.915   
     &                          !IN. RIGHT-HAND-SIDE OF EQUATION.          MLTGRD1A.916   
     &, COS_P_LATITUDE(I_LENGTH,J_LENGTH)                                  MLTGRD1A.917   
     &                           !IN. COSINE OF LATITUDE AT Q POINTS.      MLTGRD1A.918   
     &, SEC_P_LATITUDE(I_LENGTH,J_LENGTH)                                  MLTGRD1A.919   
     &                           !IN. 1./COSINE OF LATITUDE AT Q POINTS.   MLTGRD1A.920   
     &, COS_V_LATITUDE(I_LENGTH,J_LENGTH)                                  MLTGRD1A.921   
     &                          !IN. COSINE OF LATITUDE AT B POINTS.       MLTGRD1A.922   
     &, Z_Q(K_LENGTH)           !IN. VALUE OF Z AT Q POINTS                MLTGRD1A.923   
     &, Z_MID(K_LENGTH+1)       !IN. VALUE OF Z AT MID POINTS DEFINED      MLTGRD1A.924   
     &                          !    BETWEEN Q POINTS IN VERTICAL          MLTGRD1A.925   
     &                          !    FIRST VALUE IS BELOW FIRST Q POINT    MLTGRD1A.926   
                                                                           MLTGRD1A.927   
      REAL                                                                 MLTGRD1A.928   
     &  Q(I_LENGTH,J_LENGTH,K_LENGTH)    !INOUT. SOLUTION.                 MLTGRD1A.929   
                                                                           MLTGRD1A.930   
C*----------------------------------------------------------------------   MLTGRD1A.931   
                                                                           MLTGRD1A.932   
C*L   11  LOCAL WORK ARRAYS REQUIRED.                                      MLTGRD1A.933   
                                                                           MLTGRD1A.934   
      INTEGER                                                              MLTGRD1A.935   
     &  NNODES(3)     ! NUMBER OF POINTS IN EACH DIMENSION.                MLTGRD1A.936   
     &, IMAX(MXNGRDS) ! NUMBER OF NODES IN THE I-DIRECTION                 MLTGRD1A.937   
     &                ! ON EACH GRID.                                      MLTGRD1A.938   
     &, JMAX(MXNGRDS) ! NUMBER OF NODES IN THE J-DIRECTION                 MLTGRD1A.939   
     &                ! ON EACH GRID.                                      MLTGRD1A.940   
     &, KMAX(MXNGRDS) ! NUMBER OF NODES IN THE K-DIRECTION                 MLTGRD1A.941   
     &                ! ON EACH GRID.                                      MLTGRD1A.942   
     &, START_ADDRESS(MXNGRDS) ! START ADDRESS IN DATA ARRAY FOR           MLTGRD1A.943   
     &                         ! EACH GRID.                                MLTGRD1A.944   
     &, START_ADDRESS_2D(MXNGRDS) ! START ADDRESS IN DATA ARRAY FOR        MLTGRD1A.945   
     &                         ! EACH 2-D GRID.                            MLTGRD1A.946   
     &, START_ADDRESS_Z(MXNGRDS) ! START ADDRESS IN DATA ARRAY FOR         MLTGRD1A.947   
     &                         ! THE ARRAYS HOLDING Z VALUES               MLTGRD1A.948   
     &, RES_DIRS(MXNGRDS) ! DIRECTIONS IN WHICH RESTRICTION CAN BE         MLTGRD1A.949   
     &                    ! APPLIED.                                       MLTGRD1A.950   
                                                                           MLTGRD1A.951   
      REAL                                                                 MLTGRD1A.952   
     &  LATITUDE_STEP_GRIDS(MXNGRDS) ! LATITUDE STEP INVERSE ON EACH       MLTGRD1A.953   
     &                               ! GRID.                               MLTGRD1A.954   
     &, LONGITUDE_STEP_GRIDS(MXNGRDS) ! LONGITUDE STEP INVERSE ON EACH     MLTGRD1A.955   
     &                               ! GRID.                               MLTGRD1A.956   
                                                                           MLTGRD1A.957   
                                                                           MLTGRD1A.958   
C*----------------------------------------------------------------------   MLTGRD1A.959   
C LOCAL VARIABLES.                                                         MLTGRD1A.960   
                                                                           MLTGRD1A.961   
      INTEGER                                                              MLTGRD1A.962   
     &  NGRIDS        ! THE TOTAL NUMBER OF GRIDS IN THE SEQUENCE          MLTGRD1A.963   
     &, NDIM          !IN. NUMBER OF DIMENSIONS                            MLTGRD1A.964   
     &, LAST_ADDRESS  ! LAST ADDRESS OF DATA ARRAY NEEDED. USED TO         MLTGRD1A.965   
     &                ! DIMENSION SPACE REQUIRED.                          MLTGRD1A.966   
     &, NFB       ! NUMBER OF FORWARD / BACKWARD SWEEPS OF GRID NEEDED     MLTGRD1A.967   
     &, IPAT      ! AN INTEGER USED TO DISTINGUISH RED AND BLACK POINTS    MLTGRD1A.968   
     &, LAST_ADDRESS_2D ! LAST ADDRESS OF 2-D DATA ARRAY NEEDED. USED TO   MLTGRD1A.969   
     &                ! DIMENSION SPACE REQUIRED.                          MLTGRD1A.970   
     &, LAST_ADDRESS_Z ! LAST ADDRESS OF Z DATA ARRAY NEEDED. USED TO      MLTGRD1A.971   
     &                ! DIMENSION SPACE REQUIRED.                          MLTGRD1A.972   
                                                                           MLTGRD1A.973   
      LOGICAL                                                              MLTGRD1A.974   
     &  JAC     ! .TRUE. FOR JACOBI METHODS                                MLTGRD1A.975   
     &, PAT     ! .TRUE. FOR PATTERN SCHEMES                               MLTGRD1A.976   
     &, SYM     ! .TRUE. FOR SYMMETRIC SCHEMES                             MLTGRD1A.977   
     &, ILINE   ! .TRUE. FOR I-LINE METHODS AND ALTERNATING SCHEMES        MLTGRD1A.978   
     &, JLINE   ! .TRUE. FOR J-LINE METHODS AND ALTERNATING SCHEMES        MLTGRD1A.979   
     &, KLINE   ! .TRUE. FOR K-LINE METHODS AND ALTERNATING SCHEMES        MLTGRD1A.980   
     &, I_NT    ! .TRUE. If a non-trivial > 1 number of points in I        MLTGRD1A.981   
     &          !        direction.                                        MLTGRD1A.982   
     &, J_NT    ! .TRUE. If a non-trivial > 1 number of points in J        MLTGRD1A.983   
     &          !        direction.                                        MLTGRD1A.984   
     &, K_NT    ! .TRUE. If a non-trivial > 1 number of points in K        MLTGRD1A.985   
     &          !        direction.                                        MLTGRD1A.986   
                                                                           MLTGRD1A.987   
      REAL                                                                 MLTGRD1A.988   
     &  SWJAC   ! A SWITCH WHICH IS ZERO FOR JACOBI METHODS                MLTGRD1A.989   
     &, SWSYM   ! A SWITCH WHICH IS ZERO FOR SYMMETRIC METHODS             MLTGRD1A.990   
                                                                           MLTGRD1A.991   
      INTEGER                                                              MLTGRD1A.992   
     &  I,J,K                                                              MLTGRD1A.993   
                                                                           MLTGRD1A.994   
C*L   EXTERNAL ROUTINES CALLED.                                            MLTGRD1A.995   
      EXTERNAL MG_GRIDSEQ,MG_FDMG,MG_STYPE,MG_JOB_INFO                     MLTGRD1A.996   
                                                                           MLTGRD1A.997   
C*----------------------------------------------------------------------   MLTGRD1A.998   
                                                                           MLTGRD1A.999   
CL----------------------------------------------------------------------   MLTGRD1A.1000  
CL    SECTION 1. FIND THE NUMBER OF GRIDS WHICH MAY BE GENERATED           MLTGRD1A.1001  
CL               SET UP GRID INFORMATION AND FIND SPACE REQUIRED.          MLTGRD1A.1002  
CL----------------------------------------------------------------------   MLTGRD1A.1003  
                                                                           MLTGRD1A.1004  
      I_NT = .FALSE.                                                       MLTGRD1A.1005  
      IF (I_LENGTH.GT.1) I_NT = .TRUE.                                     MLTGRD1A.1006  
      J_NT = .FALSE.                                                       MLTGRD1A.1007  
      IF (J_LENGTH.GT.1) J_NT = .TRUE.                                     MLTGRD1A.1008  
      K_NT = .FALSE.                                                       MLTGRD1A.1009  
      IF (K_LENGTH.GT.1) K_NT = .TRUE.                                     MLTGRD1A.1010  
      IF (.NOT. K_NT) K_BC = 1                                             MLTGRD1A.1011  
                                                                           MLTGRD1A.1012  
CL    CALL MG_GRIDSEQ                                                      MLTGRD1A.1013  
                                                                           MLTGRD1A.1014  
      CALL MG_GRIDSEQ (I_NT,J_NT,K_NT,I_LENGTH,J_LENGTH,K_LENGTH,          MLTGRD1A.1015  
     &                 MXNGRDS,NGRIDS,IMAX,JMAX,KMAX,                      MLTGRD1A.1016  
     &                 START_ADDRESS,LAST_ADDRESS,                         MLTGRD1A.1017  
     &                 LONGITUDE_STEP_INVERSE,LATITUDE_STEP_INVERSE,       MLTGRD1A.1018  
     &                 LONGITUDE_STEP_GRIDS,LATITUDE_STEP_GRIDS,           MLTGRD1A.1019  
     &                 START_ADDRESS_2D,LAST_ADDRESS_2D,RES_DIRS,          MLTGRD1A.1020  
     &                 VERSION,IPRINT,START_ADDRESS_Z,LAST_ADDRESS_Z)      MLTGRD1A.1021  
                                                                           MLTGRD1A.1022  
CL----------------------------------------------------------------------   MLTGRD1A.1023  
CL    SECTION 2. SET SMOOTHING INFORMATION DEPENDENT ON CHOICE OF          MLTGRD1A.1024  
CL               SMOOTH.                                                   MLTGRD1A.1025  
CL----------------------------------------------------------------------   MLTGRD1A.1026  
                                                                           MLTGRD1A.1027  
CL    CALL STYPE                                                           MLTGRD1A.1028  
                                                                           MLTGRD1A.1029  
      CALL MG_STYPE(I_NT,J_NT,K_NT,KSMOOTH,JAC,PAT,SYM,ILINE,JLINE,        MLTGRD1A.1030  
     &              KLINE,NFB,IPAT,SWJAC,SWSYM)                            MLTGRD1A.1031  
                                                                           MLTGRD1A.1032  
CL----------------------------------------------------------------------   MLTGRD1A.1033  
CL    SECTION 3. CALL JOB_INFO TO OUTPUT INFORMATION ON CHOICES MADE       MLTGRD1A.1034  
CL               IF DESIRED.                                               MLTGRD1A.1035  
CL----------------------------------------------------------------------   MLTGRD1A.1036  
                                                                           MLTGRD1A.1037  
      IF(IPRINT.GE.3) THEN                                                 MLTGRD1A.1038  
        CALL MG_JOB_INFO(MAXITS,TOL_RES,KSMOOTH,                           MLTGRD1A.1039  
     &                   NPRE,NPOST,NCOARSE,W,KREST,NCGC,NGRIDS,IMAX,      MLTGRD1A.1040  
     &                   JMAX,KMAX,START_ADDRESS,RES_DIRS,                 MLTGRD1A.1041  
     &                   WORST_SMOOTHING_RATE,VERSION,K_BC)                MLTGRD1A.1042  
      END IF                                                               MLTGRD1A.1043  
                                                                           MLTGRD1A.1044  
CL----------------------------------------------------------------------   MLTGRD1A.1045  
CL    SECTION 4. CALL FDMG TO PERFORM MULTI-GRID SOLVER.                   MLTGRD1A.1046  
CL----------------------------------------------------------------------   MLTGRD1A.1047  
                                                                           MLTGRD1A.1048  
      CALL MG_FDMG(Q,A,B,C1,C2,DEF,D,E,F,G,RHS,I_NT,J_NT,K_NT,             MLTGRD1A.1049  
     &             START_ADDRESS,LAST_ADDRESS,IMAX,JMAX,KMAX,JAC,          MLTGRD1A.1050  
     &             PAT,SYM,ILINE,JLINE,KLINE,NFB,IPAT,SWJAC,SWSYM,         MLTGRD1A.1051  
     &             I_LENGTH,J_LENGTH,K_LENGTH,NGRIDS,MAXITS,               MLTGRD1A.1052  
     &             TOL_RES,IPRINT,KSMOOTH,NPRE,NPOST,NCOARSE,W,            MLTGRD1A.1053  
     &             KREST,NCGC,COS_P_LATITUDE,SEC_P_LATITUDE,               MLTGRD1A.1054  
     &             COS_V_LATITUDE,EARTH_RADIUS_INVERSE,                    MLTGRD1A.1055  
     &             LONGITUDE_STEP_GRIDS,LATITUDE_STEP_GRIDS,               MLTGRD1A.1056  
     &             START_ADDRESS_2D,LAST_ADDRESS_2D,RES_DIRS,              MLTGRD1A.1057  
     &             WORST_SMOOTHING_RATE,VERSION,K_BC,START_ADDRESS_Z,      MLTGRD1A.1058  
     &             LAST_ADDRESS_Z,Z_Q,Z_MID)                               MLTGRD1A.1059  
                                                                           MLTGRD1A.1060  
CL    END OF ROUTINE MG_CNTL                                               MLTGRD1A.1061  
                                                                           MLTGRD1A.1062  
      RETURN                                                               MLTGRD1A.1063  
      END                                                                  MLTGRD1A.1064  
CLL   SUBROUTINE MG_POINTS                                                 MLTGRD1A.1065  
CLL                                                                        MLTGRD1A.1066  
CLL   PURPOSE:                                                             MLTGRD1A.1067  
CLL   -------                                                              MLTGRD1A.1068  
CLL   PERFORMS POINT SMOOTHING.                                            MLTGRD1A.1069  
CLL                                                                        MLTGRD1A.1070  
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.1071  
CLL                                                                        MLTGRD1A.1072  
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.1073  
CLL VERSION  DATE                                                          MLTGRD1A.1074  
CLL   3.3                                                                  MLTGRD1A.1075  
CLL                                                                        MLTGRD1A.1076  
CLL                                                                        MLTGRD1A.1077  
CLLEND -----------------------------------------------------------------   MLTGRD1A.1078  
                                                                           MLTGRD1A.1079  
C*L ARGUMENT LIST.                                                         MLTGRD1A.1080  
                                                                           MLTGRD1A.1081  
      SUBROUTINE MG_POINTS(                                                MLTGRD1A.1082  
     &                     Q,RHS,A,B,C1,C2,DEF,D,E,F,G,COS_P_LATITUDE,     MLTGRD1A.1083  
     &                     SEC_P_LATITUDE,COS_V_LATITUDE,I_DIM,J_DIM,      MLTGRD1A.1084  
     &                     K_DIM,W,GRID_NUMBER,RMS_RES,RMS_INC,IPRINT,     MLTGRD1A.1085  
     &                     SWJAC,SWSYM,JAC,PAT,SYM,                        MLTGRD1A.1086  
     &                     NFB,IPAT,LATITUDE_STEP_INVERSE,                 MLTGRD1A.1087  
     &                     LONGITUDE_STEP_INVERSE,EARTH_RADIUS_INVERSE,    MLTGRD1A.1088  
     &                     VERSION,k_bc,Z_Q,Z_MID,I_NT,J_NT,K_NT)          MLTGRD1A.1089  
                                                                           MLTGRD1A.1090  
      IMPLICIT NONE                                                        MLTGRD1A.1091  
                                                                           MLTGRD1A.1092  
      LOGICAL                                                              MLTGRD1A.1093  
     &  I_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN I DIRECTION   MLTGRD1A.1094  
     &, J_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN J DIRECTION   MLTGRD1A.1095  
     &, K_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN K DIRECTION   MLTGRD1A.1096  
                                                                           MLTGRD1A.1097  
      INTEGER                                                              MLTGRD1A.1098  
     &  IPRINT      !IN. PARAMETER CONTROLLING QUANTITY OF OUTPUT.         MLTGRD1A.1099  
     &, I_DIM       !IN. NUMBER OF POINTS IN I-DIRECTION.                  MLTGRD1A.1100  
     &, J_DIM       !IN. NUMBER OF POINTS IN J-DIRECTION.                  MLTGRD1A.1101  
     &, K_DIM       !IN. NUMBER OF POINTS IN K-DIRECTION.                  MLTGRD1A.1102  
     &, GRID_NUMBER !IN. NUMBER OF GRID SMOOTHER IS ACTING ON.             MLTGRD1A.1103  
     &, NFB         !IN. NUMBER OF FORWARD / BACKWARD SWEEPS OF GRID       MLTGRD1A.1104  
     &              ! NEEDED.                                              MLTGRD1A.1105  
     &, IPAT        !IN. USED TO DISTINGUISH BETWEEN RED AND BLACK         MLTGRD1A.1106  
     &              ! POINTS.                                              MLTGRD1A.1107  
     &, VERSION     !IN. VERSION OF MULTIGRID BEING USED.                  MLTGRD1A.1108  
     &, K_BC        !IN. BOUNDARY CONDITION IN K DIRECTION.                MLTGRD1A.1109  
                                                                           MLTGRD1A.1110  
      LOGICAL                                                              MLTGRD1A.1111  
     &  JAC     !IN. .TRUE. FOR JACOBI METHODS                             MLTGRD1A.1112  
     &, PAT     !IN. .TRUE. FOR PATTERN SCHEMES                            MLTGRD1A.1113  
     &, SYM     !IN. .TRUE. FOR SYMMETRIC SCHEMES                          MLTGRD1A.1114  
                                                                           MLTGRD1A.1115  
      REAL                                                                 MLTGRD1A.1116  
     &  SWJAC    !IN. A SWITCH WHICH IS ZERO FOR JACOBI METHODS            MLTGRD1A.1117  
     &, SWSYM    !IN. A SWITCH WHICH IS ZERO FOR SYMMETRIC METHODS         MLTGRD1A.1118  
     &, RMS_RES  !IN. ROOT MEAN SQUARE RESIDUAL NORM.                      MLTGRD1A.1119  
     &, RMS_INC  !IN. ROOT MEAN SQUARE INCREMENT NORM.                     MLTGRD1A.1120  
     &, W        !IN. RELAXATION PARAMETER FOR EACH VARIABLE IN SYSTEM     MLTGRD1A.1121  
                                                                           MLTGRD1A.1122  
      REAL                                                                 MLTGRD1A.1123  
     &  A(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.1124  
     &, B(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.1125  
     &, C1(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.1126  
     &, C2(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.1127  
     &, DEF(I_DIM,J_DIM,K_DIM)  !IN. COEFFICIENT                           MLTGRD1A.1128  
     &, D(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.1129  
     &, E(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.1130  
     &, F(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.1131  
     &, G(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.1132  
     &, RHS(I_DIM,J_DIM,K_DIM)  !IN. RIGHT-HAND-SIDE OF EQUATION.          MLTGRD1A.1133  
     &, COS_P_LATITUDE(I_DIM,J_DIM) !IN. COSINE OF LATITUDE AT Q POINTS.   MLTGRD1A.1134  
     &, SEC_P_LATITUDE(I_DIM,J_DIM) !IN. 1./COS OF LATITUDE AT Q POINTS.   MLTGRD1A.1135  
     &, COS_V_LATITUDE(I_DIM,J_DIM-1)                                      MLTGRD1A.1136  
     &                          !IN. COSINE OF LATITUDE AT V POINTS.       MLTGRD1A.1137  
     &, Z_Q(K_DIM)              !IN. Z AT Q POINTS.                        MLTGRD1A.1138  
     &, Z_MID(0:K_DIM)          !IN. Z MIDWAY BETWEEN Q POINTS.            MLTGRD1A.1139  
                                                                           MLTGRD1A.1140  
      REAL                                                                 MLTGRD1A.1141  
     &  Q(I_DIM,J_DIM,K_DIM)    !OUT. SOLUTION.                            MLTGRD1A.1142  
                                                                           MLTGRD1A.1143  
      REAL                                                                 MLTGRD1A.1144  
     &  LATITUDE_STEP_INVERSE  !IN.                                        MLTGRD1A.1145  
     &, LONGITUDE_STEP_INVERSE !IN.                                        MLTGRD1A.1146  
     &, EARTH_RADIUS_INVERSE   !IN                                         MLTGRD1A.1147  
                                                                           MLTGRD1A.1148  
C*----------------------------------------------------------------------   MLTGRD1A.1149  
                                                                           MLTGRD1A.1150  
C*L   1 LOCAL WORK ARRAY REQUIRED.                                         MLTGRD1A.1151  
      REAL                                                                 MLTGRD1A.1152  
     &  CORRECTION(I_DIM,J_DIM,K_DIM)                                      MLTGRD1A.1153  
                                                                           MLTGRD1A.1154  
C*----------------------------------------------------------------------   MLTGRD1A.1155  
C LOCAL VARIABLES.                                                         MLTGRD1A.1156  
                                                                           MLTGRD1A.1157  
      REAL                                                                 MLTGRD1A.1158  
     &  SCALAR                                                             MLTGRD1A.1159  
     &, SCALAR1                                                            MLTGRD1A.1160  
     &, SCALAR2                                                            MLTGRD1A.1161  
     &, WEIGHT                                                             MLTGRD1A.1162  
     &, R                                                                  MLTGRD1A.1163  
     &, X                                                                  MLTGRD1A.1164  
     &, COEFF                                                              MLTGRD1A.1165  
     &, LHS                                                                MLTGRD1A.1166  
                                                                           MLTGRD1A.1167  
      INTEGER                                                              MLTGRD1A.1168  
     &  I,J,K                                                              MLTGRD1A.1169  
     &, I_BEGIN                                                            MLTGRD1A.1170  
     &, I_END                                                              MLTGRD1A.1171  
     &, I_STEP                                                             MLTGRD1A.1172  
     &, J_BEGIN(2)                                                         MLTGRD1A.1173  
     &, J_END(2)                                                           MLTGRD1A.1174  
     &, J_STEP                                                             MLTGRD1A.1175  
     &, K_BEGIN                                                            MLTGRD1A.1176  
     &, K_END                                                              MLTGRD1A.1177  
     &, K_STEP                                                             MLTGRD1A.1178  
     &, I_RB                                                               MLTGRD1A.1179  
     &, I_FB                                                               MLTGRD1A.1180  
     &, SWEEPS                                                             MLTGRD1A.1181  
     &, J_S                                                                MLTGRD1A.1182  
                                                                           MLTGRD1A.1183  
C*L   NO EXTERNAL ROUTINES CALLED.                                         MLTGRD1A.1184  
                                                                           MLTGRD1A.1185  
C*----------------------------------------------------------------------   MLTGRD1A.1186  
                                                                           MLTGRD1A.1187  
CL----------------------------------------------------------------------   MLTGRD1A.1188  
CL    SECTION 1. POINT RELAXATION SCHEMES                                  MLTGRD1A.1189  
CL----------------------------------------------------------------------   MLTGRD1A.1190  
                                                                           MLTGRD1A.1191  
C     Initialise Norms                                                     MLTGRD1A.1192  
C     ----------------                                                     MLTGRD1A.1193  
      RMS_RES=0.0                                                          MLTGRD1A.1194  
      RMS_INC=0.0                                                          MLTGRD1A.1195  
                                                                           MLTGRD1A.1196  
      WEIGHT=SWJAC*W                                                       MLTGRD1A.1197  
                                                                           MLTGRD1A.1198  
C     Define Point Ordering For First Sweep                                MLTGRD1A.1199  
C     -------------------------------------                                MLTGRD1A.1200  
                                                                           MLTGRD1A.1201  
      IF(.NOT.I_NT) THEN                                                   MLTGRD1A.1202  
        I_BEGIN = 1                                                        MLTGRD1A.1203  
        I_END = 1                                                          MLTGRD1A.1204  
      ELSE IF(VERSION.EQ.4) THEN                                           MLTGRD1A.1205  
        I_BEGIN=2                                                          MLTGRD1A.1206  
        I_END=I_DIM-1                                                      MLTGRD1A.1207  
      ELSE                                                                 MLTGRD1A.1208  
        I_BEGIN=1                                                          MLTGRD1A.1209  
        I_END=I_DIM                                                        MLTGRD1A.1210  
      END IF                                                               MLTGRD1A.1211  
      I_STEP=1                                                             MLTGRD1A.1212  
      SWEEPS=1                                                             MLTGRD1A.1213  
      IF (.NOT. J_NT) THEN                                                 MLTGRD1A.1214  
        J_BEGIN(1) = 1                                                     MLTGRD1A.1215  
        J_END(1) = 1                                                       MLTGRD1A.1216  
      ELSE IF (VERSION.EQ.3) THEN                                          MLTGRD1A.1217  
        J_BEGIN(1)=1                                                       MLTGRD1A.1218  
        J_END(1)=J_DIM                                                     MLTGRD1A.1219  
      ELSE IF(VERSION.EQ.2) THEN                                           MLTGRD1A.1220  
        J_BEGIN(1)=2                                                       MLTGRD1A.1221  
        J_END(1)=(J_DIM-1)/2                                               MLTGRD1A.1222  
        J_BEGIN(2)= (J_DIM-1)/2+2                                          MLTGRD1A.1223  
        J_END(2)= J_DIM-1                                                  MLTGRD1A.1224  
        SWEEPS = 2                                                         MLTGRD1A.1225  
      ELSE                                                                 MLTGRD1A.1226  
        J_BEGIN(1)=2                                                       MLTGRD1A.1227  
        J_END(1)=J_DIM-1                                                   MLTGRD1A.1228  
      END IF                                                               MLTGRD1A.1229  
      J_STEP=1                                                             MLTGRD1A.1230  
      K_BEGIN=1                                                            MLTGRD1A.1231  
      K_END=K_DIM                                                          MLTGRD1A.1232  
      IF (K_BC.EQ.2 ) THEN                                                 MLTGRD1A.1233  
        K_END = K_DIM-1                                                    MLTGRD1A.1234  
      ELSE IF (K_BC.EQ.3 ) THEN                                            MLTGRD1A.1235  
        K_BEGIN = 2                                                        MLTGRD1A.1236  
      ELSE IF (K_BC.EQ. 4) THEN                                            MLTGRD1A.1237  
        K_BEGIN = 2                                                        MLTGRD1A.1238  
        K_END = K_DIM-1                                                    MLTGRD1A.1239  
      END IF                                                               MLTGRD1A.1240  
      K_STEP=1                                                             MLTGRD1A.1241  
                                                                           MLTGRD1A.1242  
C     Set Red-Black Switch For First Sweep                                 MLTGRD1A.1243  
C     ------------------------------------                                 MLTGRD1A.1244  
      I_RB=1                                                               MLTGRD1A.1245  
                                                                           MLTGRD1A.1246  
      DO I_FB=1,NFB                                                        MLTGRD1A.1247  
                                                                           MLTGRD1A.1248  
C     Sweep Over Grid In Prescribed Point Order                            MLTGRD1A.1249  
C     -----------------------------------------                            MLTGRD1A.1250  
        RMS_RES=SWSYM*RMS_RES                                              MLTGRD1A.1251  
        RMS_INC=SWSYM*RMS_INC                                              MLTGRD1A.1252  
                                                                           MLTGRD1A.1253  
        DO K=K_BEGIN,K_END,K_STEP                                          MLTGRD1A.1254  
          DO J_S = 1,SWEEPS                                                MLTGRD1A.1255  
            DO J=J_BEGIN(J_S),J_END(J_S),J_STEP                            MLTGRD1A.1256  
              DO I=I_BEGIN,I_END,I_STEP                                    MLTGRD1A.1257  
                                                                           MLTGRD1A.1258  
C     Skip To Next Point Of The Same Colour If IPAT=2 (Red-Black)          MLTGRD1A.1259  
C     ===========================================================          MLTGRD1A.1260  
                IF(MOD(I+J+K+I_RB,IPAT).EQ.0) THEN                         MLTGRD1A.1261  
                                                                           MLTGRD1A.1262  
C     Evaluate Residual At The Point (I,J,K)                               MLTGRD1A.1263  
C     ======================================                               MLTGRD1A.1264  
                                                                           MLTGRD1A.1265  
C NON-DERIVATIVE TERM.                                                     MLTGRD1A.1266  
                                                                           MLTGRD1A.1267  
                  LHS =  - Q(I,J,K)*G(I,J,K)                               MLTGRD1A.1268  
                  COEFF = -G(I,J,K)                                        MLTGRD1A.1269  
                                                                           MLTGRD1A.1270  
                  IF (I_NT ) THEN                                          MLTGRD1A.1271  
C I-DIRECTION DERIVATIVES                                                  MLTGRD1A.1272  
                                                                           MLTGRD1A.1273  
                    IF(I.EQ.1) THEN                                        MLTGRD1A.1274  
                      IF(VERSION.LT.3) THEN                                MLTGRD1A.1275  
                        LHS=LHS+(Q(I_DIM,J,K)*A(I_DIM,J,K) - Q(I,J,K) *    MLTGRD1A.1276  
     &                   (A(I_DIM,J,K) + A(I,J,K)) + Q(2,J,K)*A(I,J,K))*   MLTGRD1A.1277  
     &                     EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*      MLTGRD1A.1278  
     &                    LONGITUDE_STEP_INVERSE*LONGITUDE_STEP_INVERSE    MLTGRD1A.1279  
     &                     *SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)        MLTGRD1A.1280  
     &                     + .5*DEF(I,J,K)*SEC_P_LATITUDE(I,J)*            MLTGRD1A.1281  
     &                    (D(I,J,K)*(Q(I+1,J,K)-Q(I,J,K))+D(I_DIM,J,K)*    MLTGRD1A.1282  
     &                     (Q(I,J,K)-Q(I_DIM,J,K)))*                       MLTGRD1A.1283  
     &                    LONGITUDE_STEP_INVERSE*EARTH_RADIUS_INVERSE      MLTGRD1A.1284  
                        COEFF = COEFF -(A(I_DIM,J,K) + A(I,J,K))*          MLTGRD1A.1285  
     &                     EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*      MLTGRD1A.1286  
     &                    LONGITUDE_STEP_INVERSE*LONGITUDE_STEP_INVERSE    MLTGRD1A.1287  
     &                     *SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)        MLTGRD1A.1288  
     &                     + .5*DEF(I,J,K)*SEC_P_LATITUDE(I,J)*            MLTGRD1A.1289  
     &                    (D(I_DIM,J,K)-D(I,J,K))*                         MLTGRD1A.1290  
     &                    LONGITUDE_STEP_INVERSE*EARTH_RADIUS_INVERSE      MLTGRD1A.1291  
                      ELSE                                                 MLTGRD1A.1292  
                        LHS = LHS + 2.*(-Q(I,J,K) *                        MLTGRD1A.1293  
     &                      A(I,J,K) + Q(2,J,K)*A(I,J,K))*                 MLTGRD1A.1294  
     &                     EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*      MLTGRD1A.1295  
     &                    LONGITUDE_STEP_INVERSE*LONGITUDE_STEP_INVERSE    MLTGRD1A.1296  
     &                     *SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)        MLTGRD1A.1297  
                        COEFF = COEFF -2.* A(I,J,K)*                       MLTGRD1A.1298  
     &                     EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*      MLTGRD1A.1299  
     &                    LONGITUDE_STEP_INVERSE*LONGITUDE_STEP_INVERSE    MLTGRD1A.1300  
     &                     *SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)        MLTGRD1A.1301  
                      END IF                                               MLTGRD1A.1302  
                    ELSE IF(I.EQ.I_DIM) THEN                               MLTGRD1A.1303  
                      IF(VERSION.LT.3) THEN                                MLTGRD1A.1304  
                        LHS = LHS +(Q(I-1,J,K)*A(I-1,J,K) - Q(I,J,K) *     MLTGRD1A.1305  
     &                   (A(I-1,J,K) + A(I,J,K)) + Q(1,J,K)*A(I,J,K))*     MLTGRD1A.1306  
     &                     EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*      MLTGRD1A.1307  
     &                    LONGITUDE_STEP_INVERSE*LONGITUDE_STEP_INVERSE    MLTGRD1A.1308  
     &                     *SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)        MLTGRD1A.1309  
     &                     + .5*DEF(I,J,K)*SEC_P_LATITUDE(I,J)*            MLTGRD1A.1310  
     &                    (D(I,J,K)*(Q(1,J,K)-Q(I,J,K))+D(I-1,J,K)*        MLTGRD1A.1311  
     &                     (Q(I,J,K)-Q(I-1,J,K)))*                         MLTGRD1A.1312  
     &                    LONGITUDE_STEP_INVERSE*EARTH_RADIUS_INVERSE      MLTGRD1A.1313  
                        COEFF = COEFF -(A(I-1,J,K) + A(I,J,K))*            MLTGRD1A.1314  
     &                     EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*      MLTGRD1A.1315  
     &                    LONGITUDE_STEP_INVERSE*LONGITUDE_STEP_INVERSE    MLTGRD1A.1316  
     &                     *SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)        MLTGRD1A.1317  
     &                     + .5*DEF(I,J,K)*SEC_P_LATITUDE(I,J)*            MLTGRD1A.1318  
     &                    (D(I-1,J,K)-D(I,J,K))*                           MLTGRD1A.1319  
     &                    LONGITUDE_STEP_INVERSE*EARTH_RADIUS_INVERSE      MLTGRD1A.1320  
                      ELSE                                                 MLTGRD1A.1321  
                        LHS= LHS+2.*(Q(I-1,J,K)*A(I-1,J,K) - Q(I,J,K) *    MLTGRD1A.1322  
     &                      A(I-1,J,K))*                                   MLTGRD1A.1323  
     &                     EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*      MLTGRD1A.1324  
     &                    LONGITUDE_STEP_INVERSE*LONGITUDE_STEP_INVERSE    MLTGRD1A.1325  
     &                     *SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)        MLTGRD1A.1326  
                        COEFF = COEFF-2.*A(I-1,J,K)*                       MLTGRD1A.1327  
     &                     EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*      MLTGRD1A.1328  
     &                    LONGITUDE_STEP_INVERSE*LONGITUDE_STEP_INVERSE    MLTGRD1A.1329  
     &                     *SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)        MLTGRD1A.1330  
                      END IF                                               MLTGRD1A.1331  
                    ELSE                                                   MLTGRD1A.1332  
                      LHS = LHS + (Q(I-1,J,K)*A(I-1,J,K) - Q(I,J,K) *      MLTGRD1A.1333  
     &                   (A(I-1,J,K) + A(I,J,K)) + Q(I+1,J,K)*A(I,J,K))*   MLTGRD1A.1334  
     &                     EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*      MLTGRD1A.1335  
     &                    LONGITUDE_STEP_INVERSE*LONGITUDE_STEP_INVERSE    MLTGRD1A.1336  
     &                     *SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)        MLTGRD1A.1337  
     &                     + .5*DEF(I,J,K)*SEC_P_LATITUDE(I,J)*            MLTGRD1A.1338  
     &                    (D(I,J,K)*(Q(I+1,J,K)-Q(I,J,K))+D(I-1,J,K)*      MLTGRD1A.1339  
     &                     (Q(I,J,K)-Q(I-1,J,K)))*                         MLTGRD1A.1340  
     &                    LONGITUDE_STEP_INVERSE*EARTH_RADIUS_INVERSE      MLTGRD1A.1341  
                      COEFF = COEFF -(A(I-1,J,K) + A(I,J,K))*              MLTGRD1A.1342  
     &                     EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*      MLTGRD1A.1343  
     &                    LONGITUDE_STEP_INVERSE*LONGITUDE_STEP_INVERSE    MLTGRD1A.1344  
     &                     *SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)        MLTGRD1A.1345  
     &                     + .5*DEF(I,J,K)*SEC_P_LATITUDE(I,J)*            MLTGRD1A.1346  
     &                    (D(I-1,J,K)-D(I,J,K))*                           MLTGRD1A.1347  
     &                    LONGITUDE_STEP_INVERSE*EARTH_RADIUS_INVERSE      MLTGRD1A.1348  
                    END IF                                                 MLTGRD1A.1349  
                  END IF                                                   MLTGRD1A.1350  
                                                                           MLTGRD1A.1351  
                  IF( J_NT) THEN                                           MLTGRD1A.1352  
C J-DIRECTION DERIVATIVES                                                  MLTGRD1A.1353  
                                                                           MLTGRD1A.1354  
                    SCALAR = EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE     MLTGRD1A.1355  
     &                     *LATITUDE_STEP_INVERSE*LATITUDE_STEP_INVERSE    MLTGRD1A.1356  
                    IF (J.EQ.1) THEN                                       MLTGRD1A.1357  
C ONLY POSSIBLE IN LIMITED AREA CODE, VERSION 3.                           MLTGRD1A.1358  
                      LHS = LHS -2.*(Q(I,J,K)*B(I,J,K)                     MLTGRD1A.1359  
     &                    -Q(I,J+1,K)*B(I,J,K))*COS_V_LATITUDE(I,J)        MLTGRD1A.1360  
     &                    *SEC_P_LATITUDE(I,J)*SCALAR                      MLTGRD1A.1361  
                      COEFF = COEFF -2.*B(I,J,K)*COS_V_LATITUDE(I,J)       MLTGRD1A.1362  
     &                    *SEC_P_LATITUDE(I,J)*SCALAR                      MLTGRD1A.1363  
                    ELSE IF(J.EQ.J_DIM) THEN                               MLTGRD1A.1364  
C ONLY POSSIBLE IN LIMITED AREA CODE, VERSION 3.                           MLTGRD1A.1365  
                      LHS = LHS + 2.*(Q(I,J-1,K)*B(I,J-1,K)                MLTGRD1A.1366  
     &                    -Q(I,J,K)*B(I,J-1,K))*COS_V_LATITUDE(I,J-1)      MLTGRD1A.1367  
     &                    *SEC_P_LATITUDE(I,J)*SCALAR                      MLTGRD1A.1368  
                      COEFF = COEFF-2.*B(I,J-1,K)*COS_V_LATITUDE(I,J-1)    MLTGRD1A.1369  
     &                    *SEC_P_LATITUDE(I,J)*SCALAR                      MLTGRD1A.1370  
                    ELSE                                                   MLTGRD1A.1371  
                      LHS = LHS + ((Q(I,J-1,K)*B(I,J-1,K)                  MLTGRD1A.1372  
     &                    -Q(I,J,K)*B(I,J-1,K))*COS_V_LATITUDE(I,J-1)      MLTGRD1A.1373  
     &                    -(Q(I,J,K)*B(I,J,K)                              MLTGRD1A.1374  
     &                    -Q(I,J+1,K)*B(I,J,K))*COS_V_LATITUDE(I,J))       MLTGRD1A.1375  
     &                    *SEC_P_LATITUDE(I,J)*SCALAR                      MLTGRD1A.1376  
     &                 +DEF(I,J,K)*.5*LATITUDE_STEP_INVERSE*               MLTGRD1A.1377  
     &                  EARTH_RADIUS_INVERSE*                              MLTGRD1A.1378  
     &                 (E(I,J-1,K)*(Q(I,J-1,K)-Q(I,J,K))+                  MLTGRD1A.1379  
     &                  E(I,J,K)*(Q(I,J,K)-Q(I,J+1,K)))                    MLTGRD1A.1380  
                      COEFF = COEFF - (B(I,J-1,K)*COS_V_LATITUDE(I,J-1)    MLTGRD1A.1381  
     &                   +B(I,J,K)*COS_V_LATITUDE(I,J))                    MLTGRD1A.1382  
     &                    *SEC_P_LATITUDE(I,J)*SCALAR                      MLTGRD1A.1383  
     &                 +DEF(I,J,K)*.5*LATITUDE_STEP_INVERSE*               MLTGRD1A.1384  
     &                  EARTH_RADIUS_INVERSE*                              MLTGRD1A.1385  
     &                 (E(I,J,K)-E(I,J-1,K))                               MLTGRD1A.1386  
                    END IF                                                 MLTGRD1A.1387  
                  END IF                                                   MLTGRD1A.1388  
                                                                           MLTGRD1A.1389  
C CALCULATE K-DIRECTION DERIVATIVES AND ADD ON.                            MLTGRD1A.1390  
                                                                           MLTGRD1A.1391  
                  IF (K_NT) THEN                                           MLTGRD1A.1392  
                    IF(K.EQ.1) THEN                                        MLTGRD1A.1393  
                      SCALAR = 1./(Z_MID(K) - Z_MID(K-1))                  MLTGRD1A.1394  
                      SCALAR1 = 1./(Z_Q(K+1) - Z_Q(K))                     MLTGRD1A.1395  
                      LHS = LHS + SCALAR*(Q(I,J,K+1)*C2(I,J,K+1)           MLTGRD1A.1396  
     &                    -Q(I,J,K)*C2(I,J,K))*C1(I,J,K)*SCALAR1           MLTGRD1A.1397  
                      COEFF= COEFF - SCALAR*C1(I,J,K)*SCALAR1*C2(I,J,K)    MLTGRD1A.1398  
                      IF(Z_Q(1).NE.Z_MID(1)) THEN                          MLTGRD1A.1399  
C INCLUDE FIRST DERIVATIVE TERM WHEN NON-ZERO                              MLTGRD1A.1400  
                        LHS = LHS  + .5*SCALAR1*DEF(I,J,K)*F(I,J,K)*       MLTGRD1A.1401  
     &                               (Q(I,J,K+1)-Q(I,J,K))                 MLTGRD1A.1402  
                        COEFF = COEFF - .5*SCALAR1*DEF(I,J,K)*F(I,J,K)     MLTGRD1A.1403  
                      END IF                                               MLTGRD1A.1404  
                    ELSE IF (K.EQ.K_DIM) THEN                              MLTGRD1A.1405  
                      SCALAR = 1./(Z_MID(K) - Z_MID(K-1))                  MLTGRD1A.1406  
                      SCALAR2 = 1./(Z_Q(K) - Z_Q(K-1))                     MLTGRD1A.1407  
                      LHS = LHS - SCALAR*(Q(I,J,K)*C2(I,J,K)               MLTGRD1A.1408  
     &                     -Q(I,J,K-1)*C2(I,J,K-1))*C1(I,J,K-1)*SCALAR2    MLTGRD1A.1409  
                      COEFF=COEFF- SCALAR*C1(I,J,K-1)*SCALAR2*C2(I,J,K)    MLTGRD1A.1410  
                      IF(Z_Q(K_DIM).NE.Z_MID(K_DIM+1)) THEN                MLTGRD1A.1411  
C INCLUDE FIRST DERIVATIVE TERM WHEN NON-ZERO                              MLTGRD1A.1412  
                        LHS = LHS  + .5*SCALAR2*DEF(I,J,K)*F(I,J,K-1)*     MLTGRD1A.1413  
     &                                 (Q(I,J,K)-Q(I,J,K-1))               MLTGRD1A.1414  
                        COEFF= COEFF + .5*SCALAR2*DEF(I,J,K)*F(I,J,K-1)    MLTGRD1A.1415  
                      END IF                                               MLTGRD1A.1416  
                    ELSE                                                   MLTGRD1A.1417  
                      SCALAR = 1./(Z_MID(K) - Z_MID(K-1))                  MLTGRD1A.1418  
                      SCALAR1 = 1./(Z_Q(K+1) - Z_Q(K))                     MLTGRD1A.1419  
                      SCALAR2 = 1./(Z_Q(K) - Z_Q(K-1))                     MLTGRD1A.1420  
                      LHS =  LHS + SCALAR*                                 MLTGRD1A.1421  
     &                   ((Q(I,J,K+1)*C2(I,J,K+1)-Q(I,J,K)*C2(I,J,K))      MLTGRD1A.1422  
     &                   *C1(I,J,K)*SCALAR1                                MLTGRD1A.1423  
     &                   -(Q(I,J,K)*C2(I,J,K)-Q(I,J,K-1)*C2(I,J,K-1))      MLTGRD1A.1424  
     &                   *C1(I,J,K-1)*SCALAR2)                             MLTGRD1A.1425  
     &                   +.5*DEF(I,J,K)*                                   MLTGRD1A.1426  
     &                   ((Q(I,J,K+1)-Q(I,J,K))                            MLTGRD1A.1427  
     &                    *F(I,J,K)*SCALAR1                                MLTGRD1A.1428  
     &                    +(Q(I,J,K)-Q(I,J,K-1))                           MLTGRD1A.1429  
     &                     *F(I,J,K-1)*SCALAR2)                            MLTGRD1A.1430  
                      COEFF = COEFF - SCALAR*(C1(I,J,K)*SCALAR1            MLTGRD1A.1431  
     &                              +C1(I,J,K-1)*SCALAR2)*C2(I,J,K)        MLTGRD1A.1432  
     &                           +.5*DEF(I,J,K)*(F(I,J,K-1)*SCALAR2        MLTGRD1A.1433  
     &                               -F(I,J,K)*SCALAR1)                    MLTGRD1A.1434  
                    END IF                                                 MLTGRD1A.1435  
                  END IF                                                   MLTGRD1A.1436  
                                                                           MLTGRD1A.1437  
                  R = LHS - RHS(I,J,K)                                     MLTGRD1A.1438  
                  RMS_RES = RMS_RES + R*R                                  MLTGRD1A.1439  
                                                                           MLTGRD1A.1440  
C     SOLVE THE LOCAL PROBLEM: COEFF X = R                                 MLTGRD1A.1441  
C     ===================================                                  MLTGRD1A.1442  
                  X = R / COEFF                                            MLTGRD1A.1443  
                                                                           MLTGRD1A.1444  
C     Store Correction In Workspace                                        MLTGRD1A.1445  
C     And Add To Current Solution Unless WT=0 (Jacobi)                     MLTGRD1A.1446  
C     ================================================                     MLTGRD1A.1447  
                  CORRECTION(I,J,K) = X                                    MLTGRD1A.1448  
                  Q(I,J,K) = Q(I,J,K) - WEIGHT * X                         MLTGRD1A.1449  
                  RMS_INC=RMS_INC+X*X                                      MLTGRD1A.1450  
                END IF                                                     MLTGRD1A.1451  
              END DO                                                       MLTGRD1A.1452  
            END DO                                                         MLTGRD1A.1453  
          END DO                                                           MLTGRD1A.1454  
        END DO                                                             MLTGRD1A.1455  
C                                                                          MLTGRD1A.1456  
C     End Of Sweep Over Grid                                               MLTGRD1A.1457  
C     ----------------------                                               MLTGRD1A.1458  
C                                                                          MLTGRD1A.1459  
C     Add Corrections For The Jacobi Method                                MLTGRD1A.1460  
C     -------------------------------------                                MLTGRD1A.1461  
        IF(JAC) THEN                                                       MLTGRD1A.1462  
          DO K= K_BEGIN,K_END                                              MLTGRD1A.1463  
            DO J_S = 1,SWEEPS                                              MLTGRD1A.1464  
              DO J=J_BEGIN(J_S),J_END(J_S)                                 MLTGRD1A.1465  
                DO I=I_BEGIN,I_END                                         MLTGRD1A.1466  
                  Q(I,J,K) = Q(I,J,K) - W * CORRECTION(I,J,K)              MLTGRD1A.1467  
                END DO                                                     MLTGRD1A.1468  
              END DO                                                       MLTGRD1A.1469  
            END DO                                                         MLTGRD1A.1470  
          END DO                                                           MLTGRD1A.1471  
        END IF                                                             MLTGRD1A.1472  
C                                                                          MLTGRD1A.1473  
C     Reset Point Ordering For Second Sweep                                MLTGRD1A.1474  
C     -------------------------------------                                MLTGRD1A.1475  
        I = I_BEGIN                                                        MLTGRD1A.1476  
        I_BEGIN = I_END                                                    MLTGRD1A.1477  
        I_END = I                                                          MLTGRD1A.1478  
        I_STEP=-1                                                          MLTGRD1A.1479  
        DO J_S =1 ,SWEEPS                                                  MLTGRD1A.1480  
          J = J_BEGIN(J_S)                                                 MLTGRD1A.1481  
          J_BEGIN(J_S) = J_END(J_S)                                        MLTGRD1A.1482  
          J_END(J_S) = J                                                   MLTGRD1A.1483  
        END DO                                                             MLTGRD1A.1484  
        J_STEP=-1                                                          MLTGRD1A.1485  
        K = K_BEGIN                                                        MLTGRD1A.1486  
        K_BEGIN = K_END                                                    MLTGRD1A.1487  
        K_END = K                                                          MLTGRD1A.1488  
        K_STEP=-1                                                          MLTGRD1A.1489  
C                                                                          MLTGRD1A.1490  
C     Reset Red-Black Switch For Second Sweep                              MLTGRD1A.1491  
C     ---------------------------------------                              MLTGRD1A.1492  
        I_RB=0                                                             MLTGRD1A.1493  
                                                                           MLTGRD1A.1494  
      END DO                                                               MLTGRD1A.1495  
                                                                           MLTGRD1A.1496  
CL    END OF ROUTINE MG_POINTS                                             MLTGRD1A.1497  
                                                                           MLTGRD1A.1498  
      RETURN                                                               MLTGRD1A.1499  
      END                                                                  MLTGRD1A.1500  
CLL   SUBROUTINE MG_POLES.                                                 MLTGRD1A.1501  
CLL                                                                        MLTGRD1A.1502  
CLL   PURPOSE:                                                             MLTGRD1A.1503  
CLL   -------                                                              MLTGRD1A.1504  
CLL   PERFORMS POLAR UPDATES.                                              MLTGRD1A.1505  
CLL                                                                        MLTGRD1A.1506  
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.1507  
CLL                                                                        MLTGRD1A.1508  
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.1509  
CLL VERSION  DATE                                                          MLTGRD1A.1510  
CLL   3.3             WRITTEN BY M. H. MAWSON.                             MLTGRD1A.1511  
CLL                                                                        MLTGRD1A.1512  
CLL                                                                        MLTGRD1A.1513  
CLLEND -----------------------------------------------------------------   MLTGRD1A.1514  
                                                                           MLTGRD1A.1515  
C*L ARGUMENT LIST.                                                         MLTGRD1A.1516  
                                                                           MLTGRD1A.1517  
      SUBROUTINE MG_POLES(                                                 MLTGRD1A.1518  
     &                    Q,RHS,B,C1,C2,DEF,E,F,G,SEC_P_LATITUDE,          MLTGRD1A.1519  
     &                    COS_V_LATITUDE,LATITUDE_STEP_INVERSE,            MLTGRD1A.1520  
     &                    EARTH_RADIUS_INVERSE,                            MLTGRD1A.1521  
     &                    I_DIM,J_DIM,K_DIM,RMS_RES,RMS_INC,               MLTGRD1A.1522  
     &                    Z_Q,Z_MID,K_NT,K_BC)                             MLTGRD1A.1523  
                                                                           MLTGRD1A.1524  
      IMPLICIT NONE                                                        MLTGRD1A.1525  
                                                                           MLTGRD1A.1526  
      LOGICAL                                                              MLTGRD1A.1527  
     &  K_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN K DIRECTION   MLTGRD1A.1528  
                                                                           MLTGRD1A.1529  
      INTEGER                                                              MLTGRD1A.1530  
     &  I_DIM       !IN. NUMBER OF POINTS IN I-DIRECTION.                  MLTGRD1A.1531  
     &, J_DIM       !IN. NUMBER OF POINTS IN J-DIRECTION.                  MLTGRD1A.1532  
     &, K_DIM       !IN. NUMBER OF POINTS IN K-DIRECTION.                  MLTGRD1A.1533  
     &, K_BC        !IN. BOUNDARY CONDITION IN K DIRECTION.                MLTGRD1A.1534  
                                                                           MLTGRD1A.1535  
      REAL                                                                 MLTGRD1A.1536  
     &  RMS_RES  !IN. ROOT MEAN SQUARE RESIDUAL NORM.                      MLTGRD1A.1537  
     &, RMS_INC  !IN. ROOT MEAN SQUARE INCREMENT NORM.                     MLTGRD1A.1538  
                                                                           MLTGRD1A.1539  
      REAL                                                                 MLTGRD1A.1540  
     &  B(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.1541  
     &, C1(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.1542  
     &, C2(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.1543  
     &, DEF(I_DIM,J_DIM,K_DIM)  !IN. COEFFICIENT                           MLTGRD1A.1544  
     &, E(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.1545  
     &, F(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.1546  
     &, G(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.1547  
     &, RHS(I_DIM,J_DIM,K_DIM)  !IN. RIGHT-HAND-SIDE OF EQUATION.          MLTGRD1A.1548  
     &, SEC_P_LATITUDE(I_DIM,J_DIM) !IN. 1./COS OF LATITUDE AT Q POINTS.   MLTGRD1A.1549  
     &, COS_V_LATITUDE(I_DIM,J_DIM-1)                                      MLTGRD1A.1550  
     &                          !IN. COSINE OF LATITUDE AT V POINTS.       MLTGRD1A.1551  
     &, Z_Q(K_DIM)              !IN. Z AT Q POINTS.                        MLTGRD1A.1552  
     &, Z_MID(0:K_DIM)          !IN. Z MIDWAY BETWEEN Q POINTS.            MLTGRD1A.1553  
                                                                           MLTGRD1A.1554  
      REAL                                                                 MLTGRD1A.1555  
     &  Q(I_DIM,J_DIM,K_DIM)    !OUT. SOLUTION.                            MLTGRD1A.1556  
                                                                           MLTGRD1A.1557  
      REAL                                                                 MLTGRD1A.1558  
     &  LATITUDE_STEP_INVERSE  !IN.                                        MLTGRD1A.1559  
     &, EARTH_RADIUS_INVERSE   !IN                                         MLTGRD1A.1560  
                                                                           MLTGRD1A.1561  
C*----------------------------------------------------------------------   MLTGRD1A.1562  
                                                                           MLTGRD1A.1563  
C*L   NO LOCAL WORK ARRAYS REQUIRED.                                       MLTGRD1A.1564  
                                                                           MLTGRD1A.1565  
C*----------------------------------------------------------------------   MLTGRD1A.1566  
C LOCAL VARIABLES.                                                         MLTGRD1A.1567  
                                                                           MLTGRD1A.1568  
      INTEGER                                                              MLTGRD1A.1569  
     &  I,J,K,I2                                                           MLTGRD1A.1570  
     &, K_BEGIN                                                            MLTGRD1A.1571  
     &, K_END                                                              MLTGRD1A.1572  
                                                                           MLTGRD1A.1573  
      REAL                                                                 MLTGRD1A.1574  
     &  X_POLE                                                             MLTGRD1A.1575  
     &, SCALAR                                                             MLTGRD1A.1576  
     &, SCALARS                                                            MLTGRD1A.1577  
     &, SCALAR1                                                            MLTGRD1A.1578  
     &, SCALAR2                                                            MLTGRD1A.1579  
     &, SCALAR3                                                            MLTGRD1A.1580  
     &, LHS                                                                MLTGRD1A.1581  
                                                                           MLTGRD1A.1582  
                                                                           MLTGRD1A.1583  
C*L   NO EXTERNAL ROUTINES CALLED.                                         MLTGRD1A.1584  
                                                                           MLTGRD1A.1585  
C*----------------------------------------------------------------------   MLTGRD1A.1586  
                                                                           MLTGRD1A.1587  
CL----------------------------------------------------------------------   MLTGRD1A.1588  
CL    SECTION 1. FIND CORRECTION AT POLES.                                 MLTGRD1A.1589  
CL----------------------------------------------------------------------   MLTGRD1A.1590  
                                                                           MLTGRD1A.1591  
      K_BEGIN = 1                                                          MLTGRD1A.1592  
      K_END = K_DIM                                                        MLTGRD1A.1593  
      IF (K_BC.EQ.2 ) THEN                                                 MLTGRD1A.1594  
        K_END = K_DIM-1                                                    MLTGRD1A.1595  
      ELSE IF (K_BC.EQ.3 ) THEN                                            MLTGRD1A.1596  
        K_BEGIN = 2                                                        MLTGRD1A.1597  
      ELSE IF (K_BC.EQ. 4) THEN                                            MLTGRD1A.1598  
        K_BEGIN = 2                                                        MLTGRD1A.1599  
        K_END = K_DIM-1                                                    MLTGRD1A.1600  
      END IF                                                               MLTGRD1A.1601  
                                                                           MLTGRD1A.1602  
      DO K= K_BEGIN,K_END                                                  MLTGRD1A.1603  
CL    NORTH POLE                                                           MLTGRD1A.1604  
                                                                           MLTGRD1A.1605  
        I2 = I_DIM/2                                                       MLTGRD1A.1606  
        SCALAR = EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*                MLTGRD1A.1607  
     &           LATITUDE_STEP_INVERSE*LATITUDE_STEP_INVERSE               MLTGRD1A.1608  
        SCALARS= EARTH_RADIUS_INVERSE*LATITUDE_STEP_INVERSE                MLTGRD1A.1609  
        LHS = 0.                                                           MLTGRD1A.1610  
        X_POLE = 0.                                                        MLTGRD1A.1611  
                                                                           MLTGRD1A.1612  
C SUM ALL TERMS AT POLE.                                                   MLTGRD1A.1613  
        DO I= 1,I_DIM/2                                                    MLTGRD1A.1614  
          LHS = LHS + ((Q(I,2,K)-Q(I,1,K))                                 MLTGRD1A.1615  
     &                       *B(I,1,K)*COS_V_LATITUDE(I,1)                 MLTGRD1A.1616  
     &                        -(Q(I+I2,1,K) -Q(I+I2,2,K))                  MLTGRD1A.1617  
     &                        *B(I+I2,1,K)*COS_V_LATITUDE(I+I2,1))         MLTGRD1A.1618  
     &                        *SEC_P_LATITUDE(I,1)*SCALAR                  MLTGRD1A.1619  
     &                    +DEF(1,1,K)*SCALARS*                             MLTGRD1A.1620  
     &                    (E(I,1,K)*(Q(I,1,K)-Q(I,2,K))+                   MLTGRD1A.1621  
     &                     E(I+I2,1,K)*(Q(I+I2,1,K)-Q(I+I2,2,K)))          MLTGRD1A.1622  
          X_POLE = X_POLE - (B(I,1,K)*COS_V_LATITUDE(I,1)                  MLTGRD1A.1623  
     &                    +B(I+I2,1,K)*COS_V_LATITUDE(I+I2,1))             MLTGRD1A.1624  
     &                     *SEC_P_LATITUDE(I,1)*SCALAR                     MLTGRD1A.1625  
     &                    +DEF(1,1,K)*SCALARS*                             MLTGRD1A.1626  
     &                    (E(I,1,K)+E(I+I2,1,K))                           MLTGRD1A.1627  
        END DO                                                             MLTGRD1A.1628  
                                                                           MLTGRD1A.1629  
        LHS = LHS - Q(1,1,K)*G(1,1,K)                                      MLTGRD1A.1630  
        X_POLE = X_POLE - G(1,1,K)                                         MLTGRD1A.1631  
                                                                           MLTGRD1A.1632  
        IF(K_NT) THEN                                                      MLTGRD1A.1633  
CL INCLUDE VERTICAL TERMS IN 3-D.                                          MLTGRD1A.1634  
          IF(K.EQ.1) THEN                                                  MLTGRD1A.1635  
            SCALAR3 = 1./(Z_MID(K) - Z_MID(K-1))                           MLTGRD1A.1636  
            SCALAR1 = 1./(Z_Q(K+1) - Z_Q(K))                               MLTGRD1A.1637  
            LHS = LHS + SCALAR3*(Q(1,1,K+1)*C2(1,1,K+1)                    MLTGRD1A.1638  
     &                     -Q(1,1,K)*C2(1,1,K))*C1(1,1,K)*SCALAR1          MLTGRD1A.1639  
            X_POLE = X_POLE - SCALAR3*C1(1,1,K)*SCALAR1*C2(1,1,K)          MLTGRD1A.1640  
            IF(Z_Q(1).NE.Z_MID(1)) THEN                                    MLTGRD1A.1641  
C INCLUDE FIRST DERIVATIVE TERM WHEN NON-ZERO                              MLTGRD1A.1642  
              LHS = LHS  + .5*SCALAR1*DEF(1,1,K)*F(1,1,K)*                 MLTGRD1A.1643  
     &               (Q(1,1,K+1)*C2(1,1,K+1)                               MLTGRD1A.1644  
     &                -Q(1,1,K)*C2(1,1,K))                                 MLTGRD1A.1645  
              X_POLE = X_POLE - .5*SCALAR1*DEF(1,1,K)*F(1,1,K)             MLTGRD1A.1646  
     &                          *C2(1,1,K)                                 MLTGRD1A.1647  
            END IF                                                         MLTGRD1A.1648  
          ELSE IF (K.EQ.K_DIM) THEN                                        MLTGRD1A.1649  
            SCALAR3 = 1./(Z_MID(K) - Z_MID(K-1))                           MLTGRD1A.1650  
            SCALAR2 = 1./(Z_Q(K) - Z_Q(K-1))                               MLTGRD1A.1651  
            LHS = LHS - SCALAR3*(Q(1,1,K)*C2(1,1,K)                        MLTGRD1A.1652  
     &                   -Q(1,1,K-1)*C2(1,1,K-1))*C1(1,1,K-1)*SCALAR2      MLTGRD1A.1653  
            X_POLE = X_POLE - SCALAR3*C1(1,1,K-1)*SCALAR2*C2(1,1,K)        MLTGRD1A.1654  
            IF(Z_Q(K_DIM).NE.Z_MID(K_DIM+1)) THEN                          MLTGRD1A.1655  
C INCLUDE FIRST DERIVATIVE TERM WHEN NON-ZERO                              MLTGRD1A.1656  
              LHS = LHS  + .5*SCALAR2*DEF(1,1,K)*F(1,1,K-1)*               MLTGRD1A.1657  
     &                 (Q(1,1,K)*C2(1,1,K)                                 MLTGRD1A.1658  
     &                  - Q(1,1,K-1)*C2(1,1,K-1))                          MLTGRD1A.1659  
              X_POLE = X_POLE + .5*SCALAR2*DEF(1,1,K)*F(1,1,K-1)           MLTGRD1A.1660  
     &                          *C2(1,1,K)                                 MLTGRD1A.1661  
            END IF                                                         MLTGRD1A.1662  
          ELSE                                                             MLTGRD1A.1663  
            SCALAR3 = 1./(Z_MID(K) - Z_MID(K-1))                           MLTGRD1A.1664  
            SCALAR1 = 1./(Z_Q(K+1) - Z_Q(K))                               MLTGRD1A.1665  
            SCALAR2 = 1./(Z_Q(K) - Z_Q(K-1))                               MLTGRD1A.1666  
            LHS = LHS + SCALAR3*                                           MLTGRD1A.1667  
     &               ((Q(1,1,K+1)*C2(1,1,K+1)-Q(1,1,K)*C2(1,1,K))          MLTGRD1A.1668  
     &                *C1(1,1,K)*SCALAR1                                   MLTGRD1A.1669  
     &               -(Q(1,1,K)*C2(1,1,K)-Q(1,1,K-1)*C2(1,1,K-1))          MLTGRD1A.1670  
     &                *C1(1,1,K-1)*SCALAR2)                                MLTGRD1A.1671  
     &               +.5*DEF(1,1,K)*                                       MLTGRD1A.1672  
     &               ((Q(1,1,K+1)*C2(1,1,K+1)                              MLTGRD1A.1673  
     &                -Q(1,1,K)*C2(1,1,K))                                 MLTGRD1A.1674  
     &                *F(1,1,K)*SCALAR1                                    MLTGRD1A.1675  
     &               +(Q(1,1,K)*C2(1,1,K)                                  MLTGRD1A.1676  
     &                 -Q(1,1,K-1)*C2(1,1,K-1))                            MLTGRD1A.1677  
     &                *F(1,1,K-1)*SCALAR2)                                 MLTGRD1A.1678  
            X_POLE = X_POLE - SCALAR3*(C1(1,1,K)*SCALAR1                   MLTGRD1A.1679  
     &                              +C1(1,1,K-1)*SCALAR2)*C2(1,1,K)        MLTGRD1A.1680  
     &               +.5*DEF(1,1,K)*(F(1,1,K-1)*SCALAR2                    MLTGRD1A.1681  
     &                               -F(1,1,K)*SCALAR1)*C2(1,1,K)          MLTGRD1A.1682  
          END IF                                                           MLTGRD1A.1683  
        END IF                                                             MLTGRD1A.1684  
                                                                           MLTGRD1A.1685  
C AVERAGE POLAR VALUE AND INCLUDE CORRECTIONS.                             MLTGRD1A.1686  
        X_POLE = (LHS - RHS(1,1,K)*I_DIM) / X_POLE                         MLTGRD1A.1687  
        DO I= 1,I_DIM                                                      MLTGRD1A.1688  
          Q(I,1,K)=Q(I,1,K)-X_POLE                                         MLTGRD1A.1689  
          RMS_INC=RMS_INC+X_POLE*X_POLE                                    MLTGRD1A.1690  
        END DO                                                             MLTGRD1A.1691  
                                                                           MLTGRD1A.1692  
CL    SOUTH POLE                                                           MLTGRD1A.1693  
                                                                           MLTGRD1A.1694  
        LHS = 0.                                                           MLTGRD1A.1695  
        X_POLE = 0.                                                        MLTGRD1A.1696  
                                                                           MLTGRD1A.1697  
C SUM ALL TERMS AT POLE.                                                   MLTGRD1A.1698  
        DO I= 1,I_DIM/2                                                    MLTGRD1A.1699  
          LHS = LHS +((Q(I,J_DIM-1,K) -Q(I,J_DIM,K))                       MLTGRD1A.1700  
     &                      *B(I,J_DIM-1,K)*COS_V_LATITUDE(I,J_DIM-1)      MLTGRD1A.1701  
     &                      -(Q(I+I2,J_DIM,K)-Q(I+I2,J_DIM-1,K))           MLTGRD1A.1702  
     &                      *B(I+I2,J_DIM-1,K)*                            MLTGRD1A.1703  
     &                      COS_V_LATITUDE(I+I2,J_DIM-1))                  MLTGRD1A.1704  
     &                      *SEC_P_LATITUDE(I,J_DIM)*SCALAR                MLTGRD1A.1705  
     &                    +DEF(1,J_DIM,K)*SCALARS*                         MLTGRD1A.1706  
     &                (E(I,J_DIM-1,K)*(Q(I,J_DIM-1,K)-Q(I,J_DIM,K))+       MLTGRD1A.1707  
     &                     E(I+I2,J_DIM-1,K)*(Q(I+I2,J_DIM-1,K)            MLTGRD1A.1708  
     &                                         -Q(I+I2,J_DIM,K)))          MLTGRD1A.1709  
          X_POLE = X_POLE - (B(I,J_DIM-1,K)*                               MLTGRD1A.1710  
     &                      COS_V_LATITUDE(I,J_DIM-1)                      MLTGRD1A.1711  
     &                      +B(I+I2,J_DIM-1,K)*                            MLTGRD1A.1712  
     &                      COS_V_LATITUDE(I+I2,J_DIM-1))                  MLTGRD1A.1713  
     &                      *SEC_P_LATITUDE(I,J_DIM)*SCALAR                MLTGRD1A.1714  
     &                      -DEF(1,J_DIM,K)*SCALARS*                       MLTGRD1A.1715  
     &                      (E(I,J_DIM-1,K)+E(I+I2,J_DIM-1,K))             MLTGRD1A.1716  
        END DO                                                             MLTGRD1A.1717  
        LHS = LHS - Q(1,J_DIM,K)*G(1,J_DIM,K)                              MLTGRD1A.1718  
        X_POLE = X_POLE - G(1,J_DIM,K)                                     MLTGRD1A.1719  
                                                                           MLTGRD1A.1720  
        IF(K_NT) THEN                                                      MLTGRD1A.1721  
CL INCLUDE VERTICAL TERMS.                                                 MLTGRD1A.1722  
          IF(K.EQ.1) THEN                                                  MLTGRD1A.1723  
            SCALAR3 = 1./(Z_MID(K) - Z_MID(K-1))                           MLTGRD1A.1724  
            SCALAR1 = 1./(Z_Q(K+1) - Z_Q(K))                               MLTGRD1A.1725  
            LHS = LHS + SCALAR3*(Q(1,J_DIM,K+1)*C2(1,J_DIM,K+1)            MLTGRD1A.1726  
     &               -Q(1,J_DIM,K)*C2(1,J_DIM,K))*C1(1,J_DIM,K)*SCALAR1    MLTGRD1A.1727  
            X_POLE=X_POLE - SCALAR3*C1(1,J_DIM,K)*SCALAR1*C2(1,J_DIM,K)    MLTGRD1A.1728  
            IF(Z_Q(1).NE.Z_MID(1)) THEN                                    MLTGRD1A.1729  
C INCLUDE FIRST DERIVATIVE TERM WHEN NON-ZERO                              MLTGRD1A.1730  
              LHS = LHS  + .5*SCALAR1*DEF(1,J_DIM,K)*F(1,J_DIM,K)*         MLTGRD1A.1731  
     &                      (Q(1,J_DIM,K+1)*C2(1,J_DIM,K+1)-               MLTGRD1A.1732  
     &                       Q(1,J_DIM,K)*C2(1,J_DIM,K))                   MLTGRD1A.1733  
              X_POLE = X_POLE - .5*SCALAR1*DEF(1,J_DIM,K)*F(1,J_DIM,K)     MLTGRD1A.1734  
     &                          *C2(1,J_DIM,K)                             MLTGRD1A.1735  
            END IF                                                         MLTGRD1A.1736  
          ELSE IF (K.EQ.K_DIM) THEN                                        MLTGRD1A.1737  
            SCALAR3 = 1./(Z_MID(K) - Z_MID(K-1))                           MLTGRD1A.1738  
            SCALAR2 = 1./(Z_Q(K) - Z_Q(K-1))                               MLTGRD1A.1739  
            LHS = LHS - SCALAR3*(Q(1,J_DIM,K)*C2(1,J_DIM,K)                MLTGRD1A.1740  
     &          -Q(1,J_DIM,K-1)*C2(1,J_DIM,K-1))*C1(1,J_DIM,K-1)*SCALAR2   MLTGRD1A.1741  
            X_POLE=X_POLE- SCALAR3*C1(1,J_DIM,K-1)*SCALAR2*C2(1,J_DIM,K)   MLTGRD1A.1742  
            IF(Z_Q(K_DIM).NE.Z_MID(K_DIM+1)) THEN                          MLTGRD1A.1743  
C INCLUDE FIRST DERIVATIVE TERM WHEN NON-ZERO                              MLTGRD1A.1744  
              LHS = LHS  + .5*SCALAR2*DEF(1,J_DIM,K)*F(1,J_DIM,K-1)*       MLTGRD1A.1745  
     &                      (Q(1,J_DIM,K)*C2(1,J_DIM,K)-                   MLTGRD1A.1746  
     &                       Q(1,J_DIM,K-1)*C2(1,J_DIM,K-1))               MLTGRD1A.1747  
              X_POLE = X_POLE + .5*SCALAR2*DEF(1,J_DIM,K)*F(1,J_DIM,K-1)   MLTGRD1A.1748  
     &                          *C2(1,J_DIM,K)                             MLTGRD1A.1749  
            END IF                                                         MLTGRD1A.1750  
          ELSE                                                             MLTGRD1A.1751  
            SCALAR3 = 1./(Z_MID(K) - Z_MID(K-1))                           MLTGRD1A.1752  
            SCALAR1 = 1./(Z_Q(K+1) - Z_Q(K))                               MLTGRD1A.1753  
            SCALAR2 = 1./(Z_Q(K) - Z_Q(K-1))                               MLTGRD1A.1754  
            LHS = LHS + SCALAR3*                                           MLTGRD1A.1755  
     &               ((Q(1,J_DIM,K+1)*C2(1,J_DIM,K+1)                      MLTGRD1A.1756  
     &                 -Q(1,J_DIM,K)*C2(1,J_DIM,K))                        MLTGRD1A.1757  
     &                *C1(1,J_DIM,K)*SCALAR1                               MLTGRD1A.1758  
     &               -(Q(1,J_DIM,K)*C2(1,J_DIM,K)                          MLTGRD1A.1759  
     &                 -Q(1,J_DIM,K-1)*C2(1,J_DIM,K-1))                    MLTGRD1A.1760  
     &                *C1(1,J_DIM,K-1)*SCALAR2)                            MLTGRD1A.1761  
     &               +.5*DEF(1,J_DIM,K)*                                   MLTGRD1A.1762  
     &               ((Q(1,J_DIM,K+1)*C2(1,J_DIM,K+1)                      MLTGRD1A.1763  
     &                -Q(1,J_DIM,K)*C2(1,J_DIM,K))                         MLTGRD1A.1764  
     &                *F(1,J_DIM,K)*SCALAR1                                MLTGRD1A.1765  
     &               + (Q(1,J_DIM,K)*C2(1,J_DIM,K)                         MLTGRD1A.1766  
     &                 -Q(1,J_DIM,K-1)*C2(1,J_DIM,K-1))                    MLTGRD1A.1767  
     &                *F(1,J_DIM,K-1)*SCALAR2)                             MLTGRD1A.1768  
            X_POLE = X_POLE - SCALAR3*(C1(1,J_DIM,K)*SCALAR1               MLTGRD1A.1769  
     &                        +C1(1,J_DIM,K-1)*SCALAR2)*C2(1,J_DIM,K)      MLTGRD1A.1770  
     &               +.5*DEF(1,J_DIM,K)*(F(1,J_DIM,K-1)*SCALAR2            MLTGRD1A.1771  
     &                          -F(1,J_DIM,K)*SCALAR1)*C2(1,J_DIM,K)       MLTGRD1A.1772  
          END IF                                                           MLTGRD1A.1773  
        END IF                                                             MLTGRD1A.1774  
                                                                           MLTGRD1A.1775  
C AVERAGE POLAR VALUE AND INCLUDE CORRECTIONS.                             MLTGRD1A.1776  
        X_POLE = (LHS - RHS(1,J_DIM,K)*I_DIM) / X_POLE                     MLTGRD1A.1777  
        DO I= 1,I_DIM                                                      MLTGRD1A.1778  
          Q(I,J_DIM,K)=Q(I,J_DIM,K)-X_POLE                                 MLTGRD1A.1779  
          RMS_INC=RMS_INC+X_POLE*X_POLE                                    MLTGRD1A.1780  
        END DO                                                             MLTGRD1A.1781  
      END DO                                                               MLTGRD1A.1782  
                                                                           MLTGRD1A.1783  
CL    END OF ROUTINE MG_POLES                                              MLTGRD1A.1784  
                                                                           MLTGRD1A.1785  
      RETURN                                                               MLTGRD1A.1786  
      END                                                                  MLTGRD1A.1787  
CLL   SUBROUTINE MG_PROLONG                                                MLTGRD1A.1788  
CLL                                                                        MLTGRD1A.1789  
CLL   PURPOSE:                                                             MLTGRD1A.1790  
CLL   -------                                                              MLTGRD1A.1791  
CLL   CALCULATES CORRECTION TO SOLUTION AT FINE GRID POINTS                MLTGRD1A.1792  
CLL   CORRESPONDING TO THE COARSE GRID ONES. THIS CORRECTION IS THEN       MLTGRD1A.1793  
CLL   INTERPOLATED TO ALL THE FINE GRID POINTS.                            MLTGRD1A.1794  
CLL                                                                        MLTGRD1A.1795  
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.1796  
CLL                                                                        MLTGRD1A.1797  
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.1798  
CLL VERSION  DATE                                                          MLTGRD1A.1799  
CLL   3.3                                                                  MLTGRD1A.1800  
CLL                                                                        MLTGRD1A.1801  
CLL                                                                        MLTGRD1A.1802  
CLLEND -----------------------------------------------------------------   MLTGRD1A.1803  
                                                                           MLTGRD1A.1804  
C*L ARGUMENT LIST.                                                         MLTGRD1A.1805  
                                                                           MLTGRD1A.1806  
      SUBROUTINE MG_PROLONG(                                               MLTGRD1A.1807  
     &                      Q_COARSE,Q_FINE,I_COARSE,J_COARSE,K_COARSE,    MLTGRD1A.1808  
     &                      I_FINE,J_FINE,K_FINE,RES_DIRS,VERSION,K_BC,    MLTGRD1A.1809  
     &                      Z_Q_FINE,I_NT,J_NT,K_NT)                       MLTGRD1A.1810  
                                                                           MLTGRD1A.1811  
      IMPLICIT NONE                                                        MLTGRD1A.1812  
                                                                           MLTGRD1A.1813  
      LOGICAL                                                              MLTGRD1A.1814  
     &  I_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN I DIRECTION   MLTGRD1A.1815  
     &, J_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN J DIRECTION   MLTGRD1A.1816  
     &, K_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN K DIRECTION   MLTGRD1A.1817  
                                                                           MLTGRD1A.1818  
      INTEGER                                                              MLTGRD1A.1819  
     &  I_COARSE   !IN. NUMBER OF POINTS IN I DIRECTION ON COARSE GRID.    MLTGRD1A.1820  
     &, J_COARSE   !IN. NUMBER OF POINTS IN J DIRECTION ON COARSE GRID.    MLTGRD1A.1821  
     &, K_COARSE   !IN. NUMBER OF POINTS IN K DIRECTION ON COARSE GRID.    MLTGRD1A.1822  
     &, I_FINE     !IN. NUMBER OF POINTS IN I DIRECTION ON FINE GRID.      MLTGRD1A.1823  
     &, J_FINE     !IN. NUMBER OF POINTS IN J DIRECTION ON FINE GRID.      MLTGRD1A.1824  
     &, K_FINE     !IN. NUMBER OF POINTS IN K DIRECTION ON FINE GRID.      MLTGRD1A.1825  
     &, RES_DIRS   !IN. RESTRICTED DIRECTIONS FROM FINE GRID TO COARSE     MLTGRD1A.1826  
     &             !    = 3 NEED TO PROLONG IN ALL DIRECTIONS              MLTGRD1A.1827  
     &             !    = 2 NEED TO PROLONG IN I AND J DIRECTIONS          MLTGRD1A.1828  
     &             !    = 1 NEED TO PROLONG IN I DIRECTION                 MLTGRD1A.1829  
     &, VERSION    !IN. VERSION OF CODE TO BE USED.                        MLTGRD1A.1830  
     &, K_BC       !IN. BOUNDARY CONDITION IN K DIRECTION.                 MLTGRD1A.1831  
                                                                           MLTGRD1A.1832  
      REAL                                                                 MLTGRD1A.1833  
     &  Q_COARSE(I_COARSE,J_COARSE,K_COARSE) !IN. COARSE GRID SOLUTION.    MLTGRD1A.1834  
     &, Z_Q_FINE(K_FINE)    !IN. Z VALUES AT Q_FINE VERTICAL POINTS.       MLTGRD1A.1835  
                                                                           MLTGRD1A.1836  
      REAL                                                                 MLTGRD1A.1837  
     &  Q_FINE(I_FINE,J_FINE,K_FINE)         !INOUT. FINE GRID SOLUTION.   MLTGRD1A.1838  
                                                                           MLTGRD1A.1839  
C*----------------------------------------------------------------------   MLTGRD1A.1840  
                                                                           MLTGRD1A.1841  
C*L     LOCAL WORK ARRAYS REQUIRED.                                        MLTGRD1A.1842  
                                                                           MLTGRD1A.1843  
      REAL                                                                 MLTGRD1A.1844  
     &  Q_CORRECTION(I_FINE,J_FINE,K_COARSE) !USED TO SAVE CALCULATIONS    MLTGRD1A.1845  
     &                                       !IN 3-D CODE.                 MLTGRD1A.1846  
     &, Q_FINE_BOUNDARY(I_FINE*2+J_FINE*2,K_FINE)                          MLTGRD1A.1847  
     &              !HOLDS BOUNDARY ELEMENTS IN VERSION 4                  MLTGRD1A.1848  
                                                                           MLTGRD1A.1849  
C*----------------------------------------------------------------------   MLTGRD1A.1850  
C LOCAL VARIABLES.                                                         MLTGRD1A.1851  
                                                                           MLTGRD1A.1852  
      INTEGER                                                              MLTGRD1A.1853  
     &  I,J,K                 ! LOOP COUNTERS                              MLTGRD1A.1854  
     &, II,JJ,KK,JP,JJP                                                    MLTGRD1A.1855  
     &, KC_BEGIN,KC_END                                                    MLTGRD1A.1856  
                                                                           MLTGRD1A.1857  
      LOGICAL                                                              MLTGRD1A.1858  
     &  J_RES                                                              MLTGRD1A.1859  
     &, SWITCH                                                             MLTGRD1A.1860  
                                                                           MLTGRD1A.1861  
      REAL                                                                 MLTGRD1A.1862  
     &  FRAC_ABOVE,                                                        MLTGRD1A.1863  
     &  FRAC_BELOW                                                         MLTGRD1A.1864  
                                                                           MLTGRD1A.1865  
C*L   NO EXTERNAL ROUTINES CALLED.                                         MLTGRD1A.1866  
                                                                           MLTGRD1A.1867  
C*----------------------------------------------------------------------   MLTGRD1A.1868  
                                                                           MLTGRD1A.1869  
CFPP$ NOCONCUR R                                                           MLTGRD1A.1870  
                                                                           MLTGRD1A.1871  
CL----------------------------------------------------------------------   MLTGRD1A.1872  
CL    SECTION 1. WRITE OUT LIMITED AREA DIRICHLET BOUNDARY CONDITION       MLTGRD1A.1873  
CL               IF REQUIRED.                                              MLTGRD1A.1874  
CL               FIND COARSE GRID CORRECTION BY SUBTRACTING                MLTGRD1A.1875  
CL               FINE GRID SOLUTION POINTWISE.                             MLTGRD1A.1876  
CL----------------------------------------------------------------------   MLTGRD1A.1877  
                                                                           MLTGRD1A.1878  
C SET KC VARIABLES DEPENDING ON BOUNDARY CONDITIONS IN K DIRECTIONS.       MLTGRD1A.1879  
C FOR DIRICHLET BOUNDARY CONDITIONS NO PROLONGATION IS REQUIRED ON         MLTGRD1A.1880  
C THAT COARSE LEVEL.                                                       MLTGRD1A.1881  
      KC_BEGIN = 1                                                         MLTGRD1A.1882  
      KC_END = K_COARSE                                                    MLTGRD1A.1883  
      IF (K_BC.EQ.2 ) THEN                                                 MLTGRD1A.1884  
        KC_END = K_COARSE - 1                                              MLTGRD1A.1885  
      ELSE IF (K_BC.EQ.3) THEN                                             MLTGRD1A.1886  
        KC_BEGIN = 2                                                       MLTGRD1A.1887  
      ELSE IF (K_BC.EQ.4) THEN                                             MLTGRD1A.1888  
        KC_BEGIN = 2                                                       MLTGRD1A.1889  
        KC_END = K_COARSE - 1                                              MLTGRD1A.1890  
      END IF                                                               MLTGRD1A.1891  
                                                                           MLTGRD1A.1892  
C-----------------------------------------------------------------------   MLTGRD1A.1893  
CL    SECTION 1.1 WRITE OUT LIMITED AREA DIRICHLET BOUNDARY CONDITION      MLTGRD1A.1894  
CL                IF REQUIRED.                                             MLTGRD1A.1895  
C-----------------------------------------------------------------------   MLTGRD1A.1896  
                                                                           MLTGRD1A.1897  
      IF (VERSION.EQ.4) THEN                                               MLTGRD1A.1898  
        DO K=1,K_FINE                                                      MLTGRD1A.1899  
          IF(I_NT .AND. J_NT) THEN                                         MLTGRD1A.1900  
            DO I=1,I_FINE                                                  MLTGRD1A.1901  
              Q_FINE_BOUNDARY(I,K) = Q_FINE(I,1,K)                         MLTGRD1A.1902  
            END DO                                                         MLTGRD1A.1903  
            II = I_FINE                                                    MLTGRD1A.1904  
            DO J=2,J_FINE-1                                                MLTGRD1A.1905  
              II = II+1                                                    MLTGRD1A.1906  
              Q_FINE_BOUNDARY(II,K) = Q_FINE(1,J,K)                        MLTGRD1A.1907  
              II = II+1                                                    MLTGRD1A.1908  
              Q_FINE_BOUNDARY(II,K) = Q_FINE(I_FINE,J,K)                   MLTGRD1A.1909  
            END DO                                                         MLTGRD1A.1910  
            DO I=1,I_FINE                                                  MLTGRD1A.1911  
              Q_FINE_BOUNDARY(II+I,K) = Q_FINE(I,J_FINE,K)                 MLTGRD1A.1912  
            END DO                                                         MLTGRD1A.1913  
          ELSE IF (I_NT) THEN                                              MLTGRD1A.1914  
            Q_FINE_BOUNDARY(1,K) = Q_FINE(1,1,K)                           MLTGRD1A.1915  
            Q_FINE_BOUNDARY(2,K) = Q_FINE(I_FINE,1,K)                      MLTGRD1A.1916  
          ELSE IF (J_NT) THEN                                              MLTGRD1A.1917  
            Q_FINE_BOUNDARY(1,K) = Q_FINE(1,1,K)                           MLTGRD1A.1918  
            Q_FINE_BOUNDARY(2,K) = Q_FINE(1,J_FINE,K)                      MLTGRD1A.1919  
          END IF                                                           MLTGRD1A.1920  
        END DO                                                             MLTGRD1A.1921  
      END IF                                                               MLTGRD1A.1922  
                                                                           MLTGRD1A.1923  
C-----------------------------------------------------------------------   MLTGRD1A.1924  
CL    SECTION 1.2 FIND COARSE GRID CORRECTION BY SUBTRACTING               MLTGRD1A.1925  
CL                FINE GRID SOLUTION POINTWISE.                            MLTGRD1A.1926  
C-----------------------------------------------------------------------   MLTGRD1A.1927  
                                                                           MLTGRD1A.1928  
      J_RES = RES_DIRS.GT.5 .OR. RES_DIRS.EQ.3 .OR. RES_DIRS.EQ.2          MLTGRD1A.1929  
      SWITCH = RES_DIRS.EQ.1                                               MLTGRD1A.1930  
                                                                           MLTGRD1A.1931  
      IF(RES_DIRS.GT.5) THEN                                               MLTGRD1A.1932  
                                                                           MLTGRD1A.1933  
        DO K = KC_BEGIN,KC_END                                             MLTGRD1A.1934  
          IF(RES_DIRS.EQ.7) THEN                                           MLTGRD1A.1935  
            KK=2*K-1                                                       MLTGRD1A.1936  
          ELSE                                                             MLTGRD1A.1937  
            KK = K                                                         MLTGRD1A.1938  
          END IF                                                           MLTGRD1A.1939  
          DO J = 1,J_COARSE                                                MLTGRD1A.1940  
            JJ=2*J-1                                                       MLTGRD1A.1941  
            DO I = 1,I_COARSE                                              MLTGRD1A.1942  
              II=2*I-1                                                     MLTGRD1A.1943  
              Q_COARSE(I,J,K) = Q_COARSE(I,J,K) - Q_FINE(II,JJ,KK)         MLTGRD1A.1944  
            END DO                                                         MLTGRD1A.1945  
          END DO                                                           MLTGRD1A.1946  
        END DO                                                             MLTGRD1A.1947  
                                                                           MLTGRD1A.1948  
      ELSE                                                                 MLTGRD1A.1949  
                                                                           MLTGRD1A.1950  
        DO K = KC_BEGIN,KC_END                                             MLTGRD1A.1951  
          IF(MOD(RES_DIRS,2).EQ.1) THEN                                    MLTGRD1A.1952  
            KK = 2*K-1                                                     MLTGRD1A.1953  
          ELSE                                                             MLTGRD1A.1954  
            KK = K                                                         MLTGRD1A.1955  
          END IF                                                           MLTGRD1A.1956  
          DO J = 1,J_COARSE                                                MLTGRD1A.1957  
            IF(J_RES) THEN                                                 MLTGRD1A.1958  
              JJ = 2*J-1                                                   MLTGRD1A.1959  
            ELSE                                                           MLTGRD1A.1960  
              JJ = J                                                       MLTGRD1A.1961  
            END IF                                                         MLTGRD1A.1962  
            DO I = 1,I_COARSE                                              MLTGRD1A.1963  
              IF(RES_DIRS.GT.3) THEN                                       MLTGRD1A.1964  
                II = 2*I-1                                                 MLTGRD1A.1965  
              ELSE                                                         MLTGRD1A.1966  
                II = I                                                     MLTGRD1A.1967  
              END IF                                                       MLTGRD1A.1968  
              Q_COARSE(I,J,K) = Q_COARSE(I,J,K) - Q_FINE(II,JJ,KK)         MLTGRD1A.1969  
C SET CORRECTION FIELD FOR K ONLY PROLONGATION.                            MLTGRD1A.1970  
              IF (SWITCH) THEN                                             MLTGRD1A.1971  
                Q_FINE(II,JJ,KK) = Q_COARSE(I,J,K)                         MLTGRD1A.1972  
                Q_CORRECTION(II,JJ,K) = Q_COARSE(I,J,K)                    MLTGRD1A.1973  
              END IF                                                       MLTGRD1A.1974  
            END DO                                                         MLTGRD1A.1975  
          END DO                                                           MLTGRD1A.1976  
        END DO                                                             MLTGRD1A.1977  
                                                                           MLTGRD1A.1978  
      END IF                                                               MLTGRD1A.1979  
                                                                           MLTGRD1A.1980  
CL----------------------------------------------------------------------   MLTGRD1A.1981  
CL    SECTION 2. ADD PROLONGED CORRECTION TO FINE GRID SOLUTION            MLTGRD1A.1982  
CL----------------------------------------------------------------------   MLTGRD1A.1983  
                                                                           MLTGRD1A.1984  
C-----------------------------------------------------------------------   MLTGRD1A.1985  
CL    SECTION 2.1 HORIZONTAL PROLONGATION.                                 MLTGRD1A.1986  
CL                CORRECTION ON EACH COARSE GRID LEVEL IS STORED FOR       MLTGRD1A.1987  
CL                USE IN VERTICAL PROLONGATION.                            MLTGRD1A.1988  
C-----------------------------------------------------------------------   MLTGRD1A.1989  
                                                                           MLTGRD1A.1990  
      IF(RES_DIRS.GT.5) THEN                                               MLTGRD1A.1991  
C-----------------------------------------------------------------------   MLTGRD1A.1992  
CL    I & J PROLONGATION, PLUS POSSIBLY K.                                 MLTGRD1A.1993  
C-----------------------------------------------------------------------   MLTGRD1A.1994  
                                                                           MLTGRD1A.1995  
CL    FILL IN ALL POINTS ON FINE GRID (I,J) ON COARSE GRID K LEVELS.       MLTGRD1A.1996  
                                                                           MLTGRD1A.1997  
        DO K= KC_BEGIN,KC_END                                              MLTGRD1A.1998  
          IF(RES_DIRS.EQ.7) THEN                                           MLTGRD1A.1999  
            KK=2*K-1                                                       MLTGRD1A.2000  
          ELSE                                                             MLTGRD1A.2001  
            KK = K                                                         MLTGRD1A.2002  
          END IF                                                           MLTGRD1A.2003  
          DO J = 1,J_COARSE                                                MLTGRD1A.2004  
            IF(.NOT.(J.EQ.(J_COARSE+1)/2 .AND. VERSION.EQ.2)) THEN         MLTGRD1A.2005  
              JJ=2*J-1                                                     MLTGRD1A.2006  
CL    DO ALL I POINTS ON J_COARSE ROWS.                                    MLTGRD1A.2007  
              DO I = 1,I_COARSE-1                                          MLTGRD1A.2008  
                II=2*I-1                                                   MLTGRD1A.2009  
                Q_CORRECTION(II,JJ,K) = Q_COARSE(I,J,K)                    MLTGRD1A.2010  
                Q_FINE(II,JJ,KK) = Q_FINE(II,JJ,KK) +                      MLTGRD1A.2011  
     &                             Q_CORRECTION(II,JJ,K)                   MLTGRD1A.2012  
                Q_CORRECTION(I*2,JJ,K) = .5*                               MLTGRD1A.2013  
     &                             (Q_COARSE(I,J,K)+Q_COARSE(I+1,J,K))     MLTGRD1A.2014  
                Q_FINE(I*2,JJ,KK) = Q_FINE(I*2,JJ,KK) +                    MLTGRD1A.2015  
     &                              Q_CORRECTION(I*2,JJ,K)                 MLTGRD1A.2016  
              END DO                                                       MLTGRD1A.2017  
              IF(VERSION.LT.3) THEN                                        MLTGRD1A.2018  
C GLOBAL, 2 EXTRA POINTS TO DO.                                            MLTGRD1A.2019  
                Q_CORRECTION(I_FINE-1,JJ,K) = Q_COARSE(I_COARSE,J,K)       MLTGRD1A.2020  
                Q_FINE(I_FINE-1,JJ,KK) = Q_FINE(I_FINE-1,JJ,KK)+           MLTGRD1A.2021  
     &                                   Q_CORRECTION(I_FINE-1,JJ,K)       MLTGRD1A.2022  
                Q_CORRECTION(I_FINE,JJ,K) = .5*(Q_COARSE(I_COARSE,J,K)+    MLTGRD1A.2023  
     &                                          Q_COARSE(1,J,K))           MLTGRD1A.2024  
                Q_FINE(I_FINE,JJ,KK) = Q_FINE(I_FINE,JJ,KK) +              MLTGRD1A.2025  
     &                                 Q_CORRECTION(I_FINE,JJ,K)           MLTGRD1A.2026  
              ELSE                                                         MLTGRD1A.2027  
C LIMITED AREA, 1 EXTRA POINT TO DO.                                       MLTGRD1A.2028  
                Q_CORRECTION(I_FINE,JJ,K) = Q_COARSE(I_COARSE,J,K)         MLTGRD1A.2029  
                Q_FINE(I_FINE,JJ,KK) = Q_FINE(I_FINE,JJ,KK)+               MLTGRD1A.2030  
     &                                 Q_CORRECTION(I_FINE,JJ,K)           MLTGRD1A.2031  
              END IF                                                       MLTGRD1A.2032  
            END IF                                                         MLTGRD1A.2033  
          END DO                                                           MLTGRD1A.2034  
CL    FILL IN MISSING ROWS                                                 MLTGRD1A.2035  
          DO J = 2,J_FINE-1,2                                              MLTGRD1A.2036  
            JJ = J/2                                                       MLTGRD1A.2037  
            DO I = 1,I_FINE,2                                              MLTGRD1A.2038  
              II = (I+1)/2                                                 MLTGRD1A.2039  
              Q_CORRECTION(I,J,K) = .5* (Q_COARSE(II,JJ,K) +               MLTGRD1A.2040  
     &                                   Q_COARSE(II,JJ+1,K))              MLTGRD1A.2041  
              Q_FINE(I,J,KK) = Q_FINE(I,J,KK) + Q_CORRECTION(I,J,K)        MLTGRD1A.2042  
            END DO                                                         MLTGRD1A.2043  
            DO I = 2,I_FINE-1,2                                            MLTGRD1A.2044  
              II = I/2                                                     MLTGRD1A.2045  
              Q_CORRECTION(I,J,K) = .25* (Q_COARSE(II,JJ,K) +              MLTGRD1A.2046  
     &                                    Q_COARSE(II,JJ+1,K) +            MLTGRD1A.2047  
     &                                    Q_COARSE(II+1,JJ,K) +            MLTGRD1A.2048  
     &                                    Q_COARSE(II+1,JJ+1,K))           MLTGRD1A.2049  
              Q_FINE(I,J,KK) = Q_FINE(I,J,KK) + Q_CORRECTION(I,J,K)        MLTGRD1A.2050  
            END DO                                                         MLTGRD1A.2051  
            IF (VERSION.LT.3) THEN                                         MLTGRD1A.2052  
              Q_CORRECTION(I_FINE,J,K) = .25* (Q_COARSE(1,JJ,K) +          MLTGRD1A.2053  
     &                                         Q_COARSE(1,JJ+1,K) +        MLTGRD1A.2054  
     &                                         Q_COARSE(I_COARSE,JJ,K) +   MLTGRD1A.2055  
     &                                        Q_COARSE(I_COARSE,JJ+1,K))   MLTGRD1A.2056  
              Q_FINE(I_FINE,J,KK) = Q_FINE(I_FINE,J,KK) +                  MLTGRD1A.2057  
     &                              Q_CORRECTION(I_FINE,J,K)               MLTGRD1A.2058  
            END IF                                                         MLTGRD1A.2059  
          END DO                                                           MLTGRD1A.2060  
        END DO                                                             MLTGRD1A.2061  
                                                                           MLTGRD1A.2062  
      ELSE IF (RES_DIRS.GT.3) THEN                                         MLTGRD1A.2063  
C-----------------------------------------------------------------------   MLTGRD1A.2064  
CL    I PROLONGATION, PLUS POSSIBLY K.                                     MLTGRD1A.2065  
C-----------------------------------------------------------------------   MLTGRD1A.2066  
                                                                           MLTGRD1A.2067  
        DO K= KC_BEGIN,KC_END                                              MLTGRD1A.2068  
          IF(RES_DIRS.EQ.5) THEN                                           MLTGRD1A.2069  
            KK=2*K-1                                                       MLTGRD1A.2070  
          ELSE                                                             MLTGRD1A.2071  
            KK = K                                                         MLTGRD1A.2072  
          END IF                                                           MLTGRD1A.2073  
          DO J = 1,J_COARSE                                                MLTGRD1A.2074  
            IF(.NOT.(J.EQ.(J_COARSE+1)/2 .AND. VERSION.EQ.2)) THEN         MLTGRD1A.2075  
              JJ=2*J-1                                                     MLTGRD1A.2076  
CL    DO ALL I POINTS ON J_COARSE ROWS.                                    MLTGRD1A.2077  
              DO I = 1,I_COARSE-1                                          MLTGRD1A.2078  
                II=2*I-1                                                   MLTGRD1A.2079  
                Q_CORRECTION(II,JJ,K) = Q_COARSE(I,J,K)                    MLTGRD1A.2080  
                Q_FINE(II,JJ,KK) = Q_FINE(II,JJ,KK) +                      MLTGRD1A.2081  
     &                             Q_CORRECTION(II,JJ,K)                   MLTGRD1A.2082  
                Q_CORRECTION(I*2,JJ,K) = .5*                               MLTGRD1A.2083  
     &                             (Q_COARSE(I,J,K)+Q_COARSE(I+1,J,K))     MLTGRD1A.2084  
                Q_FINE(I*2,JJ,KK) = Q_FINE(I*2,JJ,KK) +                    MLTGRD1A.2085  
     &                              Q_CORRECTION(I*2,JJ,K)                 MLTGRD1A.2086  
              END DO                                                       MLTGRD1A.2087  
              IF(VERSION.LT.3) THEN                                        MLTGRD1A.2088  
C GLOBAL, 2 EXTRA POINTS TO DO.                                            MLTGRD1A.2089  
                Q_CORRECTION(I_FINE-1,JJ,K) = Q_COARSE(I_COARSE,J,K)       MLTGRD1A.2090  
                Q_FINE(I_FINE-1,JJ,KK) = Q_FINE(I_FINE-1,JJ,KK)+           MLTGRD1A.2091  
     &                                   Q_CORRECTION(I_FINE-1,JJ,K)       MLTGRD1A.2092  
                Q_CORRECTION(I_FINE,JJ,K) = .5*(Q_COARSE(I_COARSE,J,K)+    MLTGRD1A.2093  
     &                                          Q_COARSE(1,J,K))           MLTGRD1A.2094  
                Q_FINE(I_FINE,JJ,KK) = Q_FINE(I_FINE,JJ,KK) +              MLTGRD1A.2095  
     &                                 Q_CORRECTION(I_FINE,JJ,K)           MLTGRD1A.2096  
              ELSE                                                         MLTGRD1A.2097  
C LIMITED AREA, 1 EXTRA POINT TO DO.                                       MLTGRD1A.2098  
                Q_CORRECTION(I_FINE,JJ,K) = Q_COARSE(I_COARSE,J,K)         MLTGRD1A.2099  
                Q_FINE(I_FINE,JJ,KK) = Q_FINE(I_FINE,JJ,KK)+               MLTGRD1A.2100  
     &                                 Q_CORRECTION(I_FINE,JJ,K)           MLTGRD1A.2101  
              END IF                                                       MLTGRD1A.2102  
            END IF                                                         MLTGRD1A.2103  
          END DO                                                           MLTGRD1A.2104  
        END DO                                                             MLTGRD1A.2105  
                                                                           MLTGRD1A.2106  
      ELSE IF (RES_DIRS.GT.1) THEN                                         MLTGRD1A.2107  
C-----------------------------------------------------------------------   MLTGRD1A.2108  
CL    J PROLONGATION, PLUS POSSIBLY K.                                     MLTGRD1A.2109  
C-----------------------------------------------------------------------   MLTGRD1A.2110  
                                                                           MLTGRD1A.2111  
CL    FILL IN ALL POINTS ON FINE GRID (I,J) ON COARSE GRID K LEVELS.       MLTGRD1A.2112  
                                                                           MLTGRD1A.2113  
        DO K= KC_BEGIN,KC_END                                              MLTGRD1A.2114  
          IF(RES_DIRS.EQ.3) THEN                                           MLTGRD1A.2115  
            KK=2*K-1                                                       MLTGRD1A.2116  
          ELSE                                                             MLTGRD1A.2117  
            KK = K                                                         MLTGRD1A.2118  
          END IF                                                           MLTGRD1A.2119  
          DO J = 1,J_FINE,2                                                MLTGRD1A.2120  
            IF(.NOT.(J.EQ.(J_FINE+1)/2 .AND. VERSION.EQ.2)) THEN           MLTGRD1A.2121  
              JJ=(J+1)/2                                                   MLTGRD1A.2122  
              DO I = 1,I_FINE                                              MLTGRD1A.2123  
                Q_CORRECTION(I,J,K) = Q_COARSE(I,JJ,K)                     MLTGRD1A.2124  
                Q_FINE(I,J,KK) = Q_FINE(I,J,KK) + Q_CORRECTION(I,J,K)      MLTGRD1A.2125  
              END DO                                                       MLTGRD1A.2126  
            END IF                                                         MLTGRD1A.2127  
            IF (J.NE.J_FINE) THEN                                          MLTGRD1A.2128  
              JP = J+1                                                     MLTGRD1A.2129  
              JJP= JP/2                                                    MLTGRD1A.2130  
              DO I = 1,I_FINE                                              MLTGRD1A.2131  
                Q_CORRECTION(I,JP,K) = .5* (Q_COARSE(I,JJP,K) +            MLTGRD1A.2132  
     &                                     Q_COARSE(I,JJP+1,K))            MLTGRD1A.2133  
                Q_FINE(I,JP,KK) = Q_FINE(I,JP,KK) + Q_CORRECTION(I,JP,K)   MLTGRD1A.2134  
              END DO                                                       MLTGRD1A.2135  
            END IF                                                         MLTGRD1A.2136  
          END DO                                                           MLTGRD1A.2137  
        END DO                                                             MLTGRD1A.2138  
      END IF                                                               MLTGRD1A.2139  
                                                                           MLTGRD1A.2140  
C-----------------------------------------------------------------------   MLTGRD1A.2141  
CL    SECTION 2.2 VERTICAL PROLONGATION.                                   MLTGRD1A.2142  
CL                FILLS IN ANY FINE GRID LEVELS NOT ALREADY SET BY         MLTGRD1A.2143  
CL                PROLONGATION ON THE COARSE GRID LEVELS.                  MLTGRD1A.2144  
CL                USES CORRECTION STORED ON EVERY COARSE GRID LEVEL.       MLTGRD1A.2145  
C-----------------------------------------------------------------------   MLTGRD1A.2146  
                                                                           MLTGRD1A.2147  
      IF (MOD(RES_DIRS,2).EQ.1) THEN                                       MLTGRD1A.2148  
CL    FILL IN ALL POINTS ON FINE GRID (I,J) ON FINE GRID K LEVELS.         MLTGRD1A.2149  
CL    USE LINEAR INTERPOLATION BUT WEIGHTED IN CASE NEW FINE LEVEL IS      MLTGRD1A.2150  
CL    NOT MID-WAY BETWEEN COARSE LEVELS.                                   MLTGRD1A.2151  
                                                                           MLTGRD1A.2152  
        IF (KC_BEGIN.NE.1) THEN                                            MLTGRD1A.2153  
          DO J= 1,J_FINE                                                   MLTGRD1A.2154  
            DO I=1,I_FINE                                                  MLTGRD1A.2155  
              Q_CORRECTION(I,J,1) = 0.                                     MLTGRD1A.2156  
            END DO                                                         MLTGRD1A.2157  
          END DO                                                           MLTGRD1A.2158  
        END IF                                                             MLTGRD1A.2159  
                                                                           MLTGRD1A.2160  
        IF (KC_END.NE.K_COARSE) THEN                                       MLTGRD1A.2161  
          DO J= 1,J_FINE                                                   MLTGRD1A.2162  
            DO I=1,I_FINE                                                  MLTGRD1A.2163  
              Q_CORRECTION(I,J,K_COARSE) = 0.                              MLTGRD1A.2164  
            END DO                                                         MLTGRD1A.2165  
          END DO                                                           MLTGRD1A.2166  
        END IF                                                             MLTGRD1A.2167  
                                                                           MLTGRD1A.2168  
        DO K= 2,K_FINE-1,2                                                 MLTGRD1A.2169  
          KK = K/2                                                         MLTGRD1A.2170  
          FRAC_ABOVE = (Z_Q_FINE(K) - Z_Q_FINE(K-1))                       MLTGRD1A.2171  
     &                 /(Z_Q_FINE(K+1)-Z_Q_FINE(K-1))                      MLTGRD1A.2172  
          FRAC_BELOW = (Z_Q_FINE(K+1) - Z_Q_FINE(K))                       MLTGRD1A.2173  
     &                 /(Z_Q_FINE(K+1)-Z_Q_FINE(K-1))                      MLTGRD1A.2174  
C ALL POINTS.                                                              MLTGRD1A.2175  
          DO J = 1,J_FINE                                                  MLTGRD1A.2176  
            IF(.NOT.(J.EQ.(J_FINE+1)/2 .AND. VERSION.EQ.2)) THEN           MLTGRD1A.2177  
              DO I = 1,I_FINE                                              MLTGRD1A.2178  
                Q_FINE(I,J,K) = Q_FINE(I,J,K) + FRAC_ABOVE *               MLTGRD1A.2179  
     &                          Q_CORRECTION(I,J,KK+1) + FRAC_BELOW        MLTGRD1A.2180  
     &                          * Q_CORRECTION(I,J,KK)                     MLTGRD1A.2181  
              END DO                                                       MLTGRD1A.2182  
            END IF                                                         MLTGRD1A.2183  
          END DO                                                           MLTGRD1A.2184  
        END DO                                                             MLTGRD1A.2185  
      END IF                                                               MLTGRD1A.2186  
                                                                           MLTGRD1A.2187  
C-----------------------------------------------------------------------   MLTGRD1A.2188  
CL    SECTION 2.3 LIMITED AREA DIRICHLET BOUNDARY CONDITION ENFORCED.      MLTGRD1A.2189  
CL                USES VALUES WRITTEN OUT IN SECTION 1.1                   MLTGRD1A.2190  
C-----------------------------------------------------------------------   MLTGRD1A.2191  
                                                                           MLTGRD1A.2192  
      IF (VERSION.EQ.4) THEN                                               MLTGRD1A.2193  
CL OVER-WRITE BOUNDARY VALUES ON FINE GRID WITH SAVED ONES                 MLTGRD1A.2194  
        DO K=1,K_FINE                                                      MLTGRD1A.2195  
          IF(I_NT .AND. J_NT) THEN                                         MLTGRD1A.2196  
            DO I=1,I_FINE                                                  MLTGRD1A.2197  
              Q_FINE(I,1,K) = Q_FINE_BOUNDARY(I,K)                         MLTGRD1A.2198  
            END DO                                                         MLTGRD1A.2199  
            II = I_FINE                                                    MLTGRD1A.2200  
            DO J=2,J_FINE-1                                                MLTGRD1A.2201  
              II = II+1                                                    MLTGRD1A.2202  
              Q_FINE(1,J,K) = Q_FINE_BOUNDARY(II,K)                        MLTGRD1A.2203  
              II = II+1                                                    MLTGRD1A.2204  
              Q_FINE(I_FINE,J,K) = Q_FINE_BOUNDARY(II,K)                   MLTGRD1A.2205  
            END DO                                                         MLTGRD1A.2206  
            DO I=1,I_FINE                                                  MLTGRD1A.2207  
              Q_FINE(I,J_FINE,K) = Q_FINE_BOUNDARY(II+I,K)                 MLTGRD1A.2208  
            END DO                                                         MLTGRD1A.2209  
          ELSE IF (I_NT) THEN                                              MLTGRD1A.2210  
            Q_FINE(1,1,K) = Q_FINE_BOUNDARY(1,K)                           MLTGRD1A.2211  
            Q_FINE(I_FINE,1,K) = Q_FINE_BOUNDARY(2,K)                      MLTGRD1A.2212  
          ELSE IF (J_NT) THEN                                              MLTGRD1A.2213  
            Q_FINE(1,1,K) = Q_FINE_BOUNDARY(1,K)                           MLTGRD1A.2214  
            Q_FINE(1,J_FINE,K) = Q_FINE_BOUNDARY(2,K)                      MLTGRD1A.2215  
          END IF                                                           MLTGRD1A.2216  
        END DO                                                             MLTGRD1A.2217  
      END IF                                                               MLTGRD1A.2218  
                                                                           MLTGRD1A.2219  
CL    END OF ROUTINE MG_PROLONG                                            MLTGRD1A.2220  
                                                                           MLTGRD1A.2221  
      RETURN                                                               MLTGRD1A.2222  
      END                                                                  MLTGRD1A.2223  
CLL   SUBROUTINE MG_RESTRICT                                               MLTGRD1A.2224  
CLL                                                                        MLTGRD1A.2225  
CLL   PURPOSE:                                                             MLTGRD1A.2226  
CLL   -------                                                              MLTGRD1A.2227  
CLL   RESTRICTS SOLUTION AND RESIDUAL FROM FINE GRID TO COARSER ONE.       MLTGRD1A.2228  
CLL   IF ON THE FIRST DESCENT OF THE MULTI-GRID ALGORITHM THEN             MLTGRD1A.2229  
CLL   RESTRICTS OTHER FIELDS AS WELL.                                      MLTGRD1A.2230  
CLL                                                                        MLTGRD1A.2231  
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.2232  
CLL                                                                        MLTGRD1A.2233  
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.2234  
CLL VERSION  DATE                                                          MLTGRD1A.2235  
CLL   3.3                                                                  MLTGRD1A.2236  
CLL                                                                        MLTGRD1A.2237  
CLL                                                                        MLTGRD1A.2238  
CLLEND -----------------------------------------------------------------   MLTGRD1A.2239  
                                                                           MLTGRD1A.2240  
C*L ARGUMENT LIST.                                                         MLTGRD1A.2241  
                                                                           MLTGRD1A.2242  
      SUBROUTINE MG_RESTRICT(                                              MLTGRD1A.2243  
     &                       Q_COARSE,Q_FINE,RHS_COARSE,RESID_FINE,        MLTGRD1A.2244  
     &                       A_COARSE,A_FINE,B_COARSE,B_FINE,              MLTGRD1A.2245  
     &                       C1_COARSE,C1_FINE,C2_COARSE,C2_FINE,          MLTGRD1A.2246  
     &                       DEF_COARSE,DEF_FINE,D_COARSE,D_FINE,          MLTGRD1A.2247  
     &                       E_COARSE,E_FINE,F_COARSE,F_FINE,              MLTGRD1A.2248  
     &                       G_COARSE,G_FINE,COS_P_COARSE,COS_P_FINE,      MLTGRD1A.2249  
     &                       SEC_P_COARSE,COS_V_COARSE,COS_V_FINE,         MLTGRD1A.2250  
     &                       Z_Q_COARSE,Z_Q_FINE,                          MLTGRD1A.2251  
     &                       Z_MID_COARSE,Z_MID_FINE,                      MLTGRD1A.2252  
     &                       L_FIRST_DESCENT,                              MLTGRD1A.2253  
     &                       I_COARSE,J_COARSE,K_COARSE,                   MLTGRD1A.2254  
     &                       I_FINE,J_FINE,K_FINE,I_NT,J_NT,K_NT,KREST,    MLTGRD1A.2255  
     &                       EARTH_RADIUS_INVERSE,LATITUDE_STEP_INVERSE,   MLTGRD1A.2256  
     &                       LONGITUDE_STEP_INVERSE,RES_DIRS,VERSION)      MLTGRD1A.2257  
                                                                           MLTGRD1A.2258  
      IMPLICIT NONE                                                        MLTGRD1A.2259  
                                                                           MLTGRD1A.2260  
      LOGICAL                                                              MLTGRD1A.2261  
     &  I_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN I DIRECTION   MLTGRD1A.2262  
     &, J_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN J DIRECTION   MLTGRD1A.2263  
     &, K_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN K DIRECTION   MLTGRD1A.2264  
                                                                           MLTGRD1A.2265  
      INTEGER                                                              MLTGRD1A.2266  
     &  I_COARSE   !IN. NUMBER OF POINTS IN I DIRECTION ON COARSE GRID.    MLTGRD1A.2267  
     &, J_COARSE   !IN. NUMBER OF POINTS IN J DIRECTION ON COARSE GRID.    MLTGRD1A.2268  
     &, K_COARSE   !IN. NUMBER OF POINTS IN K DIRECTION ON COARSE GRID.    MLTGRD1A.2269  
     &, I_FINE     !IN. NUMBER OF POINTS IN I DIRECTION ON FINE GRID.      MLTGRD1A.2270  
     &, J_FINE     !IN. NUMBER OF POINTS IN J DIRECTION ON FINE GRID.      MLTGRD1A.2271  
     &, K_FINE     !IN. NUMBER OF POINTS IN K DIRECTION ON FINE GRID.      MLTGRD1A.2272  
     &, KREST      !IN. KIND OF RESTRICTION USED.                          MLTGRD1A.2273  
     &, RES_DIRS   !IN. DIRECTIONS TO RESTRICT IN.                         MLTGRD1A.2274  
     &, VERSION    !IN. VERSION OF SCHEME.                                 MLTGRD1A.2275  
                                                                           MLTGRD1A.2276  
      REAL                                                                 MLTGRD1A.2277  
     &  EARTH_RADIUS_INVERSE    !IN. 1/EARTH RADIUS                        MLTGRD1A.2278  
     &, LATITUDE_STEP_INVERSE   !IN. 1/LATITUDE STEP LENGTH IN RADIANS     MLTGRD1A.2279  
     &                          !    ON COARSE GRID.                       MLTGRD1A.2280  
     &, LONGITUDE_STEP_INVERSE  !IN. 1/LONGITUDE STEP LENGTH IN RADIANS    MLTGRD1A.2281  
     &                          !    ON COARSE GRID.                       MLTGRD1A.2282  
                                                                           MLTGRD1A.2283  
      LOGICAL                                                              MLTGRD1A.2284  
     &  L_FIRST_DESCENT !IN. IF TRUE THEN ALL FIELDS NEED RESTRICTING.     MLTGRD1A.2285  
                                                                           MLTGRD1A.2286  
      REAL                                                                 MLTGRD1A.2287  
     &  A_FINE(I_FINE,J_FINE,K_FINE)    !IN. COEFFICIENT                   MLTGRD1A.2288  
     &, B_FINE(I_FINE,J_FINE,K_FINE)    !IN. COEFFICIENT                   MLTGRD1A.2289  
     &, C1_FINE(I_FINE,J_FINE,K_FINE)   !IN. COEFFICIENT                   MLTGRD1A.2290  
     &, C2_FINE(I_FINE,J_FINE,K_FINE)   !IN. COEFFICIENT                   MLTGRD1A.2291  
     &, DEF_FINE(I_FINE,J_FINE,K_FINE)  !IN. COEFFICIENT                   MLTGRD1A.2292  
     &, D_FINE(I_FINE,J_FINE,K_FINE)    !IN. COEFFICIENT                   MLTGRD1A.2293  
     &, E_FINE(I_FINE,J_FINE,K_FINE)    !IN. COEFFICIENT                   MLTGRD1A.2294  
     &, F_FINE(I_FINE,J_FINE,K_FINE)    !IN. COEFFICIENT                   MLTGRD1A.2295  
     &, G_FINE(I_FINE,J_FINE,K_FINE)    !IN. COEFFICIENT                   MLTGRD1A.2296  
     &, COS_P_FINE(I_FINE,J_FINE)       !IN. COSINE OF LATITUDE            MLTGRD1A.2297  
     &, COS_V_FINE(I_FINE,J_FINE-1)     !IN. COSINE OF LATITUDE            MLTGRD1A.2298  
     &, Q_FINE(I_FINE,J_FINE,K_FINE)    !IN. SOLUTION                      MLTGRD1A.2299  
     &, RESID_FINE(I_FINE,J_FINE,K_FINE)!IN. RESIDUAL                      MLTGRD1A.2300  
     &, Z_Q_COARSE(K_COARSE)            !IN. Z AT Q COARSE POINTS.         MLTGRD1A.2301  
     &, Z_Q_FINE(K_FINE)                !IN. Z AT Q FINE POINTS.           MLTGRD1A.2302  
     &, Z_MID_COARSE(0:K_COARSE)        !IN. Z AT MID Q COARSE POINTS.     MLTGRD1A.2303  
     &, Z_MID_FINE(0:K_FINE)            !IN. Z AT MID Q FINE POINTS.       MLTGRD1A.2304  
                                                                           MLTGRD1A.2305  
      REAL                                                                 MLTGRD1A.2306  
     &  RHS_COARSE(I_COARSE,J_COARSE,K_COARSE) !OUT. RIGHT-HAND-SIDE       MLTGRD1A.2307  
     &, Q_COARSE(I_COARSE,J_COARSE,K_COARSE)   !OUT. SOLUTION.             MLTGRD1A.2308  
                                                                           MLTGRD1A.2309  
CL    FOLLOWING ARE PASSED OUT ONLY IF L_FIRST_DESCENT=.TRUE. AS           MLTGRD1A.2310  
CL    THEY HAVE ALREADY BEEN SET IF IT IS .FALSE.                          MLTGRD1A.2311  
                                                                           MLTGRD1A.2312  
      REAL                                                                 MLTGRD1A.2313  
     &  COS_P_COARSE(I_COARSE,J_COARSE)   !OUT. COSINE OF LATITUDE         MLTGRD1A.2314  
     &, SEC_P_COARSE(I_COARSE,J_COARSE)   !OUT. 1./COSINE OF LATITUDE      MLTGRD1A.2315  
     &, COS_V_COARSE(I_COARSE,J_COARSE-1) !OUT. COSINE OF LATITUDE AT      MLTGRD1A.2316  
     &                                    !     MID-POINTS.                MLTGRD1A.2317  
     &, A_COARSE(I_COARSE,J_COARSE,K_COARSE)   !OUT. COEFFICIENT           MLTGRD1A.2318  
     &, B_COARSE(I_COARSE,J_COARSE,K_COARSE)   !OUT.    "                  MLTGRD1A.2319  
     &, C1_COARSE(I_COARSE,J_COARSE,K_COARSE)  !OUT.    "                  MLTGRD1A.2320  
     &, C2_COARSE(I_COARSE,J_COARSE,K_COARSE)  !OUT.    "                  MLTGRD1A.2321  
     &, DEF_COARSE(I_COARSE,J_COARSE,K_COARSE) !OUT.    "                  MLTGRD1A.2322  
     &, D_COARSE(I_COARSE,J_COARSE,K_COARSE)   !OUT.    "                  MLTGRD1A.2323  
     &, E_COARSE(I_COARSE,J_COARSE,K_COARSE)   !OUT.    "                  MLTGRD1A.2324  
     &, F_COARSE(I_COARSE,J_COARSE,K_COARSE)   !OUT.    "                  MLTGRD1A.2325  
     &, G_COARSE(I_COARSE,J_COARSE,K_COARSE)   !OUT.    "                  MLTGRD1A.2326  
C*----------------------------------------------------------------------   MLTGRD1A.2327  
                                                                           MLTGRD1A.2328  
C*L  1  LOCAL WORK ARRAYS REQUIRED.                                        MLTGRD1A.2329  
                                                                           MLTGRD1A.2330  
      REAL                                                                 MLTGRD1A.2331  
     &  LEVEL_INCS(I_COARSE,J_COARSE,K_FINE)                               MLTGRD1A.2332  
                                                                           MLTGRD1A.2333  
C*----------------------------------------------------------------------   MLTGRD1A.2334  
C LOCAL VARIABLES.                                                         MLTGRD1A.2335  
                                                                           MLTGRD1A.2336  
      INTEGER                                                              MLTGRD1A.2337  
     &  I,J,K                 ! LOOP COUNTERS                              MLTGRD1A.2338  
     &, II,JJ,KK,JB,JE                                                     MLTGRD1A.2339  
                                                                           MLTGRD1A.2340  
      REAL                                                                 MLTGRD1A.2341  
     &  SCALE                                                              MLTGRD1A.2342  
     &, SCALAR1                                                            MLTGRD1A.2343  
     &, SCALAR2                                                            MLTGRD1A.2344  
     &, SCALAR3                                                            MLTGRD1A.2345  
     &, SCALAR4                                                            MLTGRD1A.2346  
     &, FRAC_ABOVE                                                         MLTGRD1A.2347  
     &, FRAC_BELOW                                                         MLTGRD1A.2348  
                                                                           MLTGRD1A.2349  
      LOGICAL                                                              MLTGRD1A.2350  
     &  J_RES                                                              MLTGRD1A.2351  
                                                                           MLTGRD1A.2352  
C*L   EXTERNAL ROUTINES CALLED.                                            MLTGRD1A.2353  
      EXTERNAL MG_LEFT_HAND_SIDE                                           MLTGRD1A.2354  
                                                                           MLTGRD1A.2355  
C*----------------------------------------------------------------------   MLTGRD1A.2356  
                                                                           MLTGRD1A.2357  
CL----------------------------------------------------------------------   MLTGRD1A.2358  
CL    SECTION 1. RESTRICTION OF COEFFICIENTS AND TRIGONOMETRICAL TERMS     MLTGRD1A.2359  
CL               IF REQUIRED.                                              MLTGRD1A.2360  
CL----------------------------------------------------------------------   MLTGRD1A.2361  
                                                                           MLTGRD1A.2362  
      J_RES = RES_DIRS.GT.5 .OR. RES_DIRS.EQ.2 .OR. RES_DIRS.EQ.3          MLTGRD1A.2363  
      IF(.NOT. J_NT) THEN                                                  MLTGRD1A.2364  
        JB = 1                                                             MLTGRD1A.2365  
        JE = 1                                                             MLTGRD1A.2366  
      ELSE IF(VERSION.LT.3) THEN                                           MLTGRD1A.2367  
        JB = 2                                                             MLTGRD1A.2368  
        JE = J_COARSE - 1                                                  MLTGRD1A.2369  
      ELSE                                                                 MLTGRD1A.2370  
        JB = 1                                                             MLTGRD1A.2371  
        JE = J_COARSE                                                      MLTGRD1A.2372  
      END IF                                                               MLTGRD1A.2373  
                                                                           MLTGRD1A.2374  
      IF (L_FIRST_DESCENT) THEN                                            MLTGRD1A.2375  
                                                                           MLTGRD1A.2376  
C ----------------------------------------------------------------------   MLTGRD1A.2377  
CL    SECTION 1.1 TRIGONOMETRICAL VALUES.                                  MLTGRD1A.2378  
C ----------------------------------------------------------------------   MLTGRD1A.2379  
                                                                           MLTGRD1A.2380  
        IF(RES_DIRS.GE.6) THEN                                             MLTGRD1A.2381  
CL    RESTRICT IN BOTH I & J DIRECTIONS.                                   MLTGRD1A.2382  
                                                                           MLTGRD1A.2383  
CL    COSINE AND SECANT AT Q POINTS.                                       MLTGRD1A.2384  
                                                                           MLTGRD1A.2385  
          DO J = JB,JE                                                     MLTGRD1A.2386  
            JJ = J*2-1                                                     MLTGRD1A.2387  
            DO I = 1,I_COARSE                                              MLTGRD1A.2388  
              II = I*2-1                                                   MLTGRD1A.2389  
              COS_P_COARSE(I,J) = COS_P_FINE(II,JJ)                        MLTGRD1A.2390  
              SEC_P_COARSE(I,J) = 1./COS_P_COARSE(I,J)                     MLTGRD1A.2391  
            END DO                                                         MLTGRD1A.2392  
          END DO                                                           MLTGRD1A.2393  
                                                                           MLTGRD1A.2394  
          IF(VERSION.LT.3) THEN                                            MLTGRD1A.2395  
            DO I = 1,I_COARSE                                              MLTGRD1A.2396  
              COS_P_COARSE(I,1) = COS_P_FINE(I,1) * 2.                     MLTGRD1A.2397  
              SEC_P_COARSE(I,1) = 1./COS_P_COARSE(I,1)                     MLTGRD1A.2398  
              COS_P_COARSE(I,J_COARSE) = COS_P_FINE(I,J_FINE) * 2.         MLTGRD1A.2399  
              SEC_P_COARSE(I,J_COARSE) = 1./COS_P_COARSE(I,J_COARSE)       MLTGRD1A.2400  
            END DO                                                         MLTGRD1A.2401  
          END IF                                                           MLTGRD1A.2402  
                                                                           MLTGRD1A.2403  
CL    COSINE AT B POINTS.                                                  MLTGRD1A.2404  
                                                                           MLTGRD1A.2405  
          DO J = 1,J_COARSE-1                                              MLTGRD1A.2406  
            JJ = 2*J                                                       MLTGRD1A.2407  
            DO I = 1,I_COARSE                                              MLTGRD1A.2408  
              II = 2*I-1                                                   MLTGRD1A.2409  
              COS_V_COARSE(I,J) = COS_P_FINE(II,JJ)                        MLTGRD1A.2410  
            END DO                                                         MLTGRD1A.2411  
          END DO                                                           MLTGRD1A.2412  
                                                                           MLTGRD1A.2413  
        ELSE IF (RES_DIRS.GE.4) THEN                                       MLTGRD1A.2414  
CL    RESTRICT IN I DIRECTION ONLY.                                        MLTGRD1A.2415  
                                                                           MLTGRD1A.2416  
CL    COSINE AND SECANT AT Q POINTS.                                       MLTGRD1A.2417  
                                                                           MLTGRD1A.2418  
          DO J = 1,J_COARSE                                                MLTGRD1A.2419  
            DO I = 1,I_COARSE                                              MLTGRD1A.2420  
              II = I*2-1                                                   MLTGRD1A.2421  
              COS_P_COARSE(I,J) = COS_P_FINE(II,J)                         MLTGRD1A.2422  
              SEC_P_COARSE(I,J) = 1./COS_P_COARSE(I,J)                     MLTGRD1A.2423  
            END DO                                                         MLTGRD1A.2424  
          END DO                                                           MLTGRD1A.2425  
                                                                           MLTGRD1A.2426  
CL    COSINE AT B POINTS.                                                  MLTGRD1A.2427  
                                                                           MLTGRD1A.2428  
          DO J = 1,J_COARSE-1                                              MLTGRD1A.2429  
            DO I = 1,I_COARSE                                              MLTGRD1A.2430  
              II = 2*I-1                                                   MLTGRD1A.2431  
              COS_V_COARSE(I,J) = COS_V_FINE(II,J)                         MLTGRD1A.2432  
           END DO                                                          MLTGRD1A.2433  
          END DO                                                           MLTGRD1A.2434  
                                                                           MLTGRD1A.2435  
        ELSE IF (RES_DIRS.GE.2) THEN                                       MLTGRD1A.2436  
CL    RESTRICT IN J DIRECTION ONLY.                                        MLTGRD1A.2437  
                                                                           MLTGRD1A.2438  
CL    COSINE AND SECANT AT Q POINTS.                                       MLTGRD1A.2439  
                                                                           MLTGRD1A.2440  
          DO J = JB,JE                                                     MLTGRD1A.2441  
            JJ = J*2-1                                                     MLTGRD1A.2442  
            DO I = 1,I_COARSE                                              MLTGRD1A.2443  
              COS_P_COARSE(I,J) = COS_P_FINE(I,JJ)                         MLTGRD1A.2444  
              SEC_P_COARSE(I,J) = 1./COS_P_COARSE(I,J)                     MLTGRD1A.2445  
            END DO                                                         MLTGRD1A.2446  
          END DO                                                           MLTGRD1A.2447  
                                                                           MLTGRD1A.2448  
          IF(VERSION.LT.3) THEN                                            MLTGRD1A.2449  
            DO I = 1,I_COARSE                                              MLTGRD1A.2450  
              COS_P_COARSE(I,1) = COS_P_FINE(I,1) * 2.                     MLTGRD1A.2451  
              SEC_P_COARSE(I,1) = 1./COS_P_COARSE(I,1)                     MLTGRD1A.2452  
              COS_P_COARSE(I,J_COARSE) = COS_P_FINE(I,J_FINE) * 2.         MLTGRD1A.2453  
              SEC_P_COARSE(I,J_COARSE) = 1./COS_P_COARSE(I,J_COARSE)       MLTGRD1A.2454  
            END DO                                                         MLTGRD1A.2455  
          END IF                                                           MLTGRD1A.2456  
                                                                           MLTGRD1A.2457  
CL    COSINE AT B POINTS.                                                  MLTGRD1A.2458  
                                                                           MLTGRD1A.2459  
          DO J = 1,J_COARSE-1                                              MLTGRD1A.2460  
            JJ = 2*J                                                       MLTGRD1A.2461  
            DO I = 1,I_COARSE                                              MLTGRD1A.2462  
              COS_V_COARSE(I,J) = COS_P_FINE(I,JJ)                         MLTGRD1A.2463  
            END DO                                                         MLTGRD1A.2464  
          END DO                                                           MLTGRD1A.2465  
                                                                           MLTGRD1A.2466  
        ELSE                                                               MLTGRD1A.2467  
CL    RESTRICT IN K DIRECTION ONLY, NO CHANGE TO TRIG FUNCTIONS.           MLTGRD1A.2468  
                                                                           MLTGRD1A.2469  
CL    COSINE AND SECANT AT Q POINTS.                                       MLTGRD1A.2470  
                                                                           MLTGRD1A.2471  
          DO J=1,J_COARSE                                                  MLTGRD1A.2472  
            DO I=1,I_COARSE                                                MLTGRD1A.2473  
              COS_P_COARSE(I,J) = COS_P_FINE(I,J)                          MLTGRD1A.2474  
              SEC_P_COARSE(I,J) = 1./COS_P_COARSE(I,J)                     MLTGRD1A.2475  
            END DO                                                         MLTGRD1A.2476  
          END DO                                                           MLTGRD1A.2477  
                                                                           MLTGRD1A.2478  
CL    COSINE AT B POINTS.                                                  MLTGRD1A.2479  
                                                                           MLTGRD1A.2480  
          DO J=1,J_COARSE-1                                                MLTGRD1A.2481  
            DO I=1,I_COARSE                                                MLTGRD1A.2482  
              COS_V_COARSE(I,J) = COS_V_FINE(I,J)                          MLTGRD1A.2483  
            END DO                                                         MLTGRD1A.2484  
          END DO                                                           MLTGRD1A.2485  
                                                                           MLTGRD1A.2486  
        END IF                                                             MLTGRD1A.2487  
                                                                           MLTGRD1A.2488  
C ----------------------------------------------------------------------   MLTGRD1A.2489  
CL    SECTION 1.2 COEFFICIENTS.                                            MLTGRD1A.2490  
C ----------------------------------------------------------------------   MLTGRD1A.2491  
                                                                           MLTGRD1A.2492  
C ----------------------------------------------------------------------   MLTGRD1A.2493  
CL    SECTION 1.2.1 COEFFICIENTS HELD AT Q LEVELS.                         MLTGRD1A.2494  
CL                  NAMELY A,B,C2,DEF,D,E,G.                               MLTGRD1A.2495  
C ----------------------------------------------------------------------   MLTGRD1A.2496  
                                                                           MLTGRD1A.2497  
        IF(RES_DIRS.GT.5) THEN                                             MLTGRD1A.2498  
CL    RESTRICT IN I & J DIRECTIONS, AND POSSIBLY K.                        MLTGRD1A.2499  
          DO K=1,K_COARSE                                                  MLTGRD1A.2500  
            IF(RES_DIRS.EQ.7) THEN                                         MLTGRD1A.2501  
              KK = 2*K-1                                                   MLTGRD1A.2502  
            ELSE                                                           MLTGRD1A.2503  
              KK = K                                                       MLTGRD1A.2504  
            END IF                                                         MLTGRD1A.2505  
                                                                           MLTGRD1A.2506  
CL    A & D COEFFICIENTS.                                                  MLTGRD1A.2507  
            DO J= JB,JE                                                    MLTGRD1A.2508  
              JJ=2*J-1                                                     MLTGRD1A.2509  
              DO I= 1,I_COARSE-1                                           MLTGRD1A.2510  
                II=2*I-1                                                   MLTGRD1A.2511  
                A_COARSE(I,J,K) = 0.5*(A_FINE(II,JJ,KK)+                   MLTGRD1A.2512  
     &                                 A_FINE(II+1,JJ,KK))                 MLTGRD1A.2513  
                D_COARSE(I,J,K) = 0.5*(D_FINE(II,JJ,KK)+                   MLTGRD1A.2514  
     &                                 D_FINE(II+1,JJ,KK))                 MLTGRD1A.2515  
              END DO                                                       MLTGRD1A.2516  
C SET END POINT ON EACH ROW.                                               MLTGRD1A.2517  
              IF (VERSION.LT.3) THEN                                       MLTGRD1A.2518  
C GLOBAL                                                                   MLTGRD1A.2519  
                II = 2*I_COARSE                                            MLTGRD1A.2520  
                A_COARSE(I_COARSE,J,K) =  0.5*(A_FINE(II,JJ,KK)+           MLTGRD1A.2521  
     &                                         A_FINE(II-1,JJ,KK))         MLTGRD1A.2522  
                D_COARSE(I_COARSE,J,K) =  0.5*(D_FINE(II,JJ,KK)+           MLTGRD1A.2523  
     &                                         D_FINE(II-1,JJ,KK))         MLTGRD1A.2524  
              ELSE                                                         MLTGRD1A.2525  
C LIMITED AREA COEFF NOT USED.                                             MLTGRD1A.2526  
                A_COARSE(I_COARSE,J,K) = 0.                                MLTGRD1A.2527  
                D_COARSE(I_COARSE,J,K) = 0.                                MLTGRD1A.2528  
              END IF                                                       MLTGRD1A.2529  
            END DO                                                         MLTGRD1A.2530  
                                                                           MLTGRD1A.2531  
C BOUNDARIES.                                                              MLTGRD1A.2532  
            IF (VERSION.LT.3 .AND. J_NT) THEN                              MLTGRD1A.2533  
C GLOBAL. SET POLAR VALUES.                                                MLTGRD1A.2534  
              DO I= 1,I_COARSE                                             MLTGRD1A.2535  
                A_COARSE(I,1,K) = A_FINE(I,1,KK)                           MLTGRD1A.2536  
                A_COARSE(I,J_COARSE,K) = A_FINE(I,J_FINE,KK)               MLTGRD1A.2537  
                D_COARSE(I,1,K) = D_FINE(I,1,KK)                           MLTGRD1A.2538  
                D_COARSE(I,J_COARSE,K) = D_FINE(I,J_FINE,KK)               MLTGRD1A.2539  
              END DO                                                       MLTGRD1A.2540  
            END IF                                                         MLTGRD1A.2541  
                                                                           MLTGRD1A.2542  
CL    B & E COEFFICIENTS.                                                  MLTGRD1A.2543  
                                                                           MLTGRD1A.2544  
            DO J= 1,J_COARSE-1                                             MLTGRD1A.2545  
              JJ=2*J-1                                                     MLTGRD1A.2546  
              DO I= 1,I_COARSE                                             MLTGRD1A.2547  
                II=2*I-1                                                   MLTGRD1A.2548  
                B_COARSE(I,J,K) = 0.5*(B_FINE(II,JJ,KK) +                  MLTGRD1A.2549  
     &                                 B_FINE(II,JJ+1,KK))                 MLTGRD1A.2550  
                E_COARSE(I,J,K) = 0.5*(E_FINE(II,JJ,KK) +                  MLTGRD1A.2551  
     &                                 E_FINE(II,JJ+1,KK))                 MLTGRD1A.2552  
              END DO                                                       MLTGRD1A.2553  
            END DO                                                         MLTGRD1A.2554  
                                                                           MLTGRD1A.2555  
CL    G,C2 AND DEF  COEFFICIENTS.                                          MLTGRD1A.2556  
                                                                           MLTGRD1A.2557  
            DO J= 1,J_COARSE                                               MLTGRD1A.2558  
              JJ=2*J-1                                                     MLTGRD1A.2559  
              DO I= 1,I_COARSE                                             MLTGRD1A.2560  
                II=2*I-1                                                   MLTGRD1A.2561  
                C2_COARSE(I,J,K) = C2_FINE(II,JJ,KK)                       MLTGRD1A.2562  
                DEF_COARSE(I,J,K) = DEF_FINE(II,JJ,KK)                     MLTGRD1A.2563  
                G_COARSE(I,J,K) = G_FINE(II,JJ,KK)                         MLTGRD1A.2564  
              END DO                                                       MLTGRD1A.2565  
            END DO                                                         MLTGRD1A.2566  
                                                                           MLTGRD1A.2567  
          END DO                                                           MLTGRD1A.2568  
                                                                           MLTGRD1A.2569  
        ELSE IF (RES_DIRS.GT.3) THEN                                       MLTGRD1A.2570  
C I RESTRICTION, AND POSSIBLY K.                                           MLTGRD1A.2571  
                                                                           MLTGRD1A.2572  
          DO K=1,K_COARSE                                                  MLTGRD1A.2573  
            IF(RES_DIRS.EQ.5) THEN                                         MLTGRD1A.2574  
              KK = 2*K-1                                                   MLTGRD1A.2575  
            ELSE                                                           MLTGRD1A.2576  
              KK = K                                                       MLTGRD1A.2577  
            END IF                                                         MLTGRD1A.2578  
                                                                           MLTGRD1A.2579  
CL    A & D COEFFICIENTS.                                                  MLTGRD1A.2580  
            DO J= JB,JE                                                    MLTGRD1A.2581  
              DO I= 1,I_COARSE-1                                           MLTGRD1A.2582  
                II=2*I-1                                                   MLTGRD1A.2583  
                A_COARSE(I,J,K) = 0.5*(A_FINE(II,J,KK)+                    MLTGRD1A.2584  
     &                                 A_FINE(II+1,J,KK))                  MLTGRD1A.2585  
                D_COARSE(I,J,K) = 0.5*(D_FINE(II,J,KK)+                    MLTGRD1A.2586  
     &                                 D_FINE(II+1,J,KK))                  MLTGRD1A.2587  
              END DO                                                       MLTGRD1A.2588  
C SET END POINT ON EACH ROW.                                               MLTGRD1A.2589  
              IF (VERSION.LT.3) THEN                                       MLTGRD1A.2590  
C GLOBAL                                                                   MLTGRD1A.2591  
                II = 2*I_COARSE                                            MLTGRD1A.2592  
                A_COARSE(I_COARSE,J,K) =  0.5*(A_FINE(II,J,KK)+            MLTGRD1A.2593  
     &                                         A_FINE(II-1,J,KK))          MLTGRD1A.2594  
                D_COARSE(I_COARSE,J,K) =  0.5*(D_FINE(II,J,KK)+            MLTGRD1A.2595  
     &                                         D_FINE(II-1,J,KK))          MLTGRD1A.2596  
              ELSE                                                         MLTGRD1A.2597  
C LIMITED AREA COEFF NOT USED.                                             MLTGRD1A.2598  
                A_COARSE(I_COARSE,J,K) = 0.                                MLTGRD1A.2599  
                D_COARSE(I_COARSE,J,K) = 0.                                MLTGRD1A.2600  
              END IF                                                       MLTGRD1A.2601  
            END DO                                                         MLTGRD1A.2602  
                                                                           MLTGRD1A.2603  
C BOUNDARIES.                                                              MLTGRD1A.2604  
            IF (VERSION.LT.3 .AND. J_NT) THEN                              MLTGRD1A.2605  
C GLOBAL. SET POLAR VALUES.                                                MLTGRD1A.2606  
              DO I= 1,I_COARSE                                             MLTGRD1A.2607  
                A_COARSE(I,1,K) = A_FINE(I,1,KK)                           MLTGRD1A.2608  
                A_COARSE(I,J_COARSE,K) = A_FINE(I,J_FINE,KK)               MLTGRD1A.2609  
                D_COARSE(I,1,K) = D_FINE(I,1,KK)                           MLTGRD1A.2610  
                D_COARSE(I,J_COARSE,K) = D_FINE(I,J_FINE,KK)               MLTGRD1A.2611  
              END DO                                                       MLTGRD1A.2612  
            END IF                                                         MLTGRD1A.2613  
                                                                           MLTGRD1A.2614  
CL    B & E COEFFICIENTS.                                                  MLTGRD1A.2615  
                                                                           MLTGRD1A.2616  
            DO J= 1,J_COARSE-1                                             MLTGRD1A.2617  
              DO I= 1,I_COARSE                                             MLTGRD1A.2618  
                II=2*I-1                                                   MLTGRD1A.2619  
                B_COARSE(I,J,K) = B_FINE(II,J,KK)                          MLTGRD1A.2620  
                E_COARSE(I,J,K) = E_FINE(II,J,KK)                          MLTGRD1A.2621  
              END DO                                                       MLTGRD1A.2622  
            END DO                                                         MLTGRD1A.2623  
                                                                           MLTGRD1A.2624  
CL    C2,DEF & G COEFFICIENT.                                              MLTGRD1A.2625  
                                                                           MLTGRD1A.2626  
            DO J= 1,J_COARSE                                               MLTGRD1A.2627  
              DO I= 1,I_COARSE                                             MLTGRD1A.2628  
                II=2*I-1                                                   MLTGRD1A.2629  
                C2_COARSE(I,J,K) = C2_FINE(II,J,KK)                        MLTGRD1A.2630  
                DEF_COARSE(I,J,K) = DEF_FINE(II,J,KK)                      MLTGRD1A.2631  
                G_COARSE(I,J,K) = G_FINE(II,J,KK)                          MLTGRD1A.2632  
              END DO                                                       MLTGRD1A.2633  
            END DO                                                         MLTGRD1A.2634  
                                                                           MLTGRD1A.2635  
          END DO                                                           MLTGRD1A.2636  
                                                                           MLTGRD1A.2637  
        ELSE IF (RES_DIRS.GE.2) THEN                                       MLTGRD1A.2638  
CL J RESTRICTION, AND POSSIBLY K.                                          MLTGRD1A.2639  
                                                                           MLTGRD1A.2640  
          DO K=1,K_COARSE                                                  MLTGRD1A.2641  
            IF(RES_DIRS.EQ.3) THEN                                         MLTGRD1A.2642  
              KK = 2*K-1                                                   MLTGRD1A.2643  
            ELSE                                                           MLTGRD1A.2644  
              KK = K                                                       MLTGRD1A.2645  
            END IF                                                         MLTGRD1A.2646  
                                                                           MLTGRD1A.2647  
CL    A & D COEFFICIENTS.                                                  MLTGRD1A.2648  
            DO J= 2,J_COARSE-1                                             MLTGRD1A.2649  
              JJ=2*J-1                                                     MLTGRD1A.2650  
              DO I= 1,I_COARSE                                             MLTGRD1A.2651  
                A_COARSE(I,J,K) = A_FINE(I,JJ,KK)                          MLTGRD1A.2652  
                D_COARSE(I,J,K) = D_FINE(I,JJ,KK)                          MLTGRD1A.2653  
              END DO                                                       MLTGRD1A.2654  
            END DO                                                         MLTGRD1A.2655  
                                                                           MLTGRD1A.2656  
C BOUNDARIES.                                                              MLTGRD1A.2657  
            DO I= 1,I_COARSE                                               MLTGRD1A.2658  
              A_COARSE(I,1,K) = A_FINE(I,1,KK)                             MLTGRD1A.2659  
              A_COARSE(I,J_COARSE,K) = A_FINE(I,J_FINE,KK)                 MLTGRD1A.2660  
              D_COARSE(I,1,K) = D_FINE(I,1,KK)                             MLTGRD1A.2661  
              D_COARSE(I,J_COARSE,K) = D_FINE(I,J_FINE,KK)                 MLTGRD1A.2662  
            END DO                                                         MLTGRD1A.2663  
                                                                           MLTGRD1A.2664  
CL    B & E COEFFICIENTS.                                                  MLTGRD1A.2665  
                                                                           MLTGRD1A.2666  
            DO J= 1,J_COARSE-1                                             MLTGRD1A.2667  
              JJ=2*J-1                                                     MLTGRD1A.2668  
              DO I= 1,I_COARSE                                             MLTGRD1A.2669  
                B_COARSE(I,J,K) = 0.5*(B_FINE(I,JJ,KK) +                   MLTGRD1A.2670  
     &                                 B_FINE(I,JJ+1,KK))                  MLTGRD1A.2671  
                E_COARSE(I,J,K) = 0.5*(E_FINE(I,JJ,KK) +                   MLTGRD1A.2672  
     &                                 E_FINE(I,JJ+1,KK))                  MLTGRD1A.2673  
              END DO                                                       MLTGRD1A.2674  
            END DO                                                         MLTGRD1A.2675  
                                                                           MLTGRD1A.2676  
CL    G,C2 AND DEF  COEFFICIENTS.                                          MLTGRD1A.2677  
                                                                           MLTGRD1A.2678  
            DO J= 1,J_COARSE                                               MLTGRD1A.2679  
              JJ=2*J-1                                                     MLTGRD1A.2680  
              DO I= 1,I_COARSE                                             MLTGRD1A.2681  
                C2_COARSE(I,J,K) = C2_FINE(I,JJ,KK)                        MLTGRD1A.2682  
                DEF_COARSE(I,J,K) = DEF_FINE(I,JJ,KK)                      MLTGRD1A.2683  
                G_COARSE(I,J,K) = G_FINE(I,JJ,KK)                          MLTGRD1A.2684  
              END DO                                                       MLTGRD1A.2685  
            END DO                                                         MLTGRD1A.2686  
                                                                           MLTGRD1A.2687  
          END DO                                                           MLTGRD1A.2688  
                                                                           MLTGRD1A.2689  
        ELSE                                                               MLTGRD1A.2690  
CL K RESTRICTION ONLY                                                      MLTGRD1A.2691  
          DO K=1,K_COARSE                                                  MLTGRD1A.2692  
            KK = 2*K-1                                                     MLTGRD1A.2693  
                                                                           MLTGRD1A.2694  
CL    A & D COEFFICIENTS.                                                  MLTGRD1A.2695  
            DO J= 1,J_COARSE                                               MLTGRD1A.2696  
              DO I= 1,I_COARSE                                             MLTGRD1A.2697  
                A_COARSE(I,J,K) = A_FINE(I,J,KK)                           MLTGRD1A.2698  
                D_COARSE(I,J,K) = D_FINE(I,J,KK)                           MLTGRD1A.2699  
              END DO                                                       MLTGRD1A.2700  
            END DO                                                         MLTGRD1A.2701  
                                                                           MLTGRD1A.2702  
CL    B & E COEFFICIENTS.                                                  MLTGRD1A.2703  
                                                                           MLTGRD1A.2704  
            DO J= 1,J_COARSE-1                                             MLTGRD1A.2705  
              DO I= 1,I_COARSE                                             MLTGRD1A.2706  
                B_COARSE(I,J,K) = B_FINE(I,J,KK)                           MLTGRD1A.2707  
                E_COARSE(I,J,K) = E_FINE(I,J,KK)                           MLTGRD1A.2708  
              END DO                                                       MLTGRD1A.2709  
            END DO                                                         MLTGRD1A.2710  
                                                                           MLTGRD1A.2711  
CL    G,C2 AND DEF  COEFFICIENTS.                                          MLTGRD1A.2712  
                                                                           MLTGRD1A.2713  
            DO J= 1,J_COARSE                                               MLTGRD1A.2714  
              DO I= 1,I_COARSE                                             MLTGRD1A.2715  
                C2_COARSE(I,J,K) = C2_FINE(I,J,KK)                         MLTGRD1A.2716  
                DEF_COARSE(I,J,K) = DEF_FINE(I,J,KK)                       MLTGRD1A.2717  
                G_COARSE(I,J,K) = G_FINE(I,J,KK)                           MLTGRD1A.2718  
              END DO                                                       MLTGRD1A.2719  
            END DO                                                         MLTGRD1A.2720  
                                                                           MLTGRD1A.2721  
          END DO                                                           MLTGRD1A.2722  
                                                                           MLTGRD1A.2723  
        END IF                                                             MLTGRD1A.2724  
                                                                           MLTGRD1A.2725  
C ----------------------------------------------------------------------   MLTGRD1A.2726  
CL    SECTION 1.2.1 COEFFICIENTS HELD BETWEEN Q LEVELS.                    MLTGRD1A.2727  
CL                  NAMELY C1 AND F.                                       MLTGRD1A.2728  
C ----------------------------------------------------------------------   MLTGRD1A.2729  
                                                                           MLTGRD1A.2730  
        IF (MOD(RES_DIRS,2).EQ.1) THEN                                     MLTGRD1A.2731  
          DO K=1,K_COARSE-1                                                MLTGRD1A.2732  
            KK = 2*K-1                                                     MLTGRD1A.2733  
            FRAC_ABOVE = (Z_MID_COARSE(K)-Z_MID_FINE(KK))/                 MLTGRD1A.2734  
     &                   (Z_MID_FINE(KK+1)-Z_MID_FINE(KK))                 MLTGRD1A.2735  
            FRAC_BELOW = (Z_MID_FINE(KK+1)-Z_MID_COARSE(K))/               MLTGRD1A.2736  
     &                   (Z_MID_FINE(KK+1)-Z_MID_FINE(KK))                 MLTGRD1A.2737  
            DO J= 1,J_COARSE                                               MLTGRD1A.2738  
              IF (J_RES) THEN                                              MLTGRD1A.2739  
                JJ=2*J-1                                                   MLTGRD1A.2740  
              ELSE                                                         MLTGRD1A.2741  
                JJ = J                                                     MLTGRD1A.2742  
              END IF                                                       MLTGRD1A.2743  
              IF(RES_DIRS.GT.3) THEN                                       MLTGRD1A.2744  
                DO I= 1,I_COARSE                                           MLTGRD1A.2745  
                  II=2*I-1                                                 MLTGRD1A.2746  
                  C1_COARSE(I,J,K) = FRAC_ABOVE*C1_FINE(II,JJ,KK+1) +      MLTGRD1A.2747  
     &                               FRAC_BELOW*C1_FINE(II,JJ,KK)          MLTGRD1A.2748  
                  F_COARSE(I,J,K) = FRAC_ABOVE*F_FINE(II,JJ,KK+1) +        MLTGRD1A.2749  
     &                              FRAC_BELOW*F_FINE(II,JJ,KK)            MLTGRD1A.2750  
                END DO                                                     MLTGRD1A.2751  
              ELSE                                                         MLTGRD1A.2752  
                DO I= 1,I_COARSE                                           MLTGRD1A.2753  
                  C1_COARSE(I,J,K) = FRAC_ABOVE*C1_FINE(I,JJ,KK+1) +       MLTGRD1A.2754  
     &                               FRAC_BELOW*C1_FINE(I,JJ,KK)           MLTGRD1A.2755  
                  F_COARSE(I,J,K) = FRAC_ABOVE*F_FINE(I,JJ,KK+1) +         MLTGRD1A.2756  
     &                              FRAC_BELOW*F_FINE(I,JJ,KK)             MLTGRD1A.2757  
                END DO                                                     MLTGRD1A.2758  
              END IF                                                       MLTGRD1A.2759  
            END DO                                                         MLTGRD1A.2760  
          END DO                                                           MLTGRD1A.2761  
        ELSE                                                               MLTGRD1A.2762  
          DO K=1,K_COARSE-1                                                MLTGRD1A.2763  
            DO J= 1,J_COARSE                                               MLTGRD1A.2764  
              IF (J_RES) THEN                                              MLTGRD1A.2765  
                JJ=2*J-1                                                   MLTGRD1A.2766  
              ELSE                                                         MLTGRD1A.2767  
                JJ = J                                                     MLTGRD1A.2768  
              END IF                                                       MLTGRD1A.2769  
              IF(RES_DIRS.GT.3) THEN                                       MLTGRD1A.2770  
                DO I= 1,I_COARSE                                           MLTGRD1A.2771  
                  II=2*I-1                                                 MLTGRD1A.2772  
                  C1_COARSE(I,J,K) = C1_FINE(II,JJ,K)                      MLTGRD1A.2773  
                  F_COARSE(I,J,K) = F_FINE(II,JJ,K)                        MLTGRD1A.2774  
                END DO                                                     MLTGRD1A.2775  
              ELSE                                                         MLTGRD1A.2776  
                DO I= 1,I_COARSE                                           MLTGRD1A.2777  
                  C1_COARSE(I,J,K) = C1_FINE(I,JJ,K)                       MLTGRD1A.2778  
                  F_COARSE(I,J,K) = F_FINE(I,JJ,K)                         MLTGRD1A.2779  
                END DO                                                     MLTGRD1A.2780  
              END IF                                                       MLTGRD1A.2781  
            END DO                                                         MLTGRD1A.2782  
          END DO                                                           MLTGRD1A.2783  
        END IF                                                             MLTGRD1A.2784  
                                                                           MLTGRD1A.2785  
      END IF                                                               MLTGRD1A.2786  
                                                                           MLTGRD1A.2787  
CL----------------------------------------------------------------------   MLTGRD1A.2788  
CL    SECTION 2. RESTRICTION OF RESIDUAL.                                  MLTGRD1A.2789  
CL----------------------------------------------------------------------   MLTGRD1A.2790  
                                                                           MLTGRD1A.2791  
      IF(KREST.LE.2) THEN                                                  MLTGRD1A.2792  
C ----------------------------------------------------------------------   MLTGRD1A.2793  
CL    SECTION 2.1 INJECTION AND HALF-INJECTION.                            MLTGRD1A.2794  
C ----------------------------------------------------------------------   MLTGRD1A.2795  
                                                                           MLTGRD1A.2796  
C SCALE = 1 FOR FULL INJECTION, .5 FOR HALF-INJECTION.                     MLTGRD1A.2797  
                                                                           MLTGRD1A.2798  
        SCALE=1.                                                           MLTGRD1A.2799  
        IF(KREST.EQ.2) SCALE=0.5                                           MLTGRD1A.2800  
        DO K = 1,K_COARSE                                                  MLTGRD1A.2801  
          IF( MOD(RES_DIRS,2).EQ.1) THEN                                   MLTGRD1A.2802  
            KK=2*K-1                                                       MLTGRD1A.2803  
          ELSE                                                             MLTGRD1A.2804  
            KK = K                                                         MLTGRD1A.2805  
          END IF                                                           MLTGRD1A.2806  
          DO J = 1,J_COARSE                                                MLTGRD1A.2807  
            IF( J_RES) THEN                                                MLTGRD1A.2808  
              JJ=2*J-1                                                     MLTGRD1A.2809  
            ELSE                                                           MLTGRD1A.2810  
              JJ = J                                                       MLTGRD1A.2811  
            END IF                                                         MLTGRD1A.2812  
            IF( RES_DIRS.GT.3) THEN                                        MLTGRD1A.2813  
              DO I = 1,I_COARSE                                            MLTGRD1A.2814  
                II=2*I-1                                                   MLTGRD1A.2815  
                RHS_COARSE(I,J,K) = SCALE*RESID_FINE(II,JJ,KK)             MLTGRD1A.2816  
              END DO                                                       MLTGRD1A.2817  
            ELSE                                                           MLTGRD1A.2818  
              DO I = 1,I_COARSE                                            MLTGRD1A.2819  
                RHS_COARSE(I,J,K) = SCALE*RESID_FINE(I,JJ,KK)              MLTGRD1A.2820  
              END DO                                                       MLTGRD1A.2821  
            END IF                                                         MLTGRD1A.2822  
          END DO                                                           MLTGRD1A.2823  
        END DO                                                             MLTGRD1A.2824  
                                                                           MLTGRD1A.2825  
      ELSE                                                                 MLTGRD1A.2826  
                                                                           MLTGRD1A.2827  
C ----------------------------------------------------------------------   MLTGRD1A.2828  
CL    SECTION 2.2 FULL-WEIGHTING.                                          MLTGRD1A.2829  
C ----------------------------------------------------------------------   MLTGRD1A.2830  
                                                                           MLTGRD1A.2831  
C ----------------------------------------------------------------------   MLTGRD1A.2832  
CL    SECTION 2.2.1 HORIZONTAL RESTRICTION.                                MLTGRD1A.2833  
CL                  RESTRICTED VALUE STORED IN LEVEL_INCS READY FOR        MLTGRD1A.2834  
CL                  VERTICAL RESTRICTION.                                  MLTGRD1A.2835  
C ----------------------------------------------------------------------   MLTGRD1A.2836  
                                                                           MLTGRD1A.2837  
        IF (RES_DIRS.GE.6) THEN                                            MLTGRD1A.2838  
C ----------------------------------------------------------------------   MLTGRD1A.2839  
CL    RESTRICT IN BOTH I & J DIRECTIONS                                    MLTGRD1A.2840  
C ----------------------------------------------------------------------   MLTGRD1A.2841  
C CALCULATE RESTRICTED VALUE ON ALL LEVELS.                                MLTGRD1A.2842  
                                                                           MLTGRD1A.2843  
          DO K=1,K_FINE                                                    MLTGRD1A.2844  
            DO J= 2,J_COARSE-1                                             MLTGRD1A.2845  
              JJ=2*J-1                                                     MLTGRD1A.2846  
              DO I= 2,I_COARSE-1                                           MLTGRD1A.2847  
                II=2*I-1                                                   MLTGRD1A.2848  
                LEVEL_INCS(I,J,K) =  0.25*RESID_FINE(II,JJ,K)+             MLTGRD1A.2849  
     &                            0.125*(RESID_FINE(II+1,JJ,K) +           MLTGRD1A.2850  
     &                                   RESID_FINE(II-1,JJ,K))+           MLTGRD1A.2851  
     &                           (COS_P_FINE(II,JJ+1)*                     MLTGRD1A.2852  
     &                            (.125*RESID_FINE(II,JJ+1,K)+.0625*       MLTGRD1A.2853  
     &                             (RESID_FINE(II+1,JJ+1,K)+               MLTGRD1A.2854  
     &                              RESID_FINE(II-1,JJ+1,K)))+             MLTGRD1A.2855  
     &                            COS_P_FINE(II,JJ-1)*                     MLTGRD1A.2856  
     &                            (.125*RESID_FINE(II,JJ-1,K)+.0625*       MLTGRD1A.2857  
     &                             (RESID_FINE(II+1,JJ-1,K)+               MLTGRD1A.2858  
     &                              RESID_FINE(II-1,JJ-1,K))))             MLTGRD1A.2859  
     &                                  / COS_P_FINE(II,JJ)                MLTGRD1A.2860  
              END DO                                                       MLTGRD1A.2861  
                                                                           MLTGRD1A.2862  
CL     SET FIRST AND LAST POINT ON EACH ROW.                               MLTGRD1A.2863  
                                                                           MLTGRD1A.2864  
              IF(VERSION.LT.3) THEN                                        MLTGRD1A.2865  
CL GLOBAL                                                                  MLTGRD1A.2866  
                LEVEL_INCS(1,J,K) =  0.25*RESID_FINE(1,JJ,K)+              MLTGRD1A.2867  
     &                            0.125*(RESID_FINE(2,JJ,K) +              MLTGRD1A.2868  
     &                                   RESID_FINE(I_FINE,JJ,K))+         MLTGRD1A.2869  
     &                           (COS_P_FINE(1,JJ+1)*                      MLTGRD1A.2870  
     &                            (.125*RESID_FINE(1,JJ+1,K)+.0625*        MLTGRD1A.2871  
     &                             (RESID_FINE(2,JJ+1,K)+                  MLTGRD1A.2872  
     &                              RESID_FINE(I_FINE,JJ+1,K)))+           MLTGRD1A.2873  
     &                            COS_P_FINE(1,JJ-1)*                      MLTGRD1A.2874  
     &                            (.125*RESID_FINE(1,JJ-1,K)+.0625*        MLTGRD1A.2875  
     &                             (RESID_FINE(2,JJ-1,K)+                  MLTGRD1A.2876  
     &                              RESID_FINE(I_FINE,JJ-1,K))))           MLTGRD1A.2877  
     &                                  / COS_P_FINE(1,JJ)                 MLTGRD1A.2878  
                I = I_COARSE                                               MLTGRD1A.2879  
                II=2*I-1                                                   MLTGRD1A.2880  
                LEVEL_INCS(I,J,K) =  0.25*RESID_FINE(II,JJ,K)+             MLTGRD1A.2881  
     &                            0.125*(RESID_FINE(II+1,JJ,K) +           MLTGRD1A.2882  
     &                                   RESID_FINE(II-1,JJ,K))+           MLTGRD1A.2883  
     &                           (COS_P_FINE(II,JJ+1)*                     MLTGRD1A.2884  
     &                            (.125*RESID_FINE(II,JJ+1,K)+.0625*       MLTGRD1A.2885  
     &                             (RESID_FINE(II+1,JJ+1,K)+               MLTGRD1A.2886  
     &                              RESID_FINE(II-1,JJ+1,K)))+             MLTGRD1A.2887  
     &                            COS_P_FINE(II,JJ-1)*                     MLTGRD1A.2888  
     &                            (.125*RESID_FINE(II,JJ-1,K)+.0625*       MLTGRD1A.2889  
     &                             (RESID_FINE(II+1,JJ-1,K)+               MLTGRD1A.2890  
     &                              RESID_FINE(II-1,JJ-1,K))))             MLTGRD1A.2891  
     &                                  / COS_P_FINE(II,JJ)                MLTGRD1A.2892  
              ELSE                                                         MLTGRD1A.2893  
CL LIMITED AREA.                                                           MLTGRD1A.2894  
                LEVEL_INCS(1,J,K) =  0.25*RESID_FINE(1,JJ,K)+              MLTGRD1A.2895  
     &                            0.25*RESID_FINE(2,JJ,K) +                MLTGRD1A.2896  
     &                           (COS_P_FINE(1,JJ+1)*                      MLTGRD1A.2897  
     &                            (.125*RESID_FINE(1,JJ+1,K)+.125*         MLTGRD1A.2898  
     &                             RESID_FINE(2,JJ+1,K))+                  MLTGRD1A.2899  
     &                            COS_P_FINE(1,JJ-1)*                      MLTGRD1A.2900  
     &                            (.125*RESID_FINE(1,JJ-1,K)+.125*         MLTGRD1A.2901  
     &                              RESID_FINE(2,JJ-1,K)))                 MLTGRD1A.2902  
     &                                  / COS_P_FINE(1,JJ)                 MLTGRD1A.2903  
                I = I_COARSE                                               MLTGRD1A.2904  
                II=2*I-1                                                   MLTGRD1A.2905  
                LEVEL_INCS(I,J,K) =  0.25*RESID_FINE(II,JJ,K)+             MLTGRD1A.2906  
     &                            0.25*RESID_FINE(II-1,JJ,K) +             MLTGRD1A.2907  
     &                           (COS_P_FINE(II,JJ+1)*                     MLTGRD1A.2908  
     &                            (.125*RESID_FINE(II,JJ+1,K)+.125*        MLTGRD1A.2909  
     &                             RESID_FINE(II-1,JJ+1,K))+               MLTGRD1A.2910  
     &                            COS_P_FINE(II,JJ-1)*                     MLTGRD1A.2911  
     &                            (.125*RESID_FINE(II,JJ-1,K)+.125*        MLTGRD1A.2912  
     &                              RESID_FINE(II-1,JJ-1,K)))              MLTGRD1A.2913  
     &                                  / COS_P_FINE(II,JJ)                MLTGRD1A.2914  
              END IF                                                       MLTGRD1A.2915  
            END DO                                                         MLTGRD1A.2916  
                                                                           MLTGRD1A.2917  
CL    SET NORTHERN AND SOUTHERN BOUNDARIES.                                MLTGRD1A.2918  
                                                                           MLTGRD1A.2919  
            IF(VERSION.LT.3) THEN                                          MLTGRD1A.2920  
CL GLOBAL:  SET POLAR VALUES.                                              MLTGRD1A.2921  
              SCALAR1 = 0.                                                 MLTGRD1A.2922  
              SCALAR2 = 0.                                                 MLTGRD1A.2923  
              DO I= 1,I_COARSE                                             MLTGRD1A.2924  
                II=  I+I_COARSE                                            MLTGRD1A.2925  
                J = J_FINE-1                                               MLTGRD1A.2926  
                SCALAR1 = SCALAR1 + COS_P_FINE(I,2) *                      MLTGRD1A.2927  
     &                           (RESID_FINE(I,2,K)+RESID_FINE(II,2,K))    MLTGRD1A.2928  
                SCALAR2 = SCALAR2 + COS_P_FINE(I,J) *                      MLTGRD1A.2929  
     &                           (RESID_FINE(I,J,K)+RESID_FINE(II,J,K))    MLTGRD1A.2930  
              END DO                                                       MLTGRD1A.2931  
              SCALAR1 = .125*SCALAR1 / (I_FINE * COS_P_FINE(1,1))          MLTGRD1A.2932  
              SCALAR2 = .125*SCALAR2 / (I_FINE * COS_P_FINE(1,J_FINE))     MLTGRD1A.2933  
              DO I= 1,I_COARSE                                             MLTGRD1A.2934  
                LEVEL_INCS(I,1,K) = (.25*RESID_FINE(I,1,K) + SCALAR1)      MLTGRD1A.2935  
                LEVEL_INCS(I,J_COARSE,K) = (.25*RESID_FINE(I,J_FINE,K)     MLTGRD1A.2936  
     &                                      + SCALAR2)                     MLTGRD1A.2937  
              END DO                                                       MLTGRD1A.2938  
            ELSE                                                           MLTGRD1A.2939  
CL LIMITED AREA                                                            MLTGRD1A.2940  
              J= 1                                                         MLTGRD1A.2941  
              JJ=2*J-1                                                     MLTGRD1A.2942  
              DO I= 2,I_COARSE-1                                           MLTGRD1A.2943  
                II=2*I-1                                                   MLTGRD1A.2944  
                LEVEL_INCS(I,J,K) =  0.25*RESID_FINE(II,JJ,K)+             MLTGRD1A.2945  
     &                            0.125*(RESID_FINE(II+1,JJ,K) +           MLTGRD1A.2946  
     &                                   RESID_FINE(II-1,JJ,K))+           MLTGRD1A.2947  
     &                            COS_P_FINE(II,JJ+1)*                     MLTGRD1A.2948  
     &                            (.25*RESID_FINE(II,JJ+1,K)+.125*         MLTGRD1A.2949  
     &                             (RESID_FINE(II+1,JJ+1,K)+               MLTGRD1A.2950  
     &                              RESID_FINE(II-1,JJ+1,K)))              MLTGRD1A.2951  
     &                                  / COS_P_FINE(II,JJ)                MLTGRD1A.2952  
              END DO                                                       MLTGRD1A.2953  
              J= J_COARSE                                                  MLTGRD1A.2954  
              JJ=2*J-1                                                     MLTGRD1A.2955  
              DO I= 2,I_COARSE-1                                           MLTGRD1A.2956  
                II=2*I-1                                                   MLTGRD1A.2957  
                LEVEL_INCS(I,J,K) =  0.25*RESID_FINE(II,JJ,K)+             MLTGRD1A.2958  
     &                            0.125*(RESID_FINE(II+1,JJ,K) +           MLTGRD1A.2959  
     &                                   RESID_FINE(II-1,JJ,K))+           MLTGRD1A.2960  
     &                            COS_P_FINE(II,JJ-1)*                     MLTGRD1A.2961  
     &                            (.25*RESID_FINE(II,JJ-1,K)+.125*         MLTGRD1A.2962  
     &                             (RESID_FINE(II+1,JJ-1,K)+               MLTGRD1A.2963  
     &                              RESID_FINE(II-1,JJ-1,K)))              MLTGRD1A.2964  
     &                                  / COS_P_FINE(II,JJ)                MLTGRD1A.2965  
              END DO                                                       MLTGRD1A.2966  
C SET FIRST AND LAST POINT ON EACH BOUNDARY ROW.                           MLTGRD1A.2967  
              J=1                                                          MLTGRD1A.2968  
              JJ=2*J-1                                                     MLTGRD1A.2969  
              LEVEL_INCS(1,J,K) =  0.25*RESID_FINE(1,JJ,K)+                MLTGRD1A.2970  
     &                            0.25*RESID_FINE(2,JJ,K) +                MLTGRD1A.2971  
     &                            COS_P_FINE(1,JJ+1)*                      MLTGRD1A.2972  
     &                            (.25*RESID_FINE(1,JJ+1,K)+.25*           MLTGRD1A.2973  
     &                             RESID_FINE(2,JJ+1,K))                   MLTGRD1A.2974  
     &                                  / COS_P_FINE(1,JJ)                 MLTGRD1A.2975  
              I = I_COARSE                                                 MLTGRD1A.2976  
              II=2*I-1                                                     MLTGRD1A.2977  
              LEVEL_INCS(I,J,K) =  0.25*RESID_FINE(II,JJ,K)+               MLTGRD1A.2978  
     &                            0.25*RESID_FINE(II-1,JJ,K) +             MLTGRD1A.2979  
     &                            COS_P_FINE(II,JJ+1)*                     MLTGRD1A.2980  
     &                            (.25*RESID_FINE(II,JJ+1,K)+.25*          MLTGRD1A.2981  
     &                             RESID_FINE(II-1,JJ+1,K))                MLTGRD1A.2982  
     &                                  / COS_P_FINE(II,JJ)                MLTGRD1A.2983  
              J=J_COARSE                                                   MLTGRD1A.2984  
              JJ=2*J-1                                                     MLTGRD1A.2985  
              LEVEL_INCS(1,J,K) =  0.25*RESID_FINE(1,JJ,K)+                MLTGRD1A.2986  
     &                            0.25*RESID_FINE(2,JJ,K) +                MLTGRD1A.2987  
     &                            COS_P_FINE(1,JJ-1)*                      MLTGRD1A.2988  
     &                            (.25*RESID_FINE(1,JJ-1,K)+.25*           MLTGRD1A.2989  
     &                             RESID_FINE(2,JJ-1,K))                   MLTGRD1A.2990  
     &                                  / COS_P_FINE(1,JJ)                 MLTGRD1A.2991  
              I = I_COARSE                                                 MLTGRD1A.2992  
              II=2*I-1                                                     MLTGRD1A.2993  
              LEVEL_INCS(I,J,K) =  0.25*RESID_FINE(II,JJ,K)+               MLTGRD1A.2994  
     &                            0.25*RESID_FINE(II-1,JJ,K) +             MLTGRD1A.2995  
     &                            COS_P_FINE(II,JJ-1)*                     MLTGRD1A.2996  
     &                            (.25*RESID_FINE(II,JJ-1,K)+.25*          MLTGRD1A.2997  
     &                             RESID_FINE(II-1,JJ-1,K))                MLTGRD1A.2998  
     &                                  / COS_P_FINE(II,JJ)                MLTGRD1A.2999  
            END IF                                                         MLTGRD1A.3000  
          END DO                                                           MLTGRD1A.3001  
                                                                           MLTGRD1A.3002  
        ELSE IF (RES_DIRS.GT.3) THEN                                       MLTGRD1A.3003  
C ----------------------------------------------------------------------   MLTGRD1A.3004  
CL    RESTRICT IN I DIRECTION ONLY.                                        MLTGRD1A.3005  
C ----------------------------------------------------------------------   MLTGRD1A.3006  
                                                                           MLTGRD1A.3007  
          DO K=1,K_FINE                                                    MLTGRD1A.3008  
            DO J= JB,JE                                                    MLTGRD1A.3009  
              DO I= 2,I_COARSE-1                                           MLTGRD1A.3010  
                II=2*I-1                                                   MLTGRD1A.3011  
                LEVEL_INCS(I,J,K) =  0.50*RESID_FINE(II,J,K)+              MLTGRD1A.3012  
     &                              0.25*(RESID_FINE(II+1,J,K) +           MLTGRD1A.3013  
     &                                    RESID_FINE(II-1,J,K))            MLTGRD1A.3014  
              END DO                                                       MLTGRD1A.3015  
                                                                           MLTGRD1A.3016  
CL     SET FIRST AND LAST POINT ON EACH ROW.                               MLTGRD1A.3017  
                                                                           MLTGRD1A.3018  
              IF(VERSION.LT.3) THEN                                        MLTGRD1A.3019  
CL GLOBAL                                                                  MLTGRD1A.3020  
                LEVEL_INCS(1,J,K) = 0.50*RESID_FINE(1,J,K)+                MLTGRD1A.3021  
     &                            0.25*(RESID_FINE(2,J,K) +                MLTGRD1A.3022  
     &                                   RESID_FINE(I_FINE,J,K))           MLTGRD1A.3023  
                LEVEL_INCS(I_COARSE,J,K) = 0.50*RESID_FINE(I_FINE,J,K)+    MLTGRD1A.3024  
     &                            0.25*RESID_FINE(I_FINE-1,J,K)            MLTGRD1A.3025  
     &                            + 0.25*RESID_FINE(1,J,K)                 MLTGRD1A.3026  
              ELSE                                                         MLTGRD1A.3027  
CL LIMITED AREA                                                            MLTGRD1A.3028  
                LEVEL_INCS(1,J,K) = 0.50*RESID_FINE(1,J,K)+                MLTGRD1A.3029  
     &                            0.25*RESID_FINE(2,J,K)                   MLTGRD1A.3030  
                LEVEL_INCS(I_COARSE,J,K) = 0.50*RESID_FINE(I_FINE,J,K)+    MLTGRD1A.3031  
     &                            0.25*RESID_FINE(I_FINE-1,J,K)            MLTGRD1A.3032  
              END IF                                                       MLTGRD1A.3033  
            END DO                                                         MLTGRD1A.3034  
                                                                           MLTGRD1A.3035  
            IF( VERSION.LT.3 .AND. J_NT) THEN                              MLTGRD1A.3036  
C SET POLAR VALUES.                                                        MLTGRD1A.3037  
              DO I= 1,I_COARSE                                             MLTGRD1A.3038  
                LEVEL_INCS(I,1,K) = RESID_FINE(I,1,K)                      MLTGRD1A.3039  
                LEVEL_INCS(I,J_COARSE,K) = RESID_FINE(I,J_FINE,K)          MLTGRD1A.3040  
              END DO                                                       MLTGRD1A.3041  
            END IF                                                         MLTGRD1A.3042  
          END DO                                                           MLTGRD1A.3043  
                                                                           MLTGRD1A.3044  
        ELSE IF (RES_DIRS.GT.1) THEN                                       MLTGRD1A.3045  
C ----------------------------------------------------------------------   MLTGRD1A.3046  
CL    RESTRICT IN J DIRECTION ONLY.                                        MLTGRD1A.3047  
C ----------------------------------------------------------------------   MLTGRD1A.3048  
                                                                           MLTGRD1A.3049  
          DO K=1,K_FINE                                                    MLTGRD1A.3050  
            DO J= 2,J_COARSE-1                                             MLTGRD1A.3051  
              JJ=2*J-1                                                     MLTGRD1A.3052  
              DO I= 1,I_COARSE                                             MLTGRD1A.3053  
                LEVEL_INCS(I,J,K) =  0.5*RESID_FINE(I,JJ,K)+               MLTGRD1A.3054  
     &                           (COS_P_FINE(I,JJ+1)*                      MLTGRD1A.3055  
     &                             .25*RESID_FINE(I,JJ+1,K)+               MLTGRD1A.3056  
     &                            COS_P_FINE(II,JJ-1)*                     MLTGRD1A.3057  
     &                            .25*RESID_FINE(I,JJ-1,K))                MLTGRD1A.3058  
     &                                  / COS_P_FINE(II,JJ)                MLTGRD1A.3059  
              END DO                                                       MLTGRD1A.3060  
            END DO                                                         MLTGRD1A.3061  
                                                                           MLTGRD1A.3062  
            IF(VERSION.LT.3) THEN                                          MLTGRD1A.3063  
CL GLOBAL                                                                  MLTGRD1A.3064  
C SET POLAR VALUES.                                                        MLTGRD1A.3065  
              SCALAR1 = 0.                                                 MLTGRD1A.3066  
              SCALAR2 = 0.                                                 MLTGRD1A.3067  
              DO I= 1,I_COARSE                                             MLTGRD1A.3068  
                J = J_FINE-1                                               MLTGRD1A.3069  
                SCALAR1 = SCALAR1 + COS_P_FINE(I,2) *                      MLTGRD1A.3070  
     &                            RESID_FINE(I,2,K)                        MLTGRD1A.3071  
                SCALAR2 = SCALAR2 + COS_P_FINE(I,J) *                      MLTGRD1A.3072  
     &                            RESID_FINE(I,J,K)                        MLTGRD1A.3073  
              END DO                                                       MLTGRD1A.3074  
              SCALAR1 = .125*SCALAR1 / (I_COARSE * COS_P_FINE(1,1))        MLTGRD1A.3075  
              SCALAR2 = .125*SCALAR2 / (I_COARSE* COS_P_FINE(1,J_FINE))    MLTGRD1A.3076  
              DO I= 1,I_COARSE                                             MLTGRD1A.3077  
                LEVEL_INCS(I,1,K) = (.25*RESID_FINE(I,1,K) + SCALAR1)      MLTGRD1A.3078  
                LEVEL_INCS(I,J_COARSE,K) = (.25*RESID_FINE(I,J_FINE,K)     MLTGRD1A.3079  
     &                                      + SCALAR2)                     MLTGRD1A.3080  
              END DO                                                       MLTGRD1A.3081  
            ELSE                                                           MLTGRD1A.3082  
CL LIMITED AREA                                                            MLTGRD1A.3083  
C SET BOUNDARY VALUES                                                      MLTGRD1A.3084  
              J= 1                                                         MLTGRD1A.3085  
              JJ=2*J-1                                                     MLTGRD1A.3086  
              DO I= 1,I_COARSE                                             MLTGRD1A.3087  
                LEVEL_INCS(I,J,K) =  0.5*RESID_FINE(I,JJ,K)+.5*            MLTGRD1A.3088  
     &                                   COS_P_FINE(I,JJ+1)*               MLTGRD1A.3089  
     &                                   RESID_FINE(I,JJ+1,K)              MLTGRD1A.3090  
     &                                  / COS_P_FINE(II,JJ)                MLTGRD1A.3091  
              END DO                                                       MLTGRD1A.3092  
              J= J_COARSE                                                  MLTGRD1A.3093  
              JJ=2*J-1                                                     MLTGRD1A.3094  
              DO I= 1,I_COARSE                                             MLTGRD1A.3095  
                LEVEL_INCS(I,J,K) =  0.5*RESID_FINE(I,JJ,K)+.5*            MLTGRD1A.3096  
     &                                   COS_P_FINE(I,JJ-1)*               MLTGRD1A.3097  
     &                                   RESID_FINE(I,JJ-1,K)              MLTGRD1A.3098  
     &                                  / COS_P_FINE(II,JJ)                MLTGRD1A.3099  
              END DO                                                       MLTGRD1A.3100  
            END IF                                                         MLTGRD1A.3101  
          END DO                                                           MLTGRD1A.3102  
                                                                           MLTGRD1A.3103  
        ELSE                                                               MLTGRD1A.3104  
C ----------------------------------------------------------------------   MLTGRD1A.3105  
C K RESTRICTION ONLY, COPY RESID_FINE INTO LEVEL_INCS READY FOR VERTICAL   MLTGRD1A.3106  
C RESTRICTION.                                                             MLTGRD1A.3107  
C ----------------------------------------------------------------------   MLTGRD1A.3108  
          DO K=1,K_FINE                                                    MLTGRD1A.3109  
            DO J=1,J_COARSE                                                MLTGRD1A.3110  
              DO I=1,I_COARSE                                              MLTGRD1A.3111  
                LEVEL_INCS(I,J,K) = RESID_FINE(I,J,K)                      MLTGRD1A.3112  
              END DO                                                       MLTGRD1A.3113  
            END DO                                                         MLTGRD1A.3114  
          END DO                                                           MLTGRD1A.3115  
        END IF                                                             MLTGRD1A.3116  
                                                                           MLTGRD1A.3117  
      END IF                                                               MLTGRD1A.3118  
                                                                           MLTGRD1A.3119  
C ----------------------------------------------------------------------   MLTGRD1A.3120  
CL    SECTION 2.2.2 VERTICAL RESTRICTION.                                  MLTGRD1A.3121  
CL                  HORIZONTALLY RESTRICTED VALUE STORED IN LEVEL_INCS     MLTGRD1A.3122  
CL                  READY FOR VERTICAL RESTRICTION.                        MLTGRD1A.3123  
C ----------------------------------------------------------------------   MLTGRD1A.3124  
                                                                           MLTGRD1A.3125  
      IF(MOD(RES_DIRS,2).EQ.1) THEN                                        MLTGRD1A.3126  
CL RESTRICT LEVEL INCS IN VERTICAL USING FULL-WEIGHTING.                   MLTGRD1A.3127  
C NON-BOUNDARY LEVELS.                                                     MLTGRD1A.3128  
        DO K=2,K_COARSE-1                                                  MLTGRD1A.3129  
          KK = 2*K-1                                                       MLTGRD1A.3130  
          SCALE = Z_MID_COARSE(K) - Z_MID_COARSE(K-1)                      MLTGRD1A.3131  
          SCALAR1 = (Z_MID_FINE(KK-1) - Z_MID_COARSE(K-1)) / SCALE         MLTGRD1A.3132  
          SCALAR2 = (Z_MID_FINE(KK) - Z_MID_FINE(KK-1)) / SCALE            MLTGRD1A.3133  
          SCALAR3 = (Z_MID_COARSE(K) - Z_MID_FINE(KK)) / SCALE             MLTGRD1A.3134  
          DO J=1,J_COARSE                                                  MLTGRD1A.3135  
            DO I=1,I_COARSE                                                MLTGRD1A.3136  
              RHS_COARSE(I,J,K) = SCALAR1*LEVEL_INCS(I,J,KK-1) +           MLTGRD1A.3137  
     &                            SCALAR2*LEVEL_INCS(I,J,KK) +             MLTGRD1A.3138  
     &                            SCALAR3*LEVEL_INCS(I,J,KK+1)             MLTGRD1A.3139  
            END DO                                                         MLTGRD1A.3140  
          END DO                                                           MLTGRD1A.3141  
        END DO                                                             MLTGRD1A.3142  
C BOTTOM.                                                                  MLTGRD1A.3143  
        K=1                                                                MLTGRD1A.3144  
        KK = 2*K-1                                                         MLTGRD1A.3145  
        SCALE = Z_MID_COARSE(K) - Z_MID_COARSE(K-1)                        MLTGRD1A.3146  
        SCALAR2 = (Z_MID_FINE(KK) - Z_MID_COARSE(K-1)) / SCALE             MLTGRD1A.3147  
        SCALAR3 = (Z_MID_COARSE(K) - Z_MID_FINE(KK)) / SCALE               MLTGRD1A.3148  
        DO J=1,J_COARSE                                                    MLTGRD1A.3149  
          DO I=1,I_COARSE                                                  MLTGRD1A.3150  
            RHS_COARSE(I,J,K) = SCALAR2*LEVEL_INCS(I,J,KK) +               MLTGRD1A.3151  
     &                          SCALAR3*LEVEL_INCS(I,J,KK+1)               MLTGRD1A.3152  
          END DO                                                           MLTGRD1A.3153  
        END DO                                                             MLTGRD1A.3154  
C TOP.                                                                     MLTGRD1A.3155  
        K=K_COARSE                                                         MLTGRD1A.3156  
        KK = 2*K-1                                                         MLTGRD1A.3157  
        SCALE = Z_MID_COARSE(K) - Z_MID_COARSE(K-1)                        MLTGRD1A.3158  
        SCALAR1 = (Z_MID_FINE(KK-1) - Z_MID_COARSE(K-1)) / SCALE           MLTGRD1A.3159  
        SCALAR2 = (Z_MID_COARSE(K) - Z_MID_FINE(KK-1)) / SCALE             MLTGRD1A.3160  
        DO J=1,J_COARSE                                                    MLTGRD1A.3161  
          DO I=1,I_COARSE                                                  MLTGRD1A.3162  
            RHS_COARSE(I,J,K) = SCALAR1*LEVEL_INCS(I,J,KK-1) +             MLTGRD1A.3163  
     &                          SCALAR2*LEVEL_INCS(I,J,KK)                 MLTGRD1A.3164  
          END DO                                                           MLTGRD1A.3165  
        END DO                                                             MLTGRD1A.3166  
                                                                           MLTGRD1A.3167  
      ELSE                                                                 MLTGRD1A.3168  
C SIMPLY COPY RESTRICTED VALUE INTO RHS_COARSE ARRAY SINCE                 MLTGRD1A.3169  
C K_FINE = K_COARSE                                                        MLTGRD1A.3170  
        DO K=1,K_COARSE                                                    MLTGRD1A.3171  
          DO J=1,J_COARSE                                                  MLTGRD1A.3172  
            DO I=1,I_COARSE                                                MLTGRD1A.3173  
              RHS_COARSE(I,J,K) = LEVEL_INCS(I,J,K)                        MLTGRD1A.3174  
            END DO                                                         MLTGRD1A.3175  
          END DO                                                           MLTGRD1A.3176  
        END DO                                                             MLTGRD1A.3177  
                                                                           MLTGRD1A.3178  
      END IF                                                               MLTGRD1A.3179  
                                                                           MLTGRD1A.3180  
CL----------------------------------------------------------------------   MLTGRD1A.3181  
CL    SECTION 3. RESTRICTION OF SOLUTION.                                  MLTGRD1A.3182  
CL----------------------------------------------------------------------   MLTGRD1A.3183  
                                                                           MLTGRD1A.3184  
      DO K = 1,K_COARSE                                                    MLTGRD1A.3185  
        IF( MOD(RES_DIRS,2).EQ.1) THEN                                     MLTGRD1A.3186  
          KK=2*K-1                                                         MLTGRD1A.3187  
        ELSE                                                               MLTGRD1A.3188  
          KK = K                                                           MLTGRD1A.3189  
        END IF                                                             MLTGRD1A.3190  
        DO J = 1,J_COARSE                                                  MLTGRD1A.3191  
          IF( J_RES) THEN                                                  MLTGRD1A.3192  
            JJ=2*J-1                                                       MLTGRD1A.3193  
          ELSE                                                             MLTGRD1A.3194  
            JJ = J                                                         MLTGRD1A.3195  
          END IF                                                           MLTGRD1A.3196  
          IF(RES_DIRS.GT.3) THEN                                           MLTGRD1A.3197  
            DO I = 1,I_COARSE                                              MLTGRD1A.3198  
              II=2*I-1                                                     MLTGRD1A.3199  
              Q_COARSE(I,J,K) = Q_FINE(II,JJ,KK)                           MLTGRD1A.3200  
            END DO                                                         MLTGRD1A.3201  
          ELSE                                                             MLTGRD1A.3202  
            DO I = 1,I_COARSE                                              MLTGRD1A.3203  
              Q_COARSE(I,J,K) = Q_FINE(I,JJ,KK)                            MLTGRD1A.3204  
            END DO                                                         MLTGRD1A.3205  
          END IF                                                           MLTGRD1A.3206  
        END DO                                                             MLTGRD1A.3207  
      END DO                                                               MLTGRD1A.3208  
                                                                           MLTGRD1A.3209  
CL----------------------------------------------------------------------   MLTGRD1A.3210  
CL    SECTION 4.  ADD COARSE GRID OPERATOR ACTING ON RESTRICTED            MLTGRD1A.3211  
CL                SOLUTION TO RESTRICTED RESIDUAL TO OBTAIN RHS ON         MLTGRD1A.3212  
CL                COARSE GRID.                                             MLTGRD1A.3213  
CL----------------------------------------------------------------------   MLTGRD1A.3214  
                                                                           MLTGRD1A.3215  
CL    CALL LEFT_HAND_SIDE TO GET COARSE GRID OPERATOR ACTING ON            MLTGRD1A.3216  
CL    RESTRICTED SOLUTION.                                                 MLTGRD1A.3217  
                                                                           MLTGRD1A.3218  
      CALL MG_LEFT_HAND_SIDE(Q_COARSE,A_COARSE,B_COARSE,C1_COARSE,         MLTGRD1A.3219  
     &                       C2_COARSE,DEF_COARSE,D_COARSE,E_COARSE,       MLTGRD1A.3220  
     &                       F_COARSE,G_COARSE,                            MLTGRD1A.3221  
     &                       RESID_FINE,I_COARSE,J_COARSE,K_COARSE,        MLTGRD1A.3222  
     &                       COS_P_COARSE,SEC_P_COARSE,COS_V_COARSE,       MLTGRD1A.3223  
     &                       EARTH_RADIUS_INVERSE,LATITUDE_STEP_INVERSE,   MLTGRD1A.3224  
     &                       LONGITUDE_STEP_INVERSE,VERSION,I_NT,J_NT,     MLTGRD1A.3225  
     &                       K_NT,Z_Q_COARSE,Z_MID_COARSE)                 MLTGRD1A.3226  
                                                                           MLTGRD1A.3227  
C LEFT_HAND_SIDE STORED IN RESID_FINE TO SAVE WORK-SPACE.                  MLTGRD1A.3228  
                                                                           MLTGRD1A.3229  
CL    ADD ON LEFT-HAND-SIDE TO RESIDUAL.                                   MLTGRD1A.3230  
      DO K= 1,K_COARSE                                                     MLTGRD1A.3231  
        DO J= 1,J_COARSE                                                   MLTGRD1A.3232  
          DO I= 1,I_COARSE                                                 MLTGRD1A.3233  
            II = ((K-1)*J_COARSE+J-1)*I_COARSE + I                         MLTGRD1A.3234  
            RHS_COARSE(I,J,K) = RHS_COARSE(I,J,K) + RESID_FINE(II,1,1)     MLTGRD1A.3235  
          END DO                                                           MLTGRD1A.3236  
        END DO                                                             MLTGRD1A.3237  
      END DO                                                               MLTGRD1A.3238  
                                                                           MLTGRD1A.3239  
CL    END OF ROUTINE MG_RESTRICT                                           MLTGRD1A.3240  
                                                                           MLTGRD1A.3241  
      RETURN                                                               MLTGRD1A.3242  
      END                                                                  MLTGRD1A.3243  
CLL   SUBROUTINE MG_SMOOTH                                                 MLTGRD1A.3244  
CLL                                                                        MLTGRD1A.3245  
CLL   PURPOSE:                                                             MLTGRD1A.3246  
CLL   -------                                                              MLTGRD1A.3247  
CLL   CALLS APPROPRIATE SMOOTHING ROUTINES.                                MLTGRD1A.3248  
CLL                                                                        MLTGRD1A.3249  
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.3250  
CLL                                                                        MLTGRD1A.3251  
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.3252  
CLL VERSION  DATE                                                          MLTGRD1A.3253  
CLL   3.3                                                                  MLTGRD1A.3254  
CLL                                                                        MLTGRD1A.3255  
CLL                                                                        MLTGRD1A.3256  
CLLEND -----------------------------------------------------------------   MLTGRD1A.3257  
                                                                           MLTGRD1A.3258  
C*L ARGUMENT LIST.                                                         MLTGRD1A.3259  
                                                                           MLTGRD1A.3260  
      SUBROUTINE MG_SMOOTH(                                                MLTGRD1A.3261  
     &                     Q,RHS,A,B,C1,C2,DEF,D,E,F,G,COS_P_LATITUDE,     MLTGRD1A.3262  
     &                     SEC_P_LATITUDE,COS_V_LATITUDE,I_DIM,J_DIM,      MLTGRD1A.3263  
     &                     K_DIM,W,GRID_NUMBER,RMS_RES,IPRINT,             MLTGRD1A.3264  
     &                     SWJAC,SWSYM,JAC,PAT,SYM,ILINE,JLINE,KLINE,      MLTGRD1A.3265  
     &                     NFB,IPAT,LATITUDE_STEP_INVERSE,                 MLTGRD1A.3266  
     &                     LONGITUDE_STEP_INVERSE,EARTH_RADIUS_INVERSE,    MLTGRD1A.3267  
     &                     VERSION,K_BC,I_NT,J_NT,K_NT,Z_Q,Z_MID)          MLTGRD1A.3268  
                                                                           MLTGRD1A.3269  
      IMPLICIT NONE                                                        MLTGRD1A.3270  
                                                                           MLTGRD1A.3271  
      LOGICAL                                                              MLTGRD1A.3272  
     &  I_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN I DIRECTION   MLTGRD1A.3273  
     &, J_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN J DIRECTION   MLTGRD1A.3274  
     &, K_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN K DIRECTION   MLTGRD1A.3275  
                                                                           MLTGRD1A.3276  
      INTEGER                                                              MLTGRD1A.3277  
     &  IPRINT      !IN. PARAMETER CONTROLLING QUANTITY OF OUTPUT.         MLTGRD1A.3278  
     &, I_DIM       !IN. NUMBER OF POINTS IN I-DIRECTION.                  MLTGRD1A.3279  
     &, J_DIM       !IN. NUMBER OF POINTS IN J-DIRECTION.                  MLTGRD1A.3280  
     &, K_DIM       !IN. NUMBER OF POINTS IN K-DIRECTION.                  MLTGRD1A.3281  
     &, GRID_NUMBER !IN. NUMBER OF GRID SMOOTHER IS ACTING ON.             MLTGRD1A.3282  
     &, NFB         !IN. NUMBER OF FORWARD / BACKWARD SWEEPS OF GRID       MLTGRD1A.3283  
     &              ! NEEDED.                                              MLTGRD1A.3284  
     &, IPAT        !IN. USED TO DISTINGUISH BETWEEN RED AND BLACK         MLTGRD1A.3285  
     &              ! POINTS.                                              MLTGRD1A.3286  
     &, VERSION     !IN. VERSION OF MULTIGRID BEING USED.                  MLTGRD1A.3287  
     &, K_BC        !IN. BOUNDARY CONDITIONS IN K DIRECTION.               MLTGRD1A.3288  
                                                                           MLTGRD1A.3289  
      LOGICAL                                                              MLTGRD1A.3290  
     &  JAC     !IN. .TRUE. FOR JACOBI METHODS                             MLTGRD1A.3291  
     &, PAT     !IN. .TRUE. FOR PATTERN SCHEMES                            MLTGRD1A.3292  
     &, SYM     !IN. .TRUE. FOR SYMMETRIC SCHEMES                          MLTGRD1A.3293  
     &, ILINE   !IN. .TRUE. FOR I-LINE METHODS AND ALTERNATING SCHEMES     MLTGRD1A.3294  
     &, JLINE   !IN. .TRUE. FOR J-LINE METHODS AND ALTERNATING SCHEMES     MLTGRD1A.3295  
     &, KLINE   !IN. .TRUE. FOR K-LINE METHODS AND ALTERNATING SCHEMES     MLTGRD1A.3296  
                                                                           MLTGRD1A.3297  
      REAL                                                                 MLTGRD1A.3298  
     &  SWJAC    !IN. A SWITCH WHICH IS ZERO FOR JACOBI METHODS            MLTGRD1A.3299  
     &, SWSYM    !IN. A SWITCH WHICH IS ZERO FOR SYMMETRIC METHODS         MLTGRD1A.3300  
     &, RMS_RES  !IN. ROOT MEAN SQUARE RESIDUAL NORM.                      MLTGRD1A.3301  
     &, W        !IN. RELAXATION PARAMETER FOR EACH VARIABLE IN SYSTEM     MLTGRD1A.3302  
                                                                           MLTGRD1A.3303  
      REAL                                                                 MLTGRD1A.3304  
     &  A(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.3305  
     &, B(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.3306  
     &, C1(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.3307  
     &, C2(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.3308  
     &, DEF(I_DIM,J_DIM,K_DIM)  !IN. COEFFICIENT                           MLTGRD1A.3309  
     &, D(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                            MLTGRD1A.3310  
     &, E(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                            MLTGRD1A.3311  
     &, F(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                            MLTGRD1A.3312  
     &, G(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.3313  
     &, RHS(I_DIM,J_DIM,K_DIM)  !IN. RIGHT-HAND-SIDE OF EQUATION.          MLTGRD1A.3314  
     &, COS_P_LATITUDE(I_DIM,J_DIM) !IN. COSINE OF LATITUDE AT Q POINTS.   MLTGRD1A.3315  
     &, SEC_P_LATITUDE(I_DIM,J_DIM) !IN. 1./COS OF LATITUDE AT Q POINTS.   MLTGRD1A.3316  
     &, COS_V_LATITUDE(I_DIM,J_DIM)                                        MLTGRD1A.3317  
     &                          !IN. COSINE OF LATITUDE AT V POINTS.       MLTGRD1A.3318  
     &, Z_Q(K_DIM)              !IN. Z AT Q POINTS.                        MLTGRD1A.3319  
     &, Z_MID(0:K_DIM)          !IN. Z MIDWAY BETWEEN Q POINTS.            MLTGRD1A.3320  
                                                                           MLTGRD1A.3321  
      REAL                                                                 MLTGRD1A.3322  
     &  Q(I_DIM,J_DIM,K_DIM)    !OUT. SOLUTION.                            MLTGRD1A.3323  
                                                                           MLTGRD1A.3324  
      REAL                                                                 MLTGRD1A.3325  
     &  LATITUDE_STEP_INVERSE  !IN.                                        MLTGRD1A.3326  
     &, LONGITUDE_STEP_INVERSE !IN.                                        MLTGRD1A.3327  
     &, EARTH_RADIUS_INVERSE   !IN                                         MLTGRD1A.3328  
                                                                           MLTGRD1A.3329  
C*----------------------------------------------------------------------   MLTGRD1A.3330  
                                                                           MLTGRD1A.3331  
C*L   NO LOCAL WORK ARRAYS REQUIRED.                                       MLTGRD1A.3332  
                                                                           MLTGRD1A.3333  
C*----------------------------------------------------------------------   MLTGRD1A.3334  
C LOCAL VARIABLES.                                                         MLTGRD1A.3335  
                                                                           MLTGRD1A.3336  
      REAL                                                                 MLTGRD1A.3337  
     &  SCALAR                                                             MLTGRD1A.3338  
     &, RMS_INC  !IN. ROOT MEAN SQUARE INCREMENT NORM.                     MLTGRD1A.3339  
                                                                           MLTGRD1A.3340  
C*L   EXTERNAL ROUTINES CALLED.                                            MLTGRD1A.3341  
      EXTERNAL MG_I_LINE,MG_J_LINE,MG_K_LINE,MG_POLES,MG_POINTS            MLTGRD1A.3342  
                                                                           MLTGRD1A.3343  
C*----------------------------------------------------------------------   MLTGRD1A.3344  
                                                                           MLTGRD1A.3345  
CL----------------------------------------------------------------------   MLTGRD1A.3346  
CL    SECTION 1. LINE RELAXATION SCHEMES                                   MLTGRD1A.3347  
CL----------------------------------------------------------------------   MLTGRD1A.3348  
                                                                           MLTGRD1A.3349  
CL    CALL I_LINE IF REQUIRED.                                             MLTGRD1A.3350  
                                                                           MLTGRD1A.3351  
      IF(ILINE) THEN                                                       MLTGRD1A.3352  
        CALL MG_I_LINE(Q,RHS,A,B,C1,C2,DEF,D,E,F,G,COS_P_LATITUDE,         MLTGRD1A.3353  
     &                 SEC_P_LATITUDE,COS_V_LATITUDE,                      MLTGRD1A.3354  
     &                 LATITUDE_STEP_INVERSE,                              MLTGRD1A.3355  
     &                 LONGITUDE_STEP_INVERSE,EARTH_RADIUS_INVERSE,        MLTGRD1A.3356  
     &                 I_DIM,J_DIM,K_DIM,W,RMS_RES,RMS_INC,                MLTGRD1A.3357  
     &                 SWJAC,SWSYM,JAC,PAT,SYM,NFB,IPAT,                   MLTGRD1A.3358  
     &                 VERSION,K_BC,Z_Q,Z_MID,J_NT,K_NT)                   MLTGRD1A.3359  
      END IF                                                               MLTGRD1A.3360  
                                                                           MLTGRD1A.3361  
CL    CALL J_LINE IF REQUIRED.                                             MLTGRD1A.3362  
                                                                           MLTGRD1A.3363  
      IF(JLINE) THEN                                                       MLTGRD1A.3364  
        CALL MG_J_LINE(Q,RHS,A,B,C1,C2,DEF,D,E,F,G,COS_P_LATITUDE,         MLTGRD1A.3365  
     &                 SEC_P_LATITUDE,COS_V_LATITUDE,                      MLTGRD1A.3366  
     &                 LATITUDE_STEP_INVERSE,                              MLTGRD1A.3367  
     &                 LONGITUDE_STEP_INVERSE,EARTH_RADIUS_INVERSE,        MLTGRD1A.3368  
     &                 I_DIM,J_DIM,K_DIM,W,RMS_RES,RMS_INC,                MLTGRD1A.3369  
     &                 SWJAC,SWSYM,JAC,PAT,SYM,NFB,IPAT,                   MLTGRD1A.3370  
     &                 VERSION,K_BC,Z_Q,Z_MID,I_NT,K_NT)                   MLTGRD1A.3371  
      END IF                                                               MLTGRD1A.3372  
                                                                           MLTGRD1A.3373  
CL    CALL K_LINE IF REQUIRED.                                             MLTGRD1A.3374  
                                                                           MLTGRD1A.3375  
      IF(KLINE) THEN                                                       MLTGRD1A.3376  
        CALL MG_K_LINE(Q,RHS,A,B,C1,C2,DEF,D,E,F,G,COS_P_LATITUDE,         MLTGRD1A.3377  
     &                 SEC_P_LATITUDE,COS_V_LATITUDE,                      MLTGRD1A.3378  
     &                 LATITUDE_STEP_INVERSE,                              MLTGRD1A.3379  
     &                 LONGITUDE_STEP_INVERSE,EARTH_RADIUS_INVERSE,        MLTGRD1A.3380  
     &                 I_DIM,J_DIM,K_DIM,W,RMS_RES,RMS_INC,                MLTGRD1A.3381  
     &                 SWJAC,SWSYM,JAC,PAT,SYM,NFB,IPAT,                   MLTGRD1A.3382  
     &                 VERSION,K_BC,Z_Q,Z_MID,I_NT,J_NT)                   MLTGRD1A.3383  
      END IF                                                               MLTGRD1A.3384  
                                                                           MLTGRD1A.3385  
CL----------------------------------------------------------------------   MLTGRD1A.3386  
CL    SECTION 2. POINT RELAXATION SCHEMES                                  MLTGRD1A.3387  
CL----------------------------------------------------------------------   MLTGRD1A.3388  
                                                                           MLTGRD1A.3389  
      IF(.NOT.ILINE .AND. .NOT.JLINE .AND. .NOT.KLINE) THEN                MLTGRD1A.3390  
        CALL MG_POINTS(Q,RHS,A,B,C1,C2,DEF,D,E,F,G,COS_P_LATITUDE,         MLTGRD1A.3391  
     &                 SEC_P_LATITUDE,COS_V_LATITUDE,I_DIM,J_DIM,K_DIM,    MLTGRD1A.3392  
     &                 W,GRID_NUMBER,RMS_RES,RMS_INC,IPRINT,               MLTGRD1A.3393  
     &                 SWJAC,SWSYM,JAC,PAT,SYM,                            MLTGRD1A.3394  
     &                 NFB,IPAT,LATITUDE_STEP_INVERSE,                     MLTGRD1A.3395  
     &                 LONGITUDE_STEP_INVERSE,EARTH_RADIUS_INVERSE,        MLTGRD1A.3396  
     &                 VERSION,K_BC,Z_Q,Z_MID,I_NT,J_NT,K_NT)              MLTGRD1A.3397  
      END IF                                                               MLTGRD1A.3398  
                                                                           MLTGRD1A.3399  
      IF (VERSION.LT.3 .AND. J_NT .AND. .NOT.KLINE) THEN                   MLTGRD1A.3400  
CL    GLOBAL CODE.                                                         MLTGRD1A.3401  
CL    CALL POLES TO PERFORM POLAR UPDATES IF KLINE NOT USED.               MLTGRD1A.3402  
                                                                           MLTGRD1A.3403  
        CALL MG_POLES(Q,RHS,B,C1,C2,DEF,E,F,G,SEC_P_LATITUDE,              MLTGRD1A.3404  
     &                COS_V_LATITUDE,                                      MLTGRD1A.3405  
     &                LATITUDE_STEP_INVERSE,EARTH_RADIUS_INVERSE,          MLTGRD1A.3406  
     &                I_DIM,J_DIM,K_DIM,RMS_RES,RMS_INC,                   MLTGRD1A.3407  
     &                Z_Q,Z_MID,K_NT,K_BC)                                 MLTGRD1A.3408  
                                                                           MLTGRD1A.3409  
      END IF                                                               MLTGRD1A.3410  
                                                                           MLTGRD1A.3411  
CL----------------------------------------------------------------------   MLTGRD1A.3412  
CL    SECTION 2. CALCULATE NORMS.                                          MLTGRD1A.3413  
CL----------------------------------------------------------------------   MLTGRD1A.3414  
                                                                           MLTGRD1A.3415  
      SCALAR = 1./(I_DIM*J_DIM*K_DIM)                                      MLTGRD1A.3416  
      RMS_RES = SQRT(SCALAR*RMS_RES)                                       MLTGRD1A.3417  
      RMS_INC = SQRT(SCALAR*RMS_INC)                                       MLTGRD1A.3418  
                                                                           MLTGRD1A.3419  
      IF(IPRINT.GE.2) WRITE(6,9000) GRID_NUMBER,RMS_RES,RMS_INC            MLTGRD1A.3420  
                                                                           MLTGRD1A.3421  
 9000 FORMAT(1X,'GRID',I3,3X,'RESIDUAL NORM=',E9.3,6X,                     MLTGRD1A.3422  
     &                       'INCREMENT NORM=',E9.3)                       MLTGRD1A.3423  
                                                                           MLTGRD1A.3424  
CL    END OF ROUTINE MG_SMOOTH                                             MLTGRD1A.3425  
                                                                           MLTGRD1A.3426  
      RETURN                                                               MLTGRD1A.3427  
      END                                                                  MLTGRD1A.3428  
CLL   SUBROUTINE MG_STYPE                                                  MLTGRD1A.3429  
CLL                                                                        MLTGRD1A.3430  
CLL   PURPOSE:                                                             MLTGRD1A.3431  
CLL   -------                                                              MLTGRD1A.3432  
CLL   SETS SMOOTHING INFORMATION GIVEN A PARTICULAR CHOICE.                MLTGRD1A.3433  
CLL                                                                        MLTGRD1A.3434  
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.3435  
CLL                                                                        MLTGRD1A.3436  
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.3437  
CLL VERSION  DATE                                                          MLTGRD1A.3438  
CLL   3.3                                                                  MLTGRD1A.3439  
CLL                                                                        MLTGRD1A.3440  
CLL                                                                        MLTGRD1A.3441  
CLLEND -----------------------------------------------------------------   MLTGRD1A.3442  
                                                                           MLTGRD1A.3443  
C*L ARGUMENT LIST.                                                         MLTGRD1A.3444  
                                                                           MLTGRD1A.3445  
      SUBROUTINE MG_STYPE(I_NT,J_NT,K_NT,KSMOOTH,JAC,PAT,SYM,ILINE,        MLTGRD1A.3446  
     &                    JLINE,KLINE,NFB,IPAT,SWJAC,SWSYM)                MLTGRD1A.3447  
                                                                           MLTGRD1A.3448  
      IMPLICIT NONE                                                        MLTGRD1A.3449  
                                                                           MLTGRD1A.3450  
      LOGICAL                                                              MLTGRD1A.3451  
     &  I_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN I DIRECTION   MLTGRD1A.3452  
     &, J_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN J DIRECTION   MLTGRD1A.3453  
     &, K_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN K DIRECTION   MLTGRD1A.3454  
                                                                           MLTGRD1A.3455  
      INTEGER                                                              MLTGRD1A.3456  
     &  KSMOOTH !IN. NUMBER REPRESENTING SMOOTHER SELECTED.                MLTGRD1A.3457  
     &          !    1 - I-LINE JACOBI                                     MLTGRD1A.3458  
     &          !    2 - J-LINE JACOBI                                     MLTGRD1A.3459  
     &          !    3 - K-LINE JACOBI                                     MLTGRD1A.3460  
     &          !    4 - I&J-LINE JACOBI                                   MLTGRD1A.3461  
     &          !    5 - I&K LINE JACOBI                                   MLTGRD1A.3462  
     &          !    6 - J&K-LINE JACOBI                                   MLTGRD1A.3463  
     &          !    7 - 3-D ALTERNATING LINE JACOBI                       MLTGRD1A.3464  
     &          !    8 - I-LINE GAUSS-SEIDEL                               MLTGRD1A.3465  
     &          !    9 - J-LINE GAUSS-SEIDEL                               MLTGRD1A.3466  
     &          !   10 - K-LINE GAUSS-SEIDEL                               MLTGRD1A.3467  
     &          !   11 - I&J-LINE GAUSS-SEIDEL                             MLTGRD1A.3468  
     &          !   12 - I&K-LINE GAUSS-SEIDEL                             MLTGRD1A.3469  
     &          !   13 - J&K-LINE GAUSS-SEIDEL                             MLTGRD1A.3470  
     &          !   14 - 3-D ALTERNATING LINE GAUSS-SEIDEL                 MLTGRD1A.3471  
     &          !   15 - 3-D ALTERNATING SYMMETRIC LINE GAUSS-SEIDEL       MLTGRD1A.3472  
     &          !   16 - I-LINE ZEBRA                                      MLTGRD1A.3473  
     &          !   17 - J-LINE ZEBRA                                      MLTGRD1A.3474  
     &          !   18 - K-LINE ZEBRA                                      MLTGRD1A.3475  
     &          !   19 - I&J-LINE ZEBRA                                    MLTGRD1A.3476  
     &          !   20 - I&K-LINE ZEBRA                                    MLTGRD1A.3477  
     &          !   21 - J&K-LINE ZEBRA                                    MLTGRD1A.3478  
     &          !   22 - 3-D ALTERNATING LINE ZEBRA                        MLTGRD1A.3479  
     &          !   23 - JACOBI POINT SMOOTHER                             MLTGRD1A.3480  
     &          !   24 - GAUSS-SEIDEL POINT SMOOTHER                       MLTGRD1A.3481  
     &          !   25 - SYMMETRIC GAUSS-SEIDEL POINT SMOOTHER             MLTGRD1A.3482  
     &          !   26 - RED-BLACK POINT SMOOTHER                          MLTGRD1A.3483  
                                                                           MLTGRD1A.3484  
      LOGICAL                                                              MLTGRD1A.3485  
     &  JAC     !OUT. .TRUE. FOR JACOBI METHODS                            MLTGRD1A.3486  
     &, PAT     !OUT. .TRUE. FOR PATTERN SCHEMES                           MLTGRD1A.3487  
     &, SYM     !OUT. .TRUE. FOR SYMMETRIC SCHEMES                         MLTGRD1A.3488  
     &, ILINE   !OUT. .TRUE. FOR I-LINE METHODS AND ALTERNATING SCHEMES    MLTGRD1A.3489  
     &, JLINE   !OUT. .TRUE. FOR J-LINE METHODS AND ALTERNATING SCHEMES    MLTGRD1A.3490  
     &, KLINE   !OUT. .TRUE. FOR K-LINE METHODS AND ALTERNATING SCHEMES    MLTGRD1A.3491  
                                                                           MLTGRD1A.3492  
      INTEGER                                                              MLTGRD1A.3493  
     &  NFB     !OUT.NUMBER OF FORWARD / BACKWARD SWEEPS OF GRID NEEDED    MLTGRD1A.3494  
     &, IPAT    !OUT.AN INTEGER USED TO DISTINGUISH RED AND BLACK POINTS   MLTGRD1A.3495  
                                                                           MLTGRD1A.3496  
      REAL                                                                 MLTGRD1A.3497  
     &  SWJAC   !OUT. A SWITCH WHICH IS ZERO FOR JACOBI METHODS            MLTGRD1A.3498  
     &, SWSYM   !OUT. A SWITCH WHICH IS ZERO FOR SYMMETRIC METHODS         MLTGRD1A.3499  
                                                                           MLTGRD1A.3500  
C*----------------------------------------------------------------------   MLTGRD1A.3501  
                                                                           MLTGRD1A.3502  
C*L NO LOCAL WORK ARRAYS REQUIRED.                                         MLTGRD1A.3503  
C*----------------------------------------------------------------------   MLTGRD1A.3504  
C NO LOCAL VARIABLES.                                                      MLTGRD1A.3505  
                                                                           MLTGRD1A.3506  
C*L NO EXTERNAL ROUTINES CALLED.                                           MLTGRD1A.3507  
C*----------------------------------------------------------------------   MLTGRD1A.3508  
                                                                           MLTGRD1A.3509  
CL----------------------------------------------------------------------   MLTGRD1A.3510  
CL    SECTION 1. SET SWITCHES DEPENDING ON SMOOTHER REQUESTED.             MLTGRD1A.3511  
CL----------------------------------------------------------------------   MLTGRD1A.3512  
                                                                           MLTGRD1A.3513  
CL    SET JACOBI SWITCH                                                    MLTGRD1A.3514  
C     -----------------                                                    MLTGRD1A.3515  
      JAC=.FALSE.                                                          MLTGRD1A.3516  
      IF(KSMOOTH.LE.7.OR.KSMOOTH.EQ.23) JAC=.TRUE.                         MLTGRD1A.3517  
                                                                           MLTGRD1A.3518  
CL    SET PATTERN SWITCH                                                   MLTGRD1A.3519  
C     ------------------                                                   MLTGRD1A.3520  
      PAT=.FALSE.                                                          MLTGRD1A.3521  
      IF(KSMOOTH.GE.16.AND.KSMOOTH.LT.23.OR.KSMOOTH.EQ.26) PAT=.TRUE.      MLTGRD1A.3522  
                                                                           MLTGRD1A.3523  
CL    SET SYMMETRIC SWITCH                                                 MLTGRD1A.3524  
C     --------------------                                                 MLTGRD1A.3525  
      SYM=.FALSE.                                                          MLTGRD1A.3526  
      IF(KSMOOTH.EQ.15.OR.KSMOOTH.EQ.25) SYM=.TRUE.                        MLTGRD1A.3527  
                                                                           MLTGRD1A.3528  
CL    LINE METHODS                                                         MLTGRD1A.3529  
C     ------------                                                         MLTGRD1A.3530  
      ILINE=.FALSE.                                                        MLTGRD1A.3531  
      JLINE=.FALSE.                                                        MLTGRD1A.3532  
      KLINE=.FALSE.                                                        MLTGRD1A.3533  
                                                                           MLTGRD1A.3534  
CL    ALTERNATING                                                          MLTGRD1A.3535  
C     ===========                                                          MLTGRD1A.3536  
      IF(KSMOOTH.EQ.7.OR.KSMOOTH.EQ.14.OR.                                 MLTGRD1A.3537  
     &   KSMOOTH.EQ.15.OR.KSMOOTH.EQ.22) THEN                              MLTGRD1A.3538  
        ILINE=.TRUE.                                                       MLTGRD1A.3539  
        JLINE=.TRUE.                                                       MLTGRD1A.3540  
        KLINE=.TRUE.                                                       MLTGRD1A.3541  
      ENDIF                                                                MLTGRD1A.3542  
                                                                           MLTGRD1A.3543  
CL    I-LINE                                                               MLTGRD1A.3544  
C     ======                                                               MLTGRD1A.3545  
      IF(KSMOOTH.EQ.1.OR.KSMOOTH.EQ.4.OR.KSMOOTH.EQ.5.OR.                  MLTGRD1A.3546  
     &   KSMOOTH.EQ.8.OR.KSMOOTH.EQ.11.OR.KSMOOTH.EQ.12.OR.                MLTGRD1A.3547  
     &   KSMOOTH.EQ.16.OR.KSMOOTH.EQ.19.OR.KSMOOTH.EQ.20) ILINE=.TRUE.     MLTGRD1A.3548  
                                                                           MLTGRD1A.3549  
CL    J-LINE                                                               MLTGRD1A.3550  
C     ======                                                               MLTGRD1A.3551  
      IF(KSMOOTH.EQ.2.OR.KSMOOTH.EQ.4.OR.KSMOOTH.EQ.6.OR.                  MLTGRD1A.3552  
     &   KSMOOTH.EQ.9.OR.KSMOOTH.EQ.11.OR.KSMOOTH.EQ.13.OR.                MLTGRD1A.3553  
     &   KSMOOTH.EQ.17.OR.KSMOOTH.EQ.19.OR.KSMOOTH.EQ.21) JLINE=.TRUE.     MLTGRD1A.3554  
                                                                           MLTGRD1A.3555  
CL    K-LINE                                                               MLTGRD1A.3556  
C     ======                                                               MLTGRD1A.3557  
      IF(KSMOOTH.EQ.3.OR.KSMOOTH.EQ.5.OR.KSMOOTH.EQ.6.OR.                  MLTGRD1A.3558  
     &   KSMOOTH.EQ.10.OR.KSMOOTH.EQ.12.OR.KSMOOTH.EQ.13.OR.               MLTGRD1A.3559  
     &   KSMOOTH.EQ.18.OR.KSMOOTH.EQ.20.OR.KSMOOTH.EQ.21) KLINE=.TRUE.     MLTGRD1A.3560  
                                                                           MLTGRD1A.3561  
      IF (ILINE .AND. .NOT. I_NT) THEN                                     MLTGRD1A.3562  
        WRITE(6,*)' *********** ERROR ***********'                         GIE0F403.412   
        WRITE(6,*)' I-LINE SMOOTHING REQUESTED WHEN ONLY 1 POINT IN I',    GIE0F403.413   
     &         '-DIRECTION.'                                               MLTGRD1A.3565  
        WRITE(6,*)' I-LINE SMOOTHING NOT ENABLED.'                         GIE0F403.414   
        WRITE(6,*)' *********** ERROR ***********'                         GIE0F403.415   
        ILINE=.FALSE.                                                      MLTGRD1A.3568  
      END IF                                                               MLTGRD1A.3569  
                                                                           MLTGRD1A.3570  
      IF (JLINE .AND. .NOT. J_NT) THEN                                     MLTGRD1A.3571  
        WRITE(6,*)' *********** ERROR ***********'                         GIE0F403.416   
        WRITE(6,*)' J-LINE SMOOTHING REQUESTED WHEN ONLY 1 POINT IN J',    GIE0F403.417   
     &         '-DIRECTION.'                                               MLTGRD1A.3574  
        WRITE(6,*)' J-LINE SMOOTHING NOT ENABLED.'                         GIE0F403.418   
        WRITE(6,*)' *********** ERROR ***********'                         GIE0F403.419   
        JLINE=.FALSE.                                                      MLTGRD1A.3577  
      END IF                                                               MLTGRD1A.3578  
                                                                           MLTGRD1A.3579  
      IF (KLINE .AND. .NOT. K_NT) THEN                                     MLTGRD1A.3580  
        WRITE(6,*)' *********** ERROR ***********'                         GIE0F403.420   
        WRITE(6,*)' K-LINE SMOOTHING REQUESTED WHEN ONLY 1 POINT IN K',    GIE0F403.421   
     &         '-DIRECTION.'                                               MLTGRD1A.3583  
        WRITE(6,*)' K-LINE SMOOTHING NOT ENABLED.'                         GIE0F403.422   
        WRITE(6,*)' *********** ERROR ***********'                         GIE0F403.423   
        KLINE=.FALSE.                                                      MLTGRD1A.3586  
      END IF                                                               MLTGRD1A.3587  
                                                                           MLTGRD1A.3588  
      IF (KSMOOTH.LT.23 .AND. .NOT.ILINE .AND. .NOT.JLINE .AND.            MLTGRD1A.3589  
     &                        .NOT.KLINE) THEN                             MLTGRD1A.3590  
        WRITE(6,*)' *********** ERROR ***********'                         GIE0F403.424   
        WRITE(6,*)' LINE SMOOTHING REQUESTED BUT NOT POSSIBLE. '           GIE0F403.425   
        WRITE(6,*)' CHECK ERROR MESSAGES AND USER SUPPLIED INPUTS.'        GIE0F403.426   
      WRITE(6,*)' RED-BLACK POINT SMOOTHING BEING ENABLED FOR THIS RUN.'   GIE0F403.427   
        WRITE(6,*)' *********** ERROR ***********'                         GIE0F403.428   
        KSMOOTH = 26                                                       MLTGRD1A.3596  
      END IF                                                               MLTGRD1A.3597  
                                                                           MLTGRD1A.3598  
CL    SWITCHES                                                             MLTGRD1A.3599  
C     --------                                                             MLTGRD1A.3600  
      NFB=1                                                                MLTGRD1A.3601  
      IPAT=1                                                               MLTGRD1A.3602  
      SWJAC=1.0                                                            MLTGRD1A.3603  
      SWSYM=1.0                                                            MLTGRD1A.3604  
                                                                           MLTGRD1A.3605  
      IF(SYM.OR.PAT) NFB=2                                                 MLTGRD1A.3606  
      IF(PAT) IPAT=2                                                       MLTGRD1A.3607  
      IF(JAC) SWJAC=0.0                                                    MLTGRD1A.3608  
      IF(SYM) SWSYM=0.0                                                    MLTGRD1A.3609  
                                                                           MLTGRD1A.3610  
CL    END OF ROUTINE MG_STYPE                                              MLTGRD1A.3611  
                                                                           MLTGRD1A.3612  
      RETURN                                                               MLTGRD1A.3613  
      END                                                                  MLTGRD1A.3614  
CLL   SUBROUTINE MG_FDMG                                                   MLTGRD1A.3615  
CLL                                                                        MLTGRD1A.3616  
CLL   PURPOSE:                                                             MLTGRD1A.3617  
CLL   -------                                                              MLTGRD1A.3618  
CLL   PERFORMS MAXITS ITERATIONS OF THE FULL APPROXIMATION MULTI-GRID      MLTGRD1A.3619  
CLL   SCHEME (FAS-MG).                                                     MLTGRD1A.3620  
CLL                                                                        MLTGRD1A.3621  
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.3622  
CLL                                                                        MLTGRD1A.3623  
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.3624  
CLL VERSION  DATE                                                          MLTGRD1A.3625  
CLL   3.3                                                                  MLTGRD1A.3626  
CLL                                                                        MLTGRD1A.3627  
CLL                                                                        MLTGRD1A.3628  
CLLEND -----------------------------------------------------------------   MLTGRD1A.3629  
                                                                           MLTGRD1A.3630  
C*L ARGUMENT LIST.                                                         MLTGRD1A.3631  
                                                                           MLTGRD1A.3632  
      SUBROUTINE MG_FDMG(                                                  MLTGRD1A.3633  
     &                   Q,A,B,C1,C2,DEF,D,E,F,G,RHS,I_NT,J_NT,K_NT,       MLTGRD1A.3634  
     &                   START_ADDRESS,LAST_ADDRESS,IMAX,                  MLTGRD1A.3635  
     &                   JMAX,KMAX,JAC,PAT,SYM,ILINE,JLINE,KLINE,NFB,      MLTGRD1A.3636  
     &                   IPAT,SWJAC,SWSYM,I_LENGTH,J_LENGTH,K_LENGTH,      MLTGRD1A.3637  
     &                   NGRIDS,MAXITS,TOL_RES,IPRINT,                     MLTGRD1A.3638  
     &                   KSMOOTH,NPRE,NPOST,NCOARSE,W,KREST,NCGC,          MLTGRD1A.3639  
     &                   COS_P_LATITUDE,SEC_P_LATITUDE,                    MLTGRD1A.3640  
     &                   COS_V_LATITUDE,EARTH_RADIUS_INVERSE,              MLTGRD1A.3641  
     &                   LONGITUDE_STEP_GRIDS,LATITUDE_STEP_GRIDS,         MLTGRD1A.3642  
     &                   START_ADDRESS_2D,LAST_ADDRESS_2D,                 MLTGRD1A.3643  
     &                   RES_DIRS,WORST_SMOOTHING_RATE,VERSION,K_BC,       MLTGRD1A.3644  
     &                   START_ADDRESS_Z,LAST_ADDRESS_Z,Z_Q,Z_MID)         MLTGRD1A.3645  
                                                                           MLTGRD1A.3646  
      IMPLICIT NONE                                                        MLTGRD1A.3647  
                                                                           MLTGRD1A.3648  
      LOGICAL                                                              MLTGRD1A.3649  
     &  I_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN I DIRECTION   MLTGRD1A.3650  
     &, J_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN J DIRECTION   MLTGRD1A.3651  
     &, K_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN K DIRECTION   MLTGRD1A.3652  
                                                                           MLTGRD1A.3653  
      INTEGER                                                              MLTGRD1A.3654  
     & VERSION     !IN. DOMAIN ON WHICH TO SOLVE PROBLEM.                  MLTGRD1A.3655  
     &,K_BC        !IN. VERTICAL BOUNDARY CONDITIONS.                      MLTGRD1A.3656  
                                                                           MLTGRD1A.3657  
      INTEGER                                                              MLTGRD1A.3658  
     &  NGRIDS     !IN. NUMBER OF GRIDS.                                   MLTGRD1A.3659  
     &, MAXITS     !IN. MAX NO OF FAS ITERATIONS WITHOUT CONVERGENCE       MLTGRD1A.3660  
     &, IPRINT     !IN. PARAMETER CONTROLLING QUANTITY OF OUTPUT.          MLTGRD1A.3661  
     &, KSMOOTH    !IN. KIND OF ITERATIVE METHOD USED AS A SMOOTHER.       MLTGRD1A.3662  
                                                                           MLTGRD1A.3663  
      INTEGER                                                              MLTGRD1A.3664  
     &  NPRE       !IN. NO OF PRE-SMOOTHING SWEEPS                         MLTGRD1A.3665  
     &, NPOST      !IN. NO OF POST-SMOOTHING SWEEPS                        MLTGRD1A.3666  
     &, NCOARSE    !IN. NO OF ITERATIONS OF SMOOTHER ON COARSEST MESH      MLTGRD1A.3667  
     &, KREST      !IN. KIND OF RESTRICTION USED.                          MLTGRD1A.3668  
     &, NCGC       !IN. NO OF COARSE GRID CORRECTIONS.                     MLTGRD1A.3669  
     &, I_LENGTH   !IN. NUMBER OF POINTS IN I DIRECTION.                   MLTGRD1A.3670  
     &, J_LENGTH   !IN. NUMBER OF POINTS IN J DIRECTION.                   MLTGRD1A.3671  
     &, K_LENGTH   !IN. NUMBER OF POINTS IN K DIRECTION.                   MLTGRD1A.3672  
                                                                           MLTGRD1A.3673  
      REAL                                                                 MLTGRD1A.3674  
     &  A(I_LENGTH,J_LENGTH,K_LENGTH)   !IN. COEFFICIENT                   MLTGRD1A.3675  
     &, B(I_LENGTH,J_LENGTH,K_LENGTH)   !IN. COEFFICIENT                   MLTGRD1A.3676  
     &, C1(I_LENGTH,J_LENGTH,K_LENGTH)  !IN. COEFFICIENT                   MLTGRD1A.3677  
     &, C2(I_LENGTH,J_LENGTH,K_LENGTH)  !IN. COEFFICIENT                   MLTGRD1A.3678  
     &, DEF(I_LENGTH,J_LENGTH,K_LENGTH) !IN. COEFFICIENT                   MLTGRD1A.3679  
     &, D(I_LENGTH,J_LENGTH,K_LENGTH)   !IN. COEFFICIENT                   MLTGRD1A.3680  
     &, E(I_LENGTH,J_LENGTH,K_LENGTH)   !IN. COEFFICIENT                   MLTGRD1A.3681  
     &, F(I_LENGTH,J_LENGTH,K_LENGTH)   !IN. COEFFICIENT                   MLTGRD1A.3682  
     &, G(I_LENGTH,J_LENGTH,K_LENGTH)   !IN. COEFFICIENT                   MLTGRD1A.3683  
     &, RHS(I_LENGTH,J_LENGTH,K_LENGTH)                                    MLTGRD1A.3684  
     &                          !IN. RIGHT-HAND-SIDE OF EQUATION.          MLTGRD1A.3685  
     &, COS_P_LATITUDE(I_LENGTH,J_LENGTH)                                  MLTGRD1A.3686  
     &                          !IN. COSINE OF LATITUDE AT Q POINTS.       MLTGRD1A.3687  
     &, SEC_P_LATITUDE(I_LENGTH,J_LENGTH)                                  MLTGRD1A.3688  
     &                          !IN. 1./COSINE OF LATITUDE AT Q POINTS.    MLTGRD1A.3689  
     &, COS_V_LATITUDE(I_LENGTH,J_LENGTH)                                  MLTGRD1A.3690  
     &                          !IN. COSINE OF LATITUDE AT B POINTS.       MLTGRD1A.3691  
     &, Z_Q(K_LENGTH)           !IN. VALUE OF Z AT Q POINTS                MLTGRD1A.3692  
     &, Z_MID(K_LENGTH+1)       !IN. VALUE OF Z AT MID POINTS DEFINED      MLTGRD1A.3693  
     &                          !    BETWEEN Q POINTS IN VERTICAL          MLTGRD1A.3694  
     &                          !    FIRST VALUE IS BELOW FIRST Q POINT    MLTGRD1A.3695  
                                                                           MLTGRD1A.3696  
      REAL                                                                 MLTGRD1A.3697  
     &  Q(I_LENGTH,J_LENGTH,K_LENGTH)    !INOUT. SOLUTION.                 MLTGRD1A.3698  
                                                                           MLTGRD1A.3699  
      INTEGER                                                              MLTGRD1A.3700  
     &  IMAX(NGRIDS)  !IN. NUMBER OF NODES IN THE I-DIRECTION              MLTGRD1A.3701  
     &                ! ON EACH GRID.                                      MLTGRD1A.3702  
     &, JMAX(NGRIDS)  !IN. NUMBER OF NODES IN THE J-DIRECTION              MLTGRD1A.3703  
     &                ! ON EACH GRID.                                      MLTGRD1A.3704  
     &, KMAX(NGRIDS)  !IN. NUMBER OF NODES IN THE K-DIRECTION              MLTGRD1A.3705  
     &                ! ON EACH GRID.                                      MLTGRD1A.3706  
     &, START_ADDRESS(NGRIDS) !IN. START ADDRESS IN DATA ARRAY FOR         MLTGRD1A.3707  
     &                        !    EACH GRID.                              MLTGRD1A.3708  
     &, START_ADDRESS_2D(NGRIDS) !IN. START ADDRESS IN DATA ARRAY FOR      MLTGRD1A.3709  
     &                        !       EACH 2-D GRID.                       MLTGRD1A.3710  
     &, START_ADDRESS_Z(NGRIDS) !IN. START ADDRESS IN DATA ARRAY FOR       MLTGRD1A.3711  
     &                        !       EACH Z GRID.                         MLTGRD1A.3712  
     &, RES_DIRS(NGRIDS)      ! RESTRICTED DIRECTIONS.                     MLTGRD1A.3713  
                                                                           MLTGRD1A.3714  
      REAL                                                                 MLTGRD1A.3715  
     &  TOL_RES                     !IN. TOLERANCE FOR RESIDUAL NORM       MLTGRD1A.3716  
     &                              !    RELATIVE TO INITIAL RESIDUAL.     MLTGRD1A.3717  
     &, WORST_SMOOTHING_RATE        !IN. WORST PRACTICAL SMOOTHING RATE    MLTGRD1A.3718  
     &                              !    ACCEPTABLE BEFORE CONVERGENCE     MLTGRD1A.3719  
     &                              !    OR MAXIMUM ITERATIONS REACHED.    MLTGRD1A.3720  
     &, W                           !IN. RELAXATION PARAMETER FOR EACH     MLTGRD1A.3721  
     &                              !    VARIABLE IN SYSTEM                MLTGRD1A.3722  
     &, LATITUDE_STEP_GRIDS(NGRIDS) !IN.                                   MLTGRD1A.3723  
     &, LONGITUDE_STEP_GRIDS(NGRIDS)!IN.                                   MLTGRD1A.3724  
     &, EARTH_RADIUS_INVERSE        !IN.                                   MLTGRD1A.3725  
                                                                           MLTGRD1A.3726  
      INTEGER                                                              MLTGRD1A.3727  
     &  LAST_ADDRESS  !IN. LAST ADDRESS OF DATA ARRAY NEEDED. USED TO      MLTGRD1A.3728  
     &                ! DIMENSION SPACE REQUIRED.                          MLTGRD1A.3729  
     &, LAST_ADDRESS_2D !IN. LAST ADDRESS OF 2-D DATA ARRAY NEEDED. USED   MLTGRD1A.3730  
     &                ! TO DIMENSION SPACE REQUIRED.                       MLTGRD1A.3731  
     &, LAST_ADDRESS_Z !IN. LAST ADDRESS OF Z DATA ARRAY NEEDED. USED      MLTGRD1A.3732  
     &                ! TO DIMENSION SPACE REQUIRED.                       MLTGRD1A.3733  
     &, NFB           !IN. NUMBER OF FORWARD / BACKWARD SWEEPS OF GRID     MLTGRD1A.3734  
     &                ! NEEDED.                                            MLTGRD1A.3735  
     &, IPAT          !IN. USED TO DISTINGUISH BETWEEN RED AND BLACK       MLTGRD1A.3736  
     &                ! POINTS.                                            MLTGRD1A.3737  
                                                                           MLTGRD1A.3738  
      LOGICAL                                                              MLTGRD1A.3739  
     &  JAC     !IN. .TRUE. FOR JACOBI METHODS                             MLTGRD1A.3740  
     &, PAT     !IN. .TRUE. FOR PATTERN SCHEMES                            MLTGRD1A.3741  
     &, SYM     !IN. .TRUE. FOR SYMMETRIC SCHEMES                          MLTGRD1A.3742  
     &, ILINE   !IN. .TRUE. FOR I-LINE METHODS AND ALTERNATING SCHEMES     MLTGRD1A.3743  
     &, JLINE   !IN. .TRUE. FOR J-LINE METHODS AND ALTERNATING SCHEMES     MLTGRD1A.3744  
     &, KLINE   !IN. .TRUE. FOR K-LINE METHODS AND ALTERNATING SCHEMES     MLTGRD1A.3745  
                                                                           MLTGRD1A.3746  
      REAL                                                                 MLTGRD1A.3747  
     &  SWJAC   !IN. A SWITCH WHICH IS ZERO FOR JACOBI METHODS             MLTGRD1A.3748  
     &, SWSYM   !IN. A SWITCH WHICH IS ZERO FOR SYMMETRIC METHODS          MLTGRD1A.3749  
C*----------------------------------------------------------------------   MLTGRD1A.3750  
                                                                           MLTGRD1A.3751  
C*L  18 LOCAL WORK ARRAYS REQUIRED.                                        MLTGRD1A.3752  
                                                                           MLTGRD1A.3753  
      REAL                                                                 MLTGRD1A.3754  
     &  Q_GRIDS(LAST_ADDRESS)   ! SPACE FOR Q ON ALL GRIDS                 MLTGRD1A.3755  
     &, RHS_GRIDS(LAST_ADDRESS) ! SPACE FOR RHS ON ALL GRIDS               MLTGRD1A.3756  
     &, A_GRIDS(LAST_ADDRESS)   ! SPACE FOR A COEFFICIENT ON ALL GRIDS     MLTGRD1A.3757  
     &, B_GRIDS(LAST_ADDRESS)   ! SPACE FOR B COEFFICIENT ON ALL GRIDS     MLTGRD1A.3758  
     &, C1_GRIDS(LAST_ADDRESS)  ! SPACE FOR C1 COEFFICIENT ON ALL GRIDS    MLTGRD1A.3759  
     &, C2_GRIDS(LAST_ADDRESS)  ! SPACE FOR C2 COEFFICIENT ON ALL GRIDS    MLTGRD1A.3760  
     &, D_GRIDS(LAST_ADDRESS)   ! SPACE FOR D COEFFICIENT ON ALL GRIDS     MLTGRD1A.3761  
     &, DEF_GRIDS(LAST_ADDRESS) ! SPACE FOR DEF COEFFICIENT ON ALL GRIDS   MLTGRD1A.3762  
     &, E_GRIDS(LAST_ADDRESS)   ! SPACE FOR E COEFFICIENT ON ALL GRIDS     MLTGRD1A.3763  
     &, F_GRIDS(LAST_ADDRESS)   ! SPACE FOR F COEFFICIENT ON ALL GRIDS     MLTGRD1A.3764  
     &, G_GRIDS(LAST_ADDRESS)   ! SPACE FOR G COEFFICIENT ON ALL GRIDS     MLTGRD1A.3765  
     &, Z_Q_GRIDS(LAST_ADDRESS_Z)   ! SPACE FOR Z_Q ON ALL GRIDS           MLTGRD1A.3766  
     &, Z_MID_GRIDS(LAST_ADDRESS_Z) ! SPACE FOR Z_MID ON ALL GRIDS         MLTGRD1A.3767  
     &, WORK_SPACE(I_LENGTH*J_LENGTH*K_LENGTH)                             MLTGRD1A.3768  
     &, COS_P_GRIDS(LAST_ADDRESS_2D)                                       MLTGRD1A.3769  
     &, SEC_P_GRIDS(LAST_ADDRESS_2D)                                       MLTGRD1A.3770  
     &, COS_V_GRIDS(LAST_ADDRESS_2D)                                       MLTGRD1A.3771  
                                                                           MLTGRD1A.3772  
      INTEGER                                                              MLTGRD1A.3773  
     &  IDGC(NGRIDS)            ! COUNTER FOR NUMBER OF TIMES GRID         MLTGRD1A.3774  
     &                          ! CORRECTIONED IN DESCENDING PART OF MG.   MLTGRD1A.3775  
                                                                           MLTGRD1A.3776  
C*----------------------------------------------------------------------   MLTGRD1A.3777  
C LOCAL VARIABLES.                                                         MLTGRD1A.3778  
                                                                           MLTGRD1A.3779  
      INTEGER                                                              MLTGRD1A.3780  
     &  I,J,K,I2,BASE         ! LOOP COUNTERS                              MLTGRD1A.3781  
     &, MG_ITERATIONS         ! MULTI-GRID ITERATION NUMBER.               MLTGRD1A.3782  
     &, GRID_CURRENT          ! CURRENT GRID NUMBER.                       MLTGRD1A.3783  
     &, I_CURRENT             ! NUMBER OF I POINTS ON CURRENT GRID         MLTGRD1A.3784  
     &, J_CURRENT             ! NUMBER OF J POINTS ON CURRENT GRID         MLTGRD1A.3785  
     &, K_CURRENT             ! NUMBER OF K POINTS ON CURRENT GRID         MLTGRD1A.3786  
     &, ADDRESS_CURRENT       ! START ADDRESS FOR CURRENT GRID.            MLTGRD1A.3787  
     &, ADDRESS_CURRENT_2D    ! START ADDRESS FOR CURRENT 2-D GRID.        MLTGRD1A.3788  
     &, ADDRESS_CURRENT_Z     ! START ADDRESS FOR CURRENT Z GRID.          MLTGRD1A.3789  
     &, I_FINER               ! NUMBER OF I POINTS ON FINER GRID           MLTGRD1A.3790  
     &, J_FINER               ! NUMBER OF J POINTS ON FINER GRID           MLTGRD1A.3791  
     &, K_FINER               ! NUMBER OF K POINTS ON FINER GRID           MLTGRD1A.3792  
     &, I_COARSER             ! NUMBER OF I POINTS ON COARSER GRID         MLTGRD1A.3793  
     &, J_COARSER             ! NUMBER OF J POINTS ON COARSER GRID         MLTGRD1A.3794  
     &, K_COARSER             ! NUMBER OF K POINTS ON COARSER GRID         MLTGRD1A.3795  
     &, START_ADDRESS_FINER   ! START ADDRESS OF FINER GRID.               MLTGRD1A.3796  
     &, START_ADDRESS_FINER_2D! START ADDRESS OF 2-D FINER GRID.           MLTGRD1A.3797  
     &, START_ADDRESS_FINER_Z ! START ADDRESS OF Z FINER GRID.             MLTGRD1A.3798  
     &, START_ADDRESS_COARSER ! START ADDRESS OF COARSER GRID.             MLTGRD1A.3799  
     &, START_GRID            ! START GRID FOR DESCENDING PART OF MG       MLTGRD1A.3800  
     &                        ! CYCLE.                                     MLTGRD1A.3801  
                                                                           MLTGRD1A.3802  
      REAL                                                                 MLTGRD1A.3803  
     &  RMS_RES              ! ROOT MEAN SQUARE RESIDUAL NORM.             MLTGRD1A.3804  
     &, RMS_RES_INIT         ! INITIAL ROOT MEAN SQUARE RESIDUAL NORM.     MLTGRD1A.3805  
     &, RMS_RES_OLD          ! ROOT MEAN SQUARE RESIDUAL NORM FROM         MLTGRD1A.3806  
     &                       ! PREVIOUS ITERATION.                         MLTGRD1A.3807  
     &, CONVERGENCE_RATE     ! MG CONVERGENCE RATE.                        MLTGRD1A.3808  
     &, PRACTICAL_SMOOTHING_RATE ! SEE CODE FOR DETAILS.                   MLTGRD1A.3809  
                                                                           MLTGRD1A.3810  
      LOGICAL                                                              MLTGRD1A.3811  
     &  L_CNTL               ! CONTROLS DO WHILE LOOPS.                    MLTGRD1A.3812  
     &, L_DESCEND            ! TRUE IF MG-CYCLE HAS A DESCENT PART TO      MLTGRD1A.3813  
     &                       ! DO.                                         MLTGRD1A.3814  
     &, L_ASCEND             ! TRUE IF MG-CYCLE IS IN AN ASCENT STAGE.     MLTGRD1A.3815  
     &, L_ITERATE            ! TRUE FOR MULTI-GRID ITERATIONS.             MLTGRD1A.3816  
     &, L_FIRST_DESCENT      ! TRUE IF FIRST TIME THROUGH DESCENT LOOP.    MLTGRD1A.3817  
                                                                           MLTGRD1A.3818  
C*L   EXTERNAL ROUTINES CALLED.                                            MLTGRD1A.3819  
      EXTERNAL MG_SMOOTH,MG_RESTRICT,MG_PROLONG,                           MLTGRD1A.3820  
     &         MG_LEFT_HAND_SIDE,MG_CALC_Z                                 MLTGRD1A.3821  
                                                                           MLTGRD1A.3822  
C*----------------------------------------------------------------------   MLTGRD1A.3823  
                                                                           MLTGRD1A.3824  
CL----------------------------------------------------------------------   MLTGRD1A.3825  
CL    SECTION 1. INITIALISATION.                                           MLTGRD1A.3826  
CL----------------------------------------------------------------------   MLTGRD1A.3827  
                                                                           MLTGRD1A.3828  
CL    COPY A,B,C,G,RHS AND Q INTO _GRIDS LOCATIONS.                        MLTGRD1A.3829  
                                                                           MLTGRD1A.3830  
      DO K= 1,K_LENGTH                                                     MLTGRD1A.3831  
        IF(K_NT)Z_Q_GRIDS(START_ADDRESS_Z(NGRIDS)+K-1) = Z_Q(K)            MLTGRD1A.3832  
        BASE = START_ADDRESS(NGRIDS) + (K-1)*I_LENGTH*J_LENGTH - 1         MLTGRD1A.3833  
        DO J= 1,J_LENGTH                                                   MLTGRD1A.3834  
          I2 = (J-1)*I_LENGTH                                              MLTGRD1A.3835  
          DO I= 1,I_LENGTH                                                 MLTGRD1A.3836  
            Q_GRIDS(BASE+I2+I)   = Q(I,J,K)                                MLTGRD1A.3837  
            A_GRIDS(BASE+I2+I)   = A(I,J,K)                                MLTGRD1A.3838  
            B_GRIDS(BASE+I2+I)   = B(I,J,K)                                MLTGRD1A.3839  
            C2_GRIDS(BASE+I2+I)  = C2(I,J,K)                               MLTGRD1A.3840  
            DEF_GRIDS(BASE+I2+I) = DEF(I,J,K)                              MLTGRD1A.3841  
            D_GRIDS(BASE+I2+I)   = D(I,J,K)                                MLTGRD1A.3842  
            E_GRIDS(BASE+I2+I)   = E(I,J,K)                                MLTGRD1A.3843  
            G_GRIDS(BASE+I2+I)   = G(I,J,K)                                MLTGRD1A.3844  
            RHS_GRIDS(BASE+I2+I) = RHS(I,J,K)                              MLTGRD1A.3845  
          END DO                                                           MLTGRD1A.3846  
        END DO                                                             MLTGRD1A.3847  
      END DO                                                               MLTGRD1A.3848  
      IF(K_NT) THEN                                                        MLTGRD1A.3849  
        DO K= 1,K_LENGTH-1                                                 MLTGRD1A.3850  
          BASE = START_ADDRESS(NGRIDS) + (K-1)*I_LENGTH*J_LENGTH - 1       MLTGRD1A.3851  
          DO J= 1,J_LENGTH                                                 MLTGRD1A.3852  
            I2 = (J-1)*I_LENGTH                                            MLTGRD1A.3853  
            DO I= 1,I_LENGTH                                               MLTGRD1A.3854  
              C1_GRIDS(BASE+I2+I)   = C1(I,J,K)                            MLTGRD1A.3855  
              F_GRIDS(BASE+I2+I)    = F(I,J,K)                             MLTGRD1A.3856  
            END DO                                                         MLTGRD1A.3857  
          END DO                                                           MLTGRD1A.3858  
        END DO                                                             MLTGRD1A.3859  
        DO K= 1,K_LENGTH+1                                                 MLTGRD1A.3860  
          Z_MID_GRIDS(START_ADDRESS_Z(NGRIDS)+K-1) = Z_MID(K)              MLTGRD1A.3861  
        END DO                                                             MLTGRD1A.3862  
      END IF                                                               MLTGRD1A.3863  
      BASE = START_ADDRESS_2D(NGRIDS) - 1                                  MLTGRD1A.3864  
      DO J= 1,J_LENGTH                                                     MLTGRD1A.3865  
        I2 = (J-1)*I_LENGTH                                                MLTGRD1A.3866  
        DO I= 1,I_LENGTH                                                   MLTGRD1A.3867  
          COS_P_GRIDS(BASE+I2+I) = COS_P_LATITUDE(I,J)                     MLTGRD1A.3868  
          SEC_P_GRIDS(BASE+I2+I) = SEC_P_LATITUDE(I,J)                     MLTGRD1A.3869  
        END DO                                                             MLTGRD1A.3870  
      END DO                                                               MLTGRD1A.3871  
      DO J= 1,J_LENGTH-1                                                   MLTGRD1A.3872  
        I2 = (J-1)*I_LENGTH                                                MLTGRD1A.3873  
        DO I= 1,I_LENGTH                                                   MLTGRD1A.3874  
          COS_V_GRIDS(BASE+I2+I) = COS_V_LATITUDE(I,J)                     MLTGRD1A.3875  
        END DO                                                             MLTGRD1A.3876  
      END DO                                                               MLTGRD1A.3877  
                                                                           MLTGRD1A.3878  
      RMS_RES_OLD = 1.0                                                    MLTGRD1A.3879  
                                                                           MLTGRD1A.3880  
CL----------------------------------------------------------------------   MLTGRD1A.3881  
CL    SECTION 2. IF ONLY 1 GRID.                                           MLTGRD1A.3882  
CL----------------------------------------------------------------------   MLTGRD1A.3883  
                                                                           MLTGRD1A.3884  
      IF(NGRIDS.EQ.1) THEN                                                 MLTGRD1A.3885  
        IF(IPRINT.GE.2) WRITE(6,9000)                                      MLTGRD1A.3886  
                                                                           MLTGRD1A.3887  
        GRID_CURRENT=NGRIDS                                                MLTGRD1A.3888  
        I_CURRENT=IMAX(GRID_CURRENT)                                       MLTGRD1A.3889  
        J_CURRENT=JMAX(GRID_CURRENT)                                       MLTGRD1A.3890  
        K_CURRENT=KMAX(GRID_CURRENT)                                       MLTGRD1A.3891  
        ADDRESS_CURRENT=START_ADDRESS(GRID_CURRENT)                        MLTGRD1A.3892  
        ADDRESS_CURRENT_2D=START_ADDRESS_2D(GRID_CURRENT)                  MLTGRD1A.3893  
        ADDRESS_CURRENT_Z=START_ADDRESS_Z(GRID_CURRENT)                    MLTGRD1A.3894  
                                                                           MLTGRD1A.3895  
CL    CALL SMOOTHER.                                                       MLTGRD1A.3896  
                                                                           MLTGRD1A.3897  
        L_CNTL = .TRUE.                                                    MLTGRD1A.3898  
        I=1                                                                MLTGRD1A.3899  
        DO WHILE (L_CNTL)                                                  MLTGRD1A.3900  
          CALL MG_SMOOTH(Q_GRIDS(ADDRESS_CURRENT),                         MLTGRD1A.3901  
     &                   RHS_GRIDS(ADDRESS_CURRENT),                       MLTGRD1A.3902  
     &                   A_GRIDS(ADDRESS_CURRENT),                         MLTGRD1A.3903  
     &                   B_GRIDS(ADDRESS_CURRENT),                         MLTGRD1A.3904  
     &                   C1_GRIDS(ADDRESS_CURRENT),                        MLTGRD1A.3905  
     &                   C2_GRIDS(ADDRESS_CURRENT),                        MLTGRD1A.3906  
     &                   DEF_GRIDS(ADDRESS_CURRENT),                       MLTGRD1A.3907  
     &                   D_GRIDS(ADDRESS_CURRENT),                         MLTGRD1A.3908  
     &                   E_GRIDS(ADDRESS_CURRENT),                         MLTGRD1A.3909  
     &                   F_GRIDS(ADDRESS_CURRENT),                         MLTGRD1A.3910  
     &                   G_GRIDS(ADDRESS_CURRENT),                         MLTGRD1A.3911  
     &                   COS_P_GRIDS(ADDRESS_CURRENT_2D),                  MLTGRD1A.3912  
     &                   SEC_P_GRIDS(ADDRESS_CURRENT_2D),                  MLTGRD1A.3913  
     &                   COS_V_GRIDS(ADDRESS_CURRENT_2D),                  MLTGRD1A.3914  
     &                   I_CURRENT,J_CURRENT,K_CURRENT,                    MLTGRD1A.3915  
     &                   W,GRID_CURRENT,RMS_RES,IPRINT,                    MLTGRD1A.3916  
     &                   SWJAC,SWSYM,JAC,PAT,SYM,ILINE,JLINE,KLINE,        MLTGRD1A.3917  
     &                   NFB,IPAT,LATITUDE_STEP_GRIDS(GRID_CURRENT),       MLTGRD1A.3918  
     &                   LONGITUDE_STEP_GRIDS(GRID_CURRENT),               MLTGRD1A.3919  
     &                   EARTH_RADIUS_INVERSE,VERSION,K_BC,I_NT,J_NT,      MLTGRD1A.3920  
     &                   K_NT,Z_Q_GRIDS(ADDRESS_CURRENT_Z),                MLTGRD1A.3921  
     &                   Z_MID_GRIDS(ADDRESS_CURRENT_Z))                   MLTGRD1A.3922  
                                                                           MLTGRD1A.3923  
          IF(I.EQ.1) THEN                                                  MLTGRD1A.3924  
            RMS_RES_INIT = RMS_RES                                         MLTGRD1A.3925  
          END IF                                                           MLTGRD1A.3926  
                                                                           MLTGRD1A.3927  
CL    CHECK CONVERGENCE.                                                   MLTGRD1A.3928  
                                                                           MLTGRD1A.3929  
          IF(RMS_RES.LT.TOL_RES*RMS_RES_INIT) THEN                         MLTGRD1A.3930  
            IF(IPRINT.GE.1) WRITE(6,9001) I                                MLTGRD1A.3931  
            L_CNTL = .FALSE.                                               MLTGRD1A.3932  
          END IF                                                           MLTGRD1A.3933  
                                                                           MLTGRD1A.3934  
CL    UPDATE LOOP COUNTER. IF EXCEEDED NUMBER OF ITERATIONS STOP           MLTGRD1A.3935  
CL    OUTPUT FAILURE MESSAGE IF ASKED FOR.                                 MLTGRD1A.3936  
          I=I+1                                                            MLTGRD1A.3937  
          IF(I.GT.MAXITS) THEN                                             MLTGRD1A.3938  
            L_CNTL = .FALSE.                                               MLTGRD1A.3939  
            IF(IPRINT.GE.1) WRITE(6,9002) MAXITS                           MLTGRD1A.3940  
          END IF                                                           MLTGRD1A.3941  
C END DO LOOP                                                              MLTGRD1A.3942  
        END DO                                                             MLTGRD1A.3943  
                                                                           MLTGRD1A.3944  
      ELSE                                                                 MLTGRD1A.3945  
                                                                           MLTGRD1A.3946  
CL----------------------------------------------------------------------   MLTGRD1A.3947  
CL    SECTION 3. PERFORM MAXITS OF FAS-MG SCHEME.                          MLTGRD1A.3948  
CL----------------------------------------------------------------------   MLTGRD1A.3949  
                                                                           MLTGRD1A.3950  
C ----------------------------------------------------------------------   MLTGRD1A.3951  
CL    SECTION 3.0. SET UP VERTICAL LEVEL INFORMATION FOR ALL GRIDS,        MLTGRD1A.3952  
CL                 IF A 3-D RUN.                                           MLTGRD1A.3953  
C ----------------------------------------------------------------------   MLTGRD1A.3954  
                                                                           MLTGRD1A.3955  
        IF(K_NT) THEN                                                      MLTGRD1A.3956  
          CALL MG_CALC_Z(Z_Q_GRIDS,Z_MID_GRIDS,START_ADDRESS_Z,            MLTGRD1A.3957  
     &                   LAST_ADDRESS_Z,NGRIDS,KMAX,RES_DIRS)              MLTGRD1A.3958  
          IF(IPRINT.GE.3) THEN                                             MLTGRD1A.3959  
            DO I=1,NGRIDS                                                  MLTGRD1A.3960  
              WRITE(6,*)' GRID ',I,' LEVELS= ',KMAX(I)                     GIE0F403.429   
              DO K=1,KMAX(I)                                               MLTGRD1A.3962  
      WRITE(6,*)' Z_MID = ',Z_MID_GRIDS(START_ADDRESS_Z(I)+K-1),           GIE0F403.430   
     &                 ' Z_Q = ',Z_Q_GRIDS(START_ADDRESS_Z(I)+K-1)         MLTGRD1A.3964  
              END DO                                                       MLTGRD1A.3965  
              K= KMAX(I) + 1                                               MLTGRD1A.3966  
              WRITE(6,*)' Z_MID = ',Z_MID_GRIDS(START_ADDRESS_Z(I)+K-1)    GIE0F403.431   
            END DO                                                         MLTGRD1A.3968  
          END IF                                                           MLTGRD1A.3969  
        END IF                                                             MLTGRD1A.3970  
                                                                           MLTGRD1A.3971  
C ----------------------------------------------------------------------   MLTGRD1A.3972  
CL    SECTION 3.01.CONTROL LOOP BEGINS.                                    MLTGRD1A.3973  
C ----------------------------------------------------------------------   MLTGRD1A.3974  
                                                                           MLTGRD1A.3975  
        IF(IPRINT.GE.2) WRITE(6,9000)                                      MLTGRD1A.3976  
                                                                           MLTGRD1A.3977  
        L_ITERATE = .TRUE.                                                 MLTGRD1A.3978  
        L_FIRST_DESCENT = .TRUE.                                           MLTGRD1A.3979  
        MG_ITERATIONS = 0                                                  MLTGRD1A.3980  
                                                                           MLTGRD1A.3981  
CL CONTROL LOOP OVER ITERATIONS.                                           MLTGRD1A.3982  
        DO WHILE (L_ITERATE)                                               MLTGRD1A.3983  
                                                                           MLTGRD1A.3984  
          MG_ITERATIONS = MG_ITERATIONS + 1                                MLTGRD1A.3985  
          IF(IPRINT.GE.2) WRITE(6,9005) MG_ITERATIONS                      MLTGRD1A.3986  
                                                                           MLTGRD1A.3987  
C SET COUNTER FOR NUMBER OF COARSE GRID CORRECTIONS                        MLTGRD1A.3988  
                                                                           MLTGRD1A.3989  
          DO I=1,NGRIDS                                                    MLTGRD1A.3990  
            IDGC(I)=0                                                      MLTGRD1A.3991  
          END DO                                                           MLTGRD1A.3992  
                                                                           MLTGRD1A.3993  
CL    SET ADDRESSING AND NUMBER OF POINTS.                                 MLTGRD1A.3994  
                                                                           MLTGRD1A.3995  
          I_CURRENT=IMAX(NGRIDS)                                           MLTGRD1A.3996  
          J_CURRENT=JMAX(NGRIDS)                                           MLTGRD1A.3997  
          K_CURRENT=KMAX(NGRIDS)                                           MLTGRD1A.3998  
          ADDRESS_CURRENT=START_ADDRESS(NGRIDS)                            MLTGRD1A.3999  
          ADDRESS_CURRENT_2D=START_ADDRESS_2D(NGRIDS)                      MLTGRD1A.4000  
          ADDRESS_CURRENT_Z=START_ADDRESS_Z(NGRIDS)                        MLTGRD1A.4001  
          START_GRID = NGRIDS                                              MLTGRD1A.4002  
          L_DESCEND = .TRUE.                                               MLTGRD1A.4003  
                                                                           MLTGRD1A.4004  
C ----------------------------------------------------------------------   MLTGRD1A.4005  
CL    SECTION 3.1. PERFORM DESCENT PART OF MULTI-GRID.                     MLTGRD1A.4006  
CL                 IF A V-CYCLE THEN CODE SIMPLY COMES STRAIGHT BACK UP.   MLTGRD1A.4007  
CL                 IF A W-CYCLE THEN CODE KEEPS COMING UP ONE FURTHUR      MLTGRD1A.4008  
CL                 GRID EACH TIME THROUGH.                                 MLTGRD1A.4009  
CL    EG: 4 GRIDS.                                                         MLTGRD1A.4010  
CL    V-CYCLE GOES 4           4  W-CYCLE 4               4                MLTGRD1A.4011  
CL                  \         /            \             /                 MLTGRD1A.4012  
CL                   3       3              3           3                  MLTGRD1A.4013  
CL                    \     /                \         /                   MLTGRD1A.4014  
CL                     2   2                  2   2   2                    MLTGRD1A.4015  
CL                      \ /                    \ / \ /                     MLTGRD1A.4016  
CL                       1                      1   1                      MLTGRD1A.4017  
CL                                                                         MLTGRD1A.4018  
CL    FULL MULTI-GRID GOES 4                        4                      MLTGRD1A.4019  
CL                          \                      /                       MLTGRD1A.4020  
CL                           3            3       3                        MLTGRD1A.4021  
CL                            \          / \     /                         MLTGRD1A.4022  
CL                             2   2   2    2   2                          MLTGRD1A.4023  
CL                              \ / \ /      \ /                           MLTGRD1A.4024  
CL                               1   1        1                            MLTGRD1A.4025  
CL                                                                         MLTGRD1A.4026  
CL                  THUS ON A W-CYCLE THE DESCENT PART OF THE CODE CAN     MLTGRD1A.4027  
CL                  BE CALLED MORE THAN ONCE STARTING ON DIFFERENT GRIDS   MLTGRD1A.4028  
C ----------------------------------------------------------------------   MLTGRD1A.4029  
                                                                           MLTGRD1A.4030  
          DO WHILE (L_DESCEND)                                             MLTGRD1A.4031  
CL    LOOP OVER ALL GRIDS EXCEPT COARSEST.                                 MLTGRD1A.4032  
                                                                           MLTGRD1A.4033  
            DO GRID_CURRENT = START_GRID,2,-1                              MLTGRD1A.4034  
                                                                           MLTGRD1A.4035  
C ----------------------------------------------------------------------   MLTGRD1A.4036  
CL    SECTION 3.1.1 CALL SMOOTH TO CALCULATE SOLUTION ON CURRENT GRID.     MLTGRD1A.4037  
C ----------------------------------------------------------------------   MLTGRD1A.4038  
                                                                           MLTGRD1A.4039  
CL    SMOOTHING                                                            MLTGRD1A.4040  
                                                                           MLTGRD1A.4041  
              DO I=1,NPRE                                                  MLTGRD1A.4042  
                CALL MG_SMOOTH(Q_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4043  
     &                         RHS_GRIDS(ADDRESS_CURRENT),                 MLTGRD1A.4044  
     &                         A_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4045  
     &                         B_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4046  
     &                         C1_GRIDS(ADDRESS_CURRENT),                  MLTGRD1A.4047  
     &                         C2_GRIDS(ADDRESS_CURRENT),                  MLTGRD1A.4048  
     &                         DEF_GRIDS(ADDRESS_CURRENT),                 MLTGRD1A.4049  
     &                         D_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4050  
     &                         E_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4051  
     &                         F_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4052  
     &                         G_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4053  
     &                         COS_P_GRIDS(ADDRESS_CURRENT_2D),            MLTGRD1A.4054  
     &                         SEC_P_GRIDS(ADDRESS_CURRENT_2D),            MLTGRD1A.4055  
     &                         COS_V_GRIDS(ADDRESS_CURRENT_2D),            MLTGRD1A.4056  
     &                         I_CURRENT,J_CURRENT,K_CURRENT,              MLTGRD1A.4057  
     &                         W,GRID_CURRENT,RMS_RES,IPRINT,              MLTGRD1A.4058  
     &                         SWJAC,SWSYM,JAC,PAT,SYM,ILINE,JLINE,        MLTGRD1A.4059  
     &                         KLINE,NFB,IPAT,                             MLTGRD1A.4060  
     &                         LATITUDE_STEP_GRIDS(GRID_CURRENT),          MLTGRD1A.4061  
     &                         LONGITUDE_STEP_GRIDS(GRID_CURRENT),         MLTGRD1A.4062  
     &                         EARTH_RADIUS_INVERSE,VERSION,K_BC,          MLTGRD1A.4063  
     &                         I_NT,J_NT,K_NT,                             MLTGRD1A.4064  
     &                         Z_Q_GRIDS(ADDRESS_CURRENT_Z),               MLTGRD1A.4065  
     &                         Z_MID_GRIDS(ADDRESS_CURRENT_Z))             MLTGRD1A.4066  
                                                                           MLTGRD1A.4067  
                IF(I.EQ.1 .AND. MG_ITERATIONS.EQ.1) THEN                   MLTGRD1A.4068  
                  RMS_RES_INIT = RMS_RES                                   MLTGRD1A.4069  
                END IF                                                     MLTGRD1A.4070  
                                                                           MLTGRD1A.4071  
              END DO                                                       MLTGRD1A.4072  
                                                                           MLTGRD1A.4073  
C UPDATE DESCENDING GRID COUNTER.                                          MLTGRD1A.4074  
                                                                           MLTGRD1A.4075  
              IDGC(GRID_CURRENT) = IDGC(GRID_CURRENT)+1                    MLTGRD1A.4076  
                                                                           MLTGRD1A.4077  
C ----------------------------------------------------------------------   MLTGRD1A.4078  
CL    SECTION 3.1.2 CALCULATE RESIDUAL BY CALLING LEFT_HAND_SIDE AND       MLTGRD1A.4079  
CL                  SUBTRACTING FROM RIGHT-HAND-SIDE.                      MLTGRD1A.4080  
C ----------------------------------------------------------------------   MLTGRD1A.4081  
                                                                           MLTGRD1A.4082  
CL    CALL LEFT_HAND_SIDE.                                                 MLTGRD1A.4083  
                                                                           MLTGRD1A.4084  
C LHS VALUE IS RETURNED IN WORK_SPACE                                      MLTGRD1A.4085  
                                                                           MLTGRD1A.4086  
              CALL MG_LEFT_HAND_SIDE(Q_GRIDS(ADDRESS_CURRENT),             MLTGRD1A.4087  
     &                               A_GRIDS(ADDRESS_CURRENT),             MLTGRD1A.4088  
     &                               B_GRIDS(ADDRESS_CURRENT),             MLTGRD1A.4089  
     &                               C1_GRIDS(ADDRESS_CURRENT),            MLTGRD1A.4090  
     &                               C2_GRIDS(ADDRESS_CURRENT),            MLTGRD1A.4091  
     &                               DEF_GRIDS(ADDRESS_CURRENT),           MLTGRD1A.4092  
     &                               D_GRIDS(ADDRESS_CURRENT),             MLTGRD1A.4093  
     &                               E_GRIDS(ADDRESS_CURRENT),             MLTGRD1A.4094  
     &                               F_GRIDS(ADDRESS_CURRENT),             MLTGRD1A.4095  
     &                               G_GRIDS(ADDRESS_CURRENT),             MLTGRD1A.4096  
     &                               WORK_SPACE,                           MLTGRD1A.4097  
     &                               I_CURRENT,J_CURRENT,K_CURRENT,        MLTGRD1A.4098  
     &                               COS_P_GRIDS(ADDRESS_CURRENT_2D),      MLTGRD1A.4099  
     &                               SEC_P_GRIDS(ADDRESS_CURRENT_2D),      MLTGRD1A.4100  
     &                               COS_V_GRIDS(ADDRESS_CURRENT_2D),      MLTGRD1A.4101  
     &                               EARTH_RADIUS_INVERSE,                 MLTGRD1A.4102  
     &                               LATITUDE_STEP_GRIDS(GRID_CURRENT),    MLTGRD1A.4103  
     &                               LONGITUDE_STEP_GRIDS(GRID_CURRENT),   MLTGRD1A.4104  
     &                               VERSION,I_NT,J_NT,K_NT,               MLTGRD1A.4105  
     &                               Z_Q_GRIDS(ADDRESS_CURRENT_Z),         MLTGRD1A.4106  
     &                               Z_MID_GRIDS(ADDRESS_CURRENT_Z))       MLTGRD1A.4107  
                                                                           MLTGRD1A.4108  
CL    CALCULATE RESIDUAL.                                                  MLTGRD1A.4109  
C RESIDUAL IS STORED IN WORK_SPACE.                                        MLTGRD1A.4110  
                                                                           MLTGRD1A.4111  
              DO I=1,I_CURRENT*J_CURRENT*K_CURRENT                         MLTGRD1A.4112  
                WORK_SPACE(I) = RHS_GRIDS(ADDRESS_CURRENT+I-1)             MLTGRD1A.4113  
     &                           - WORK_SPACE(I)                           MLTGRD1A.4114  
              END DO                                                       MLTGRD1A.4115  
                                                                           MLTGRD1A.4116  
C ----------------------------------------------------------------------   MLTGRD1A.4117  
CL    SECTION 3.1.3 RESTRICT FROM CURRENT GRID TO COARSER ONE.             MLTGRD1A.4118  
C ----------------------------------------------------------------------   MLTGRD1A.4119  
                                                                           MLTGRD1A.4120  
              I_FINER = I_CURRENT                                          MLTGRD1A.4121  
              J_FINER = J_CURRENT                                          MLTGRD1A.4122  
              K_FINER = K_CURRENT                                          MLTGRD1A.4123  
              START_ADDRESS_FINER = ADDRESS_CURRENT                        MLTGRD1A.4124  
              START_ADDRESS_FINER_2D = ADDRESS_CURRENT_2D                  MLTGRD1A.4125  
              START_ADDRESS_FINER_Z = ADDRESS_CURRENT_Z                    MLTGRD1A.4126  
              I_CURRENT = IMAX(GRID_CURRENT-1)                             MLTGRD1A.4127  
              J_CURRENT = JMAX(GRID_CURRENT-1)                             MLTGRD1A.4128  
              K_CURRENT = KMAX(GRID_CURRENT-1)                             MLTGRD1A.4129  
              ADDRESS_CURRENT = START_ADDRESS(GRID_CURRENT-1)              MLTGRD1A.4130  
              ADDRESS_CURRENT_2D = START_ADDRESS_2D(GRID_CURRENT-1)        MLTGRD1A.4131  
              ADDRESS_CURRENT_Z = START_ADDRESS_Z(GRID_CURRENT-1)          MLTGRD1A.4132  
                                                                           MLTGRD1A.4133  
CL    CALL RESTRICT.                                                       MLTGRD1A.4134  
                                                                           MLTGRD1A.4135  
              CALL MG_RESTRICT(Q_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4136  
     &                         Q_GRIDS(START_ADDRESS_FINER),               MLTGRD1A.4137  
     &                         RHS_GRIDS(ADDRESS_CURRENT),WORK_SPACE,      MLTGRD1A.4138  
     &                         A_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4139  
     &                         A_GRIDS(START_ADDRESS_FINER),               MLTGRD1A.4140  
     &                         B_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4141  
     &                         B_GRIDS(START_ADDRESS_FINER),               MLTGRD1A.4142  
     &                         C1_GRIDS(ADDRESS_CURRENT),                  MLTGRD1A.4143  
     &                         C1_GRIDS(START_ADDRESS_FINER),              MLTGRD1A.4144  
     &                         C2_GRIDS(ADDRESS_CURRENT),                  MLTGRD1A.4145  
     &                         C2_GRIDS(START_ADDRESS_FINER),              MLTGRD1A.4146  
     &                         DEF_GRIDS(ADDRESS_CURRENT),                 MLTGRD1A.4147  
     &                         DEF_GRIDS(START_ADDRESS_FINER),             MLTGRD1A.4148  
     &                         D_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4149  
     &                         D_GRIDS(START_ADDRESS_FINER),               MLTGRD1A.4150  
     &                         E_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4151  
     &                         E_GRIDS(START_ADDRESS_FINER),               MLTGRD1A.4152  
     &                         F_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4153  
     &                         F_GRIDS(START_ADDRESS_FINER),               MLTGRD1A.4154  
     &                         G_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4155  
     &                         G_GRIDS(START_ADDRESS_FINER),               MLTGRD1A.4156  
     &                         COS_P_GRIDS(ADDRESS_CURRENT_2D),            MLTGRD1A.4157  
     &                         COS_P_GRIDS(START_ADDRESS_FINER_2D),        MLTGRD1A.4158  
     &                         SEC_P_GRIDS(ADDRESS_CURRENT_2D),            MLTGRD1A.4159  
     &                         COS_V_GRIDS(ADDRESS_CURRENT_2D),            MLTGRD1A.4160  
     &                         COS_V_GRIDS(START_ADDRESS_FINER_2D),        MLTGRD1A.4161  
     &                         Z_Q_GRIDS(ADDRESS_CURRENT_Z),               MLTGRD1A.4162  
     &                         Z_Q_GRIDS(START_ADDRESS_FINER_Z),           MLTGRD1A.4163  
     &                         Z_MID_GRIDS(ADDRESS_CURRENT_Z),             MLTGRD1A.4164  
     &                         Z_MID_GRIDS(START_ADDRESS_FINER_Z),         MLTGRD1A.4165  
     &                         L_FIRST_DESCENT,                            MLTGRD1A.4166  
     &                         I_CURRENT,J_CURRENT,K_CURRENT,              MLTGRD1A.4167  
     &                         I_FINER,J_FINER,K_FINER,I_NT,J_NT,K_NT,     MLTGRD1A.4168  
     &                         KREST,EARTH_RADIUS_INVERSE,                 MLTGRD1A.4169  
     &                         LATITUDE_STEP_GRIDS(GRID_CURRENT-1),        MLTGRD1A.4170  
     &                         LONGITUDE_STEP_GRIDS(GRID_CURRENT-1),       MLTGRD1A.4171  
     &                         RES_DIRS(GRID_CURRENT),VERSION)             MLTGRD1A.4172  
                                                                           MLTGRD1A.4173  
CL    END LOOP OVER GRIDS                                                  MLTGRD1A.4174  
            END DO                                                         MLTGRD1A.4175  
                                                                           MLTGRD1A.4176  
            L_FIRST_DESCENT = .FALSE.                                      MLTGRD1A.4177  
                                                                           MLTGRD1A.4178  
C ----------------------------------------------------------------------   MLTGRD1A.4179  
CL    SECTION 3.1.4 COARSEST GRID SOLUTION                                 MLTGRD1A.4180  
C ----------------------------------------------------------------------   MLTGRD1A.4181  
                                                                           MLTGRD1A.4182  
            DO I=1,NCOARSE                                                 MLTGRD1A.4183  
              CALL MG_SMOOTH(Q_GRIDS(ADDRESS_CURRENT),                     MLTGRD1A.4184  
     &                       RHS_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4185  
     &                       A_GRIDS(ADDRESS_CURRENT),                     MLTGRD1A.4186  
     &                       B_GRIDS(ADDRESS_CURRENT),                     MLTGRD1A.4187  
     &                       C1_GRIDS(ADDRESS_CURRENT),                    MLTGRD1A.4188  
     &                       C2_GRIDS(ADDRESS_CURRENT),                    MLTGRD1A.4189  
     &                       DEF_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4190  
     &                       D_GRIDS(ADDRESS_CURRENT),                     MLTGRD1A.4191  
     &                       E_GRIDS(ADDRESS_CURRENT),                     MLTGRD1A.4192  
     &                       F_GRIDS(ADDRESS_CURRENT),                     MLTGRD1A.4193  
     &                       G_GRIDS(ADDRESS_CURRENT),                     MLTGRD1A.4194  
     &                       COS_P_GRIDS(ADDRESS_CURRENT_2D),              MLTGRD1A.4195  
     &                       SEC_P_GRIDS(ADDRESS_CURRENT_2D),              MLTGRD1A.4196  
     &                       COS_V_GRIDS(ADDRESS_CURRENT_2D),              MLTGRD1A.4197  
     &                       I_CURRENT,J_CURRENT,K_CURRENT,                MLTGRD1A.4198  
     &                       W,GRID_CURRENT,RMS_RES,IPRINT,                MLTGRD1A.4199  
     &                       SWJAC,SWSYM,JAC,PAT,SYM,ILINE,JLINE,          MLTGRD1A.4200  
     &                       KLINE,NFB,IPAT,                               MLTGRD1A.4201  
     &                       LATITUDE_STEP_GRIDS(1),                       MLTGRD1A.4202  
     &                       LONGITUDE_STEP_GRIDS(1),                      MLTGRD1A.4203  
     &                       EARTH_RADIUS_INVERSE,VERSION,K_BC,            MLTGRD1A.4204  
     &                       I_NT,J_NT,K_NT,                               MLTGRD1A.4205  
     &                       Z_Q_GRIDS(ADDRESS_CURRENT_Z),                 MLTGRD1A.4206  
     &                       Z_MID_GRIDS(ADDRESS_CURRENT_Z))               MLTGRD1A.4207  
                                                                           MLTGRD1A.4208  
            END DO                                                         MLTGRD1A.4209  
                                                                           MLTGRD1A.4210  
C ----------------------------------------------------------------------   MLTGRD1A.4211  
CL    SECTION 3.2 ASCENDING PART OF MULTI-GRID CYCLE.                      MLTGRD1A.4212  
CL                IF A W-CYCLE THEN ASCENDING PART TERMINATES AT           MLTGRD1A.4213  
CL                A NEW GRID LEVEL AND CONTROL RETURNS TO DESCENDING       MLTGRD1A.4214  
CL                SECTION 3.1                                              MLTGRD1A.4215  
C ----------------------------------------------------------------------   MLTGRD1A.4216  
                                                                           MLTGRD1A.4217  
            L_ASCEND = .TRUE.                                              MLTGRD1A.4218  
            START_GRID = 1                                                 MLTGRD1A.4219  
            DO WHILE (L_ASCEND)                                            MLTGRD1A.4220  
                                                                           MLTGRD1A.4221  
C ----------------------------------------------------------------------   MLTGRD1A.4222  
CL    SECTION 3.2.1 PROLONG FROM COARSE GRID TO FINER GRID.                MLTGRD1A.4223  
C ----------------------------------------------------------------------   MLTGRD1A.4224  
                                                                           MLTGRD1A.4225  
              I_COARSER = I_CURRENT                                        MLTGRD1A.4226  
              J_COARSER = J_CURRENT                                        MLTGRD1A.4227  
              K_COARSER = K_CURRENT                                        MLTGRD1A.4228  
              START_ADDRESS_COARSER = ADDRESS_CURRENT                      MLTGRD1A.4229  
              START_GRID = START_GRID+1                                    MLTGRD1A.4230  
              I_CURRENT = IMAX(START_GRID)                                 MLTGRD1A.4231  
              J_CURRENT = JMAX(START_GRID)                                 MLTGRD1A.4232  
              K_CURRENT = KMAX(START_GRID)                                 MLTGRD1A.4233  
              ADDRESS_CURRENT = START_ADDRESS(START_GRID)                  MLTGRD1A.4234  
              ADDRESS_CURRENT_2D = START_ADDRESS_2D(START_GRID)            MLTGRD1A.4235  
              ADDRESS_CURRENT_Z = START_ADDRESS_Z(START_GRID)              MLTGRD1A.4236  
                                                                           MLTGRD1A.4237  
CL    CALL PROLONG                                                         MLTGRD1A.4238  
                                                                           MLTGRD1A.4239  
              CALL MG_PROLONG(Q_GRIDS(START_ADDRESS_COARSER),              MLTGRD1A.4240  
     &                        Q_GRIDS(ADDRESS_CURRENT),                    MLTGRD1A.4241  
     &                        I_COARSER,J_COARSER,K_COARSER,               MLTGRD1A.4242  
     &                        I_CURRENT,J_CURRENT,K_CURRENT,               MLTGRD1A.4243  
     &                        RES_DIRS(START_GRID),VERSION,K_BC,           MLTGRD1A.4244  
     &                        Z_Q_GRIDS(ADDRESS_CURRENT_Z),                MLTGRD1A.4245  
     &                        I_NT,J_NT,K_NT)                              MLTGRD1A.4246  
                                                                           MLTGRD1A.4247  
C ----------------------------------------------------------------------   MLTGRD1A.4248  
CL    SECTION 3.2.2 POST-SMOOTHING.                                        MLTGRD1A.4249  
C ----------------------------------------------------------------------   MLTGRD1A.4250  
                                                                           MLTGRD1A.4251  
CL    CALL SMOOTH                                                          MLTGRD1A.4252  
                                                                           MLTGRD1A.4253  
              DO I = 1,NPOST                                               MLTGRD1A.4254  
                CALL MG_SMOOTH(Q_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4255  
     &                         RHS_GRIDS(ADDRESS_CURRENT),                 MLTGRD1A.4256  
     &                         A_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4257  
     &                         B_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4258  
     &                         C1_GRIDS(ADDRESS_CURRENT),                  MLTGRD1A.4259  
     &                         C2_GRIDS(ADDRESS_CURRENT),                  MLTGRD1A.4260  
     &                         DEF_GRIDS(ADDRESS_CURRENT),                 MLTGRD1A.4261  
     &                         D_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4262  
     &                         E_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4263  
     &                         F_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4264  
     &                         G_GRIDS(ADDRESS_CURRENT),                   MLTGRD1A.4265  
     &                         COS_P_GRIDS(ADDRESS_CURRENT_2D),            MLTGRD1A.4266  
     &                         SEC_P_GRIDS(ADDRESS_CURRENT_2D),            MLTGRD1A.4267  
     &                         COS_V_GRIDS(ADDRESS_CURRENT_2D),            MLTGRD1A.4268  
     &                         I_CURRENT,J_CURRENT,K_CURRENT,              MLTGRD1A.4269  
     &                         W,START_GRID,RMS_RES,IPRINT,                MLTGRD1A.4270  
     &                         SWJAC,SWSYM,JAC,PAT,SYM,ILINE,JLINE,        MLTGRD1A.4271  
     &                         KLINE,NFB,IPAT,                             MLTGRD1A.4272  
     &                         LATITUDE_STEP_GRIDS(START_GRID),            MLTGRD1A.4273  
     &                         LONGITUDE_STEP_GRIDS(START_GRID),           MLTGRD1A.4274  
     &                         EARTH_RADIUS_INVERSE,VERSION,K_BC,          MLTGRD1A.4275  
     &                         I_NT,J_NT,K_NT,                             MLTGRD1A.4276  
     &                         Z_Q_GRIDS(ADDRESS_CURRENT_Z),               MLTGRD1A.4277  
     &                         Z_MID_GRIDS(ADDRESS_CURRENT_Z))             MLTGRD1A.4278  
              END DO                                                       MLTGRD1A.4279  
                                                                           MLTGRD1A.4280  
C ----------------------------------------------------------------------   MLTGRD1A.4281  
CL    SECTION 3.2.3 DECIDE WHETHER :                                       MLTGRD1A.4282  
CL                  1. FINEST GRID REACHED SO END MULTI-GRID ITERATION.    MLTGRD1A.4283  
CL                  2. W-CYCLE REACHED NEW GRID-LEVEL SO GO BACK TO        MLTGRD1A.4284  
CL                     DESCENT PHASE (SECTION 3.1)                         MLTGRD1A.4285  
CL                  3. IF NOT 1 OR 2 THEN CONTINUE WITH ASCENT PHASE.      MLTGRD1A.4286  
C ----------------------------------------------------------------------   MLTGRD1A.4287  
                                                                           MLTGRD1A.4288  
CL    CHECK TO SEE IF ON FINEST GRID.                                      MLTGRD1A.4289  
              IF (START_GRID.EQ.NGRIDS) THEN                               MLTGRD1A.4290  
C NO MORE ASCENT STEPS.                                                    MLTGRD1A.4291  
                L_ASCEND  = .FALSE.                                        MLTGRD1A.4292  
C NO MORE DESCENT STEPS.                                                   MLTGRD1A.4293  
                L_DESCEND = .FALSE.                                        MLTGRD1A.4294  
CL    CHECK TO SEE IF A W CYCLE REACHING GRID 2 FOR THE                    MLTGRD1A.4295  
CL    FIRST TIME.                                                          MLTGRD1A.4296  
              ELSE IF (START_GRID.EQ.2.AND.NCGC.EQ.2.AND.                  MLTGRD1A.4297  
     &                 IDGC(2).LT.NCGC)THEN                                MLTGRD1A.4298  
C NO MORE ASCENT STEPS.                                                    MLTGRD1A.4299  
                L_ASCEND  = .FALSE.                                        MLTGRD1A.4300  
C BUT DESCENT STEPS WILL RESTART AT GRID 2                                 MLTGRD1A.4301  
CL    CHECK TO SEE IF FULL MULTI-GRID AND REACHING A NEW GRID-LEVEL.       MLTGRD1A.4302  
              ELSE IF (NCGC.GT.2.AND.IDGC(START_GRID).EQ.1)THEN            MLTGRD1A.4303  
C NO MORE ASCENT STEPS.                                                    MLTGRD1A.4304  
                L_ASCEND  = .FALSE.                                        MLTGRD1A.4305  
C BUT DESCENT STEPS WILL RESTART AT START_GRID.                            MLTGRD1A.4306  
              END IF                                                       MLTGRD1A.4307  
                                                                           MLTGRD1A.4308  
CL    END ASCENDING LOOP.                                                  MLTGRD1A.4309  
            END DO                                                         MLTGRD1A.4310  
                                                                           MLTGRD1A.4311  
CL    END DESCENDING LOOP.                                                 MLTGRD1A.4312  
          END DO                                                           MLTGRD1A.4313  
                                                                           MLTGRD1A.4314  
C ----------------------------------------------------------------------   MLTGRD1A.4315  
CL    SECTION 3.3.  ANALYSE CONVERGENCE BEHAVIOUR FOR LAST ITERATION       MLTGRD1A.4316  
CL                  OF MULTI-GRID.                                         MLTGRD1A.4317  
C ----------------------------------------------------------------------   MLTGRD1A.4318  
                                                                           MLTGRD1A.4319  
CL    CALCULATE CONVERGENCE FIGURES AND OUTPUT AS REQUESTED.               MLTGRD1A.4320  
                                                                           MLTGRD1A.4321  
          CONVERGENCE_RATE = RMS_RES / RMS_RES_OLD                         MLTGRD1A.4322  
          RMS_RES_OLD = RMS_RES                                            MLTGRD1A.4323  
          PRACTICAL_SMOOTHING_RATE = CONVERGENCE_RATE**(1./(NPRE+NPOST))   MLTGRD1A.4324  
          IF(MG_ITERATIONS.NE.1.AND.IPRINT.GE.2)                           MLTGRD1A.4325  
     &                  WRITE(6,9006) CONVERGENCE_RATE,                    MLTGRD1A.4326  
     &                                PRACTICAL_SMOOTHING_RATE             MLTGRD1A.4327  
                                                                           MLTGRD1A.4328  
CL    CHECK FOR CONVERGENCE TO REQUIRED TOLERANCE.                         MLTGRD1A.4329  
                                                                           MLTGRD1A.4330  
          IF(RMS_RES.LT.TOL_RES*RMS_RES_INIT) THEN                         MLTGRD1A.4331  
            IF(IPRINT.GE.1) THEN                                           MLTGRD1A.4332  
              WRITE(6,9003) MG_ITERATIONS                                  MLTGRD1A.4333  
            ENDIF                                                          MLTGRD1A.4334  
CL    TERMINATE ITERATIONS IF CONVERGENCE ACHIEVED.                        MLTGRD1A.4335  
            L_ITERATE = .FALSE.                                            MLTGRD1A.4336  
          ENDIF                                                            MLTGRD1A.4337  
                                                                           MLTGRD1A.4338  
CL    CHECK TO SEE IF MAXIMUM NUMBER OF ITERATIONS PERFORMED.              MLTGRD1A.4339  
                                                                           MLTGRD1A.4340  
          IF (MG_ITERATIONS.EQ.MAXITS.AND.L_ITERATE) THEN                  MLTGRD1A.4341  
            L_ITERATE = .FALSE.                                            MLTGRD1A.4342  
            IF(IPRINT.GE.1) WRITE(6,9004) MAXITS                           MLTGRD1A.4343  
          ENDIF                                                            MLTGRD1A.4344  
                                                                           MLTGRD1A.4345  
CL    CHECK TO SEE IF SMOOTHING FACTOR LESS THAN TOLERANCE.                MLTGRD1A.4346  
          IF(MG_ITERATIONS.NE.1.AND.                                       MLTGRD1A.4347  
     &          PRACTICAL_SMOOTHING_RATE.GT.WORST_SMOOTHING_RATE) THEN     MLTGRD1A.4348  
            L_ITERATE = .FALSE.                                            MLTGRD1A.4349  
            IF(IPRINT.GE.1) WRITE(6,9007) MG_ITERATIONS                    MLTGRD1A.4350  
            IF(IPRINT.GE.1) WRITE(6,9008) PRACTICAL_SMOOTHING_RATE,        MLTGRD1A.4351  
     &                                    WORST_SMOOTHING_RATE             MLTGRD1A.4352  
          END IF                                                           MLTGRD1A.4353  
                                                                           MLTGRD1A.4354  
CL    END LOOP OVER MULTI-GRID ITERATIONS.                                 MLTGRD1A.4355  
        END DO                                                             MLTGRD1A.4356  
                                                                           MLTGRD1A.4357  
CL END CHECK ON NUMBER OF GRIDS.                                           MLTGRD1A.4358  
      END IF                                                               MLTGRD1A.4359  
                                                                           MLTGRD1A.4360  
CL----------------------------------------------------------------------   MLTGRD1A.4361  
CL    SECTION 4. FINAL SOLUTION OUTPUT IF REQUIRED.                        MLTGRD1A.4362  
CL               COPY SOLUTION BACK INTO SOLUTION ARRAY.                   MLTGRD1A.4363  
CL----------------------------------------------------------------------   MLTGRD1A.4364  
                                                                           MLTGRD1A.4365  
CL    COPY SOLUTION.                                                       MLTGRD1A.4366  
                                                                           MLTGRD1A.4367  
      DO K= 1,K_LENGTH                                                     MLTGRD1A.4368  
        BASE = START_ADDRESS(NGRIDS) + (K-1)*I_LENGTH*J_LENGTH - 1         MLTGRD1A.4369  
        DO J= 1,J_LENGTH                                                   MLTGRD1A.4370  
          I2 = (J-1)*I_LENGTH                                              MLTGRD1A.4371  
          DO I= 1,I_LENGTH                                                 MLTGRD1A.4372  
            Q(I,J,K) = Q_GRIDS(BASE+I+I2)                                  MLTGRD1A.4373  
          END DO                                                           MLTGRD1A.4374  
        END DO                                                             MLTGRD1A.4375  
      END DO                                                               MLTGRD1A.4376  
                                                                           MLTGRD1A.4377  
 9000 FORMAT(1X,//,' Convergence History',/,20('-'))                       MLTGRD1A.4378  
 9001 FORMAT(1X,//,' Converged Within Tolerance In ',I3,' Relaxations')    MLTGRD1A.4379  
 9002 FORMAT(1X,//,' Failed To Converge In ',I3,' Relaxations')            MLTGRD1A.4380  
 9003 FORMAT(1X,//,' Converged Within Tolerance In ',I3,' MG Itns')        MLTGRD1A.4381  
 9004 FORMAT(1X,//,' Failed To Converge In ',I3,' MG Itns')                MLTGRD1A.4382  
 9005 FORMAT(1X,/,' Multigrid Iteration No :',I3,/,28('~'))                MLTGRD1A.4383  
 9006 FORMAT(1X,/,' MG Convergence Rate =',F5.3,/,                         MLTGRD1A.4384  
     &            ' Practical Smoothing Rate =',F5.3)                      MLTGRD1A.4385  
 9007 FORMAT(1X,/,' Multigrid stopped on iteration number ',I3)            MLTGRD1A.4386  
 9008 FORMAT(1X,/,' Practical Smoothing Rate =',F5.3,                      MLTGRD1A.4387  
     &            ' worse than allowed rate =',F5.3)                       MLTGRD1A.4388  
                                                                           MLTGRD1A.4389  
CL    END OF ROUTINE MG_FDMG                                               MLTGRD1A.4390  
                                                                           MLTGRD1A.4391  
      RETURN                                                               MLTGRD1A.4392  
      END                                                                  MLTGRD1A.4393  
CLL   SUBROUTINE MG_GRIDSEQ                                                MLTGRD1A.4394  
CLL                                                                        MLTGRD1A.4395  
CLL   PURPOSE:                                                             MLTGRD1A.4396  
CLL   -------                                                              MLTGRD1A.4397  
CLL   DECIDES HOW MANY COARSE GRIDS MAY BE GENERATED FROM THE FINE         MLTGRD1A.4398  
CLL   GRID SUPPLIED BY THE USER. DEFINES THE NUMBER OF NODES IN EACH       MLTGRD1A.4399  
CLL   DIRECTION AND SETS STORAGE POINTERS FOR EACH GRID IN THE SEQUENCE    MLTGRD1A.4400  
CLL                                                                        MLTGRD1A.4401  
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.4402  
CLL                                                                        MLTGRD1A.4403  
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.4404  
CLL VERSION  DATE                                                          MLTGRD1A.4405  
CLL   3.3                                                                  MLTGRD1A.4406  
CLL                                                                        MLTGRD1A.4407  
CLL                                                                        MLTGRD1A.4408  
CLLEND -----------------------------------------------------------------   MLTGRD1A.4409  
                                                                           MLTGRD1A.4410  
C*L ARGUMENT LIST.                                                         MLTGRD1A.4411  
                                                                           MLTGRD1A.4412  
      SUBROUTINE MG_GRIDSEQ(I_NT,J_NT,K_NT,I_LENGTH,J_LENGTH,K_LENGTH,     MLTGRD1A.4413  
     &                      MXNGRDS,NGRIDS,IMAX,JMAX,KMAX,                 MLTGRD1A.4414  
     &                      START_ADDRESS,LAST_ADDRESS,                    MLTGRD1A.4415  
     &                      LONGITUDE_STEP_INVERSE,                        MLTGRD1A.4416  
     &                      LATITUDE_STEP_INVERSE,                         MLTGRD1A.4417  
     &                      LONGITUDE_STEP_GRIDS,LATITUDE_STEP_GRIDS,      MLTGRD1A.4418  
     &                      START_ADDRESS_2D,LAST_ADDRESS_2D,RES_DIRS,     MLTGRD1A.4419  
     &                      VERSION,IPRINT,START_ADDRESS_Z,                MLTGRD1A.4420  
     &                      LAST_ADDRESS_Z)                                MLTGRD1A.4421  
                                                                           MLTGRD1A.4422  
      IMPLICIT NONE                                                        MLTGRD1A.4423  
                                                                           MLTGRD1A.4424  
      LOGICAL                                                              MLTGRD1A.4425  
     &  I_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN I DIRECTION   MLTGRD1A.4426  
     &, J_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN J DIRECTION   MLTGRD1A.4427  
     &, K_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN K DIRECTION   MLTGRD1A.4428  
                                                                           MLTGRD1A.4429  
      INTEGER                                                              MLTGRD1A.4430  
     &  I_LENGTH   !IN. NUMBER OF POINTS IN I DIRECTION.                   MLTGRD1A.4431  
     &, J_LENGTH   !IN. NUMBER OF POINTS IN J DIRECTION.                   MLTGRD1A.4432  
     &, K_LENGTH   !IN. NUMBER OF POINTS IN K DIRECTION.                   MLTGRD1A.4433  
                                                                           MLTGRD1A.4434  
      INTEGER                                                              MLTGRD1A.4435  
     &  MXNGRDS  !IN. MAXIMUM NUMBER OF GRIDS ALLOWED.                     MLTGRD1A.4436  
     &, IPRINT   !IN. CONTROLS PRINTING OPTIONS                            MLTGRD1A.4437  
     &, VERSION  !IN. VERSION OF MULTIGRID WANTED.                         MLTGRD1A.4438  
                                                                           MLTGRD1A.4439  
      REAL                                                                 MLTGRD1A.4440  
     &  LONGITUDE_STEP_INVERSE !IN. 1./LONGITUDE STEP ON FINEST GRID.      MLTGRD1A.4441  
     &, LATITUDE_STEP_INVERSE  !IN. 1./LATITUDE STEP ON FINEST GRID.       MLTGRD1A.4442  
                                                                           MLTGRD1A.4443  
      REAL                                                                 MLTGRD1A.4444  
     &  LONGITUDE_STEP_GRIDS(MXNGRDS) !OUT. LONGITUDE STEP INVERSE ON      MLTGRD1A.4445  
     &                                !     EACH GRID.                     MLTGRD1A.4446  
     &, LATITUDE_STEP_GRIDS(MXNGRDS)  !OUT. LATITUDE STEP INVERSE ON       MLTGRD1A.4447  
     &                                !     EACH GRID.                     MLTGRD1A.4448  
                                                                           MLTGRD1A.4449  
      INTEGER                                                              MLTGRD1A.4450  
     &  NGRIDS        !OUT. THE TOTAL NUMBER OF GRIDS IN THE SEQUENCE      MLTGRD1A.4451  
     &, IMAX(MXNGRDS) !OUT. NUMBER OF NODES IN THE I-DIRECTION             MLTGRD1A.4452  
     &                !     ON EACH GRID.                                  MLTGRD1A.4453  
     &, JMAX(MXNGRDS) !OUT. NUMBER OF NODES IN THE J-DIRECTION             MLTGRD1A.4454  
     &                !     ON EACH GRID.                                  MLTGRD1A.4455  
     &, KMAX(MXNGRDS) !OUT. NUMBER OF NODES IN THE K-DIRECTION             MLTGRD1A.4456  
     &                !     ON EACH GRID.                                  MLTGRD1A.4457  
     &, START_ADDRESS(MXNGRDS) !OUT. START ADDRESS IN DATA ARRAY FOR       MLTGRD1A.4458  
     &                         !     EACH GRID.                            MLTGRD1A.4459  
     &, RES_DIRS(MXNGRDS)    !OUT. CODE GIVING NUMBER OF DIRECTIONS        MLTGRD1A.4460  
     &                       !   TO RESTRICT IN.                           MLTGRD1A.4461  
     &, LAST_ADDRESS  !OUT. LAST ADDRESS OF DATA ARRAY NEEDED. USED TO     MLTGRD1A.4462  
     &                ! DIMENSION SPACE REQUIRED.                          MLTGRD1A.4463  
     &, START_ADDRESS_2D(MXNGRDS) !OUT. START ADDRESS IN DATA ARRAY FOR    MLTGRD1A.4464  
     &                         !     EACH 2-D GRID.                        MLTGRD1A.4465  
     &, LAST_ADDRESS_2D !OUT. LAST ADDRESS OF DATA ARRAY NEEDED. USED TO   MLTGRD1A.4466  
     &                ! DIMENSION 2-D SPACE REQUIRED.                      MLTGRD1A.4467  
     &, START_ADDRESS_Z(MXNGRDS) !OUT. START ADDRESS IN DATA ARRAY FOR     MLTGRD1A.4468  
     &                         !     EACH Z GRID.                          MLTGRD1A.4469  
     &, LAST_ADDRESS_Z !OUT. LAST ADDRESS OF DATA ARRAY NEEDED. USED TO    MLTGRD1A.4470  
     &                ! DIMENSION Z SPACE REQUIRED.                        MLTGRD1A.4471  
                                                                           MLTGRD1A.4472  
C*----------------------------------------------------------------------   MLTGRD1A.4473  
                                                                           MLTGRD1A.4474  
C*L  LOCAL WORK ARRAYS REQUIRED.                                           MLTGRD1A.4475  
      INTEGER                                                              MLTGRD1A.4476  
     & WORK(MXNGRDS)                                                       MLTGRD1A.4477  
C*----------------------------------------------------------------------   MLTGRD1A.4478  
C LOCAL VARIABLES.                                                         MLTGRD1A.4479  
                                                                           MLTGRD1A.4480  
      INTEGER                                                              MLTGRD1A.4481  
     &  IMAXW    ! NUMBER OF NODES IN I DIMENSION.                         MLTGRD1A.4482  
     &, JMAXW    ! NUMBER OF NODES IN J DIMENSION.                         MLTGRD1A.4483  
     &, KMAXW    ! NUMBER OF NODES IN K DIMENSION.                         MLTGRD1A.4484  
     &, INEXT    ! NUMBER OF NODES ON NEXT GRID DOWN                       MLTGRD1A.4485  
     &, JNEXT    !             "                                           MLTGRD1A.4486  
     &, KNEXT    !             "                                           MLTGRD1A.4487  
     &, NNODESW  ! TOTAL NUMBER OF NODES.                                  MLTGRD1A.4488  
     &, I,J,K                                                              MLTGRD1A.4489  
     &, EVAL     ! A NUMBER DESCRIBING THE DIRECTIONS TO RESTRICT IN       MLTGRD1A.4490  
     &           ! CALCULATED AS I+J+K WHERE I=4 IF TRYING TO RESTRICT     MLTGRD1A.4491  
     &           ! IN I DIRECTION, J=2, K=1 LIKEWISE.                      MLTGRD1A.4492  
                                                                           MLTGRD1A.4493  
CMHM THESE VARIABLES MIGHT BE BETTER AS PASSED IN.                         MLTGRD1A.4494  
      INTEGER                                                              MLTGRD1A.4495  
     &  MIN_I    !MINIMUM NUMBER OF POINTS ALLOWED IN I DIRECTION.         MLTGRD1A.4496  
     &, MIN_J    !MINIMUM NUMBER OF POINTS ALLOWED IN J DIRECTION.         MLTGRD1A.4497  
     &, MIN_K    !MINIMUM NUMBER OF POINTS ALLOWED IN K DIRECTION.         MLTGRD1A.4498  
                                                                           MLTGRD1A.4499  
C*L NO EXTERNAL ROUTINES CALLED.                                           MLTGRD1A.4500  
C*----------------------------------------------------------------------   MLTGRD1A.4501  
                                                                           MLTGRD1A.4502  
CL----------------------------------------------------------------------   MLTGRD1A.4503  
CL    SECTION 1. FIND THE NUMBER OF GRIDS WHICH MAY BE GENERATED           MLTGRD1A.4504  
CL----------------------------------------------------------------------   MLTGRD1A.4505  
                                                                           MLTGRD1A.4506  
C SET MAXIMUM NUMBER OF NODES IN EACH DIMENSION.                           MLTGRD1A.4507  
                                                                           MLTGRD1A.4508  
      IMAXW = I_LENGTH                                                     MLTGRD1A.4509  
      JMAXW = J_LENGTH                                                     MLTGRD1A.4510  
      KMAXW = K_LENGTH                                                     MLTGRD1A.4511  
                                                                           MLTGRD1A.4512  
      IF(VERSION.LT.3) THEN                                                MLTGRD1A.4513  
CL GLOBAL VERSIONS.                                                        MLTGRD1A.4514  
C SET MINIMUM NUMBER OF POINTS ALLOWED ON EACH GRID.                       MLTGRD1A.4515  
        MIN_I = 3                                                          MLTGRD1A.4516  
        MIN_J = 5                                                          MLTGRD1A.4517  
        IF(VERSION .EQ. 2) MIN_J=9                                         MLTGRD1A.4518  
        MIN_K = 3                                                          MLTGRD1A.4519  
C CALCULATE MAXIMUM NUMBER OF GRIDS POSSIBLE.                              MLTGRD1A.4520  
C CALCULATION DOES NOT CHECK FOR MORE LEGAL GRIDS THAN USER REQUESTED.     MLTGRD1A.4521  
C CALCULATION ASSUMES PERIODICITY IN I DIRECTION AND EVEN NUMBER.          MLTGRD1A.4522  
                                                                           MLTGRD1A.4523  
        NGRIDS=1                                                           MLTGRD1A.4524  
        I = 0                                                              MLTGRD1A.4525  
        J = 0                                                              MLTGRD1A.4526  
        K = 0                                                              MLTGRD1A.4527  
        IF (I_NT) I=4                                                      MLTGRD1A.4528  
        IF (J_NT) J=2                                                      MLTGRD1A.4529  
        IF (K_NT) K=1                                                      MLTGRD1A.4530  
                                                                           MLTGRD1A.4531  
C CHECK INPUT VALUES ARE LEGAL.                                            MLTGRD1A.4532  
                                                                           MLTGRD1A.4533  
        IF(MOD(IMAXW,2).NE.0 .AND. I_NT) THEN                              MLTGRD1A.4534  
          WRITE(6,*)' GRIDSEQ: ILLEGAL INPUT DATA FOR MULTI-GRID '         GIE0F403.432   
          WRITE(6,*)' INPUT NUMBER OF I NODES WAS ODD, VALUE WAS ',IMAXW   GIE0F403.433   
          WRITE(6,*)' VALUE MUST BE EVEN FOR PERIODIC MULTIGRID '          GIE0F403.434   
          WRITE(6,*)' COARSENING IN I DIRECTION NOT ATTEMPTED.'            GIE0F403.435   
          I=0                                                              MLTGRD1A.4539  
        END IF                                                             MLTGRD1A.4540  
        IF(MOD(JMAXW,2).EQ.0 .AND. J_NT) THEN                              MLTGRD1A.4541  
          WRITE(6,*)' GRIDSEQ: ILLEGAL INPUT DATA FOR MULTI-GRID '         GIE0F403.436   
      WRITE(6,*)' INPUT NUMBER OF J NODES WAS EVEN, VALUE WAS ',JMAXW      GIE0F403.437   
          WRITE(6,*)' COARSENING IN J DIRECTION NOT ATTEMPTED.'            GIE0F403.438   
          J=0                                                              MLTGRD1A.4545  
        END IF                                                             MLTGRD1A.4546  
        IF(MOD(KMAXW,2).EQ.0 .AND. K_NT) THEN                              MLTGRD1A.4547  
          WRITE(6,*)' GRIDSEQ: ILLEGAL INPUT DATA FOR MULTI-GRID '         GIE0F403.439   
      WRITE(6,*)' INPUT NUMBER OF K NODES WAS EVEN, VALUE WAS ',KMAXW      GIE0F403.440   
          WRITE(6,*)' COARSENING IN K DIRECTION NOT ATTEMPTED.'            GIE0F403.441   
          K=0                                                              MLTGRD1A.4551  
        END IF                                                             MLTGRD1A.4552  
                                                                           MLTGRD1A.4553  
        EVAL = I + J + K                                                   MLTGRD1A.4554  
                                                                           MLTGRD1A.4555  
CL TEST ALL DIRECTIONS.                                                    MLTGRD1A.4556  
        DO WHILE (EVAL.EQ.7 .AND. NGRIDS.LT.MXNGRDS)                       MLTGRD1A.4557  
          INEXT = IMAXW/2                                                  MLTGRD1A.4558  
          JNEXT=(JMAXW+1)/2                                                MLTGRD1A.4559  
          KNEXT=(KMAXW+1)/2                                                MLTGRD1A.4560  
          NNODESW=(INEXT+1)*JNEXT*KNEXT                                    MLTGRD1A.4561  
C NEXT GRID ILLEGAL                                                        MLTGRD1A.4562  
          IF(MOD(INEXT,2).NE.0 .OR. INEXT.LT.MIN_I ) THEN                  MLTGRD1A.4563  
            EVAL = 3                                                       MLTGRD1A.4564  
          ELSE IF (JNEXT.LT.MIN_J .OR.                                     MLTGRD1A.4565  
     &              MOD(JNEXT,2).EQ.0 ) THEN                               MLTGRD1A.4566  
            EVAL = 5                                                       MLTGRD1A.4567  
          ELSE IF  (KNEXT.LT.MIN_K) THEN                                   MLTGRD1A.4568  
            EVAL = 6                                                       MLTGRD1A.4569  
C NEXT GRID LEGAL BUT THAT'S THE LAST                                      MLTGRD1A.4570  
          ELSE IF(MOD(NNODESW,2).EQ.0) THEN                                MLTGRD1A.4571  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4572  
            IF (MOD(INEXT+1,2).EQ.0) I = 0                                 MLTGRD1A.4573  
            IF (MOD(JNEXT,2).EQ.0) J = 0                                   MLTGRD1A.4574  
            IF (MOD(KNEXT,2).EQ.0) K = 0                                   MLTGRD1A.4575  
            EVAL = I + J + K                                               MLTGRD1A.4576  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4577  
            IMAXW = INEXT                                                  MLTGRD1A.4578  
            JMAXW = JNEXT                                                  MLTGRD1A.4579  
            KMAXW = KNEXT                                                  MLTGRD1A.4580  
C NEXT GRID LEGAL AND POSSIBLE OTHERS TO FOLLOW                            MLTGRD1A.4581  
          ELSE                                                             MLTGRD1A.4582  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4583  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4584  
            IMAXW = INEXT                                                  MLTGRD1A.4585  
            JMAXW = JNEXT                                                  MLTGRD1A.4586  
            KMAXW = KNEXT                                                  MLTGRD1A.4587  
          END IF                                                           MLTGRD1A.4588  
        END DO                                                             MLTGRD1A.4589  
                                                                           MLTGRD1A.4590  
C RESTRICT IN I AND J DIRECTIONS ONLY.                                     MLTGRD1A.4591  
                                                                           MLTGRD1A.4592  
        DO WHILE (EVAL.EQ.6  .AND. NGRIDS.LT.MXNGRDS)                      MLTGRD1A.4593  
          INEXT = IMAXW/2                                                  MLTGRD1A.4594  
          JNEXT=(JMAXW+1)/2                                                MLTGRD1A.4595  
          NNODESW=(INEXT+1)*JNEXT*KMAXW                                    MLTGRD1A.4596  
C NEXT GRID ILLEGAL                                                        MLTGRD1A.4597  
          IF(MOD(INEXT,2).NE.0 .OR. INEXT.LT.MIN_I ) THEN                  MLTGRD1A.4598  
            EVAL = 2                                                       MLTGRD1A.4599  
          ELSE IF(JNEXT.LT.MIN_J .OR.                                      MLTGRD1A.4600  
     &             MOD(JNEXT,2).EQ.0 ) THEN                                MLTGRD1A.4601  
            EVAL = 4                                                       MLTGRD1A.4602  
C NEXT GRID LEGAL BUT THAT'S THE LAST                                      MLTGRD1A.4603  
          ELSE IF(MOD(NNODESW,2).EQ.0) THEN                                MLTGRD1A.4604  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4605  
            IF(MOD(INEXT+1,2).EQ.0) I = 0                                  MLTGRD1A.4606  
            IF(MOD(JNEXT,2).EQ.0) J = 0                                    MLTGRD1A.4607  
            EVAL = I + J + K                                               MLTGRD1A.4608  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4609  
            IMAXW = INEXT                                                  MLTGRD1A.4610  
            JMAXW = JNEXT                                                  MLTGRD1A.4611  
C NEXT GRID LEGAL AND POSSIBLE OTHERS TO FOLLOW                            MLTGRD1A.4612  
          ELSE                                                             MLTGRD1A.4613  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4614  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4615  
            IMAXW = INEXT                                                  MLTGRD1A.4616  
            JMAXW = JNEXT                                                  MLTGRD1A.4617  
          END IF                                                           MLTGRD1A.4618  
        END DO                                                             MLTGRD1A.4619  
                                                                           MLTGRD1A.4620  
C RESTRICT IN I AND K DIRECTIONS ONLY.                                     MLTGRD1A.4621  
                                                                           MLTGRD1A.4622  
        DO WHILE (EVAL.EQ.5  .AND. NGRIDS.LT.MXNGRDS)                      MLTGRD1A.4623  
          INEXT = IMAXW/2                                                  MLTGRD1A.4624  
          KNEXT = (KMAXW+1)/2                                              MLTGRD1A.4625  
          NNODESW=(INEXT+1)*JMAXW*KNEXT                                    MLTGRD1A.4626  
C NEXT GRID ILLEGAL                                                        MLTGRD1A.4627  
          IF(MOD(INEXT,2).NE.0 .OR. INEXT.LT.MIN_I ) THEN                  MLTGRD1A.4628  
            EVAL = 1                                                       MLTGRD1A.4629  
          ELSE IF(KNEXT.LT.MIN_K ) THEN                                    MLTGRD1A.4630  
            EVAL = 4                                                       MLTGRD1A.4631  
C NEXT GRID LEGAL BUT THAT'S THE LAST                                      MLTGRD1A.4632  
          ELSE IF(MOD(NNODESW,2).EQ.0) THEN                                MLTGRD1A.4633  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4634  
            IF(MOD(INEXT+1,2).EQ.0) I = 0                                  MLTGRD1A.4635  
            IF(MOD(KNEXT,2).EQ.0) K = 0                                    MLTGRD1A.4636  
            EVAL = I + J + K                                               MLTGRD1A.4637  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4638  
            IMAXW = INEXT                                                  MLTGRD1A.4639  
            KMAXW = KNEXT                                                  MLTGRD1A.4640  
C NEXT GRID LEGAL AND POSSIBLE OTHERS TO FOLLOW                            MLTGRD1A.4641  
          ELSE                                                             MLTGRD1A.4642  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4643  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4644  
            IMAXW = INEXT                                                  MLTGRD1A.4645  
            KMAXW = KNEXT                                                  MLTGRD1A.4646  
          END IF                                                           MLTGRD1A.4647  
        END DO                                                             MLTGRD1A.4648  
                                                                           MLTGRD1A.4649  
C TRY AND RESTRICT IN I DIRECTION ONLY.                                    MLTGRD1A.4650  
                                                                           MLTGRD1A.4651  
        DO WHILE (EVAL.EQ.4 .AND. NGRIDS.LT.MXNGRDS)                       MLTGRD1A.4652  
          INEXT = IMAXW/2                                                  MLTGRD1A.4653  
          NNODESW=(INEXT+1)*JMAXW*KMAXW                                    MLTGRD1A.4654  
C NEXT GRID ILLEGAL                                                        MLTGRD1A.4655  
          IF(MOD(INEXT,2).NE.0.OR.INEXT.LT.MIN_I) THEN                     MLTGRD1A.4656  
            EVAL = 0                                                       MLTGRD1A.4657  
C NEXT GRID LEGAL AND POSSIBLE OTHERS TO FOLLOW                            MLTGRD1A.4658  
          ELSE                                                             MLTGRD1A.4659  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4660  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4661  
            IMAXW = INEXT                                                  MLTGRD1A.4662  
          END IF                                                           MLTGRD1A.4663  
        END DO                                                             MLTGRD1A.4664  
                                                                           MLTGRD1A.4665  
C RESTRICT IN J AND K DIRECTIONS ONLY.                                     MLTGRD1A.4666  
                                                                           MLTGRD1A.4667  
        DO WHILE (EVAL.EQ.3  .AND. NGRIDS.LT.MXNGRDS)                      MLTGRD1A.4668  
          JNEXT=(JMAXW+1)/2                                                MLTGRD1A.4669  
          KNEXT=(KMAXW+1)/2                                                MLTGRD1A.4670  
          NNODESW=(IMAXW+1)*JNEXT*KNEXT                                    MLTGRD1A.4671  
C NEXT GRID ILLEGAL                                                        MLTGRD1A.4672  
          IF(JNEXT.LT.MIN_J .OR.                                           MLTGRD1A.4673  
     &        MOD(JNEXT,2).EQ.0 ) THEN                                     MLTGRD1A.4674  
            EVAL = 1                                                       MLTGRD1A.4675  
          ELSE IF(KNEXT.LT.MIN_K ) THEN                                    MLTGRD1A.4676  
            EVAL = 2                                                       MLTGRD1A.4677  
C NEXT GRID LEGAL BUT THAT'S THE LAST                                      MLTGRD1A.4678  
          ELSE IF(MOD(NNODESW,2).EQ.0) THEN                                MLTGRD1A.4679  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4680  
            IF(MOD(JNEXT,2).EQ.0) J = 0                                    MLTGRD1A.4681  
            IF(MOD(KNEXT,2).EQ.0) K = 0                                    MLTGRD1A.4682  
            EVAL = I + J + K                                               MLTGRD1A.4683  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4684  
            JMAXW = JNEXT                                                  MLTGRD1A.4685  
            KMAXW = KNEXT                                                  MLTGRD1A.4686  
C NEXT GRID LEGAL AND POSSIBLE OTHERS TO FOLLOW                            MLTGRD1A.4687  
          ELSE                                                             MLTGRD1A.4688  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4689  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4690  
            JMAXW = JNEXT                                                  MLTGRD1A.4691  
            KMAXW = KNEXT                                                  MLTGRD1A.4692  
          END IF                                                           MLTGRD1A.4693  
        END DO                                                             MLTGRD1A.4694  
                                                                           MLTGRD1A.4695  
C TRY AND RESTRICT IN J DIRECTION ONLY.                                    MLTGRD1A.4696  
                                                                           MLTGRD1A.4697  
        DO WHILE (EVAL.EQ.2 .AND. NGRIDS.LT.MXNGRDS)                       MLTGRD1A.4698  
          JNEXT = (JMAXW+1)/2                                              MLTGRD1A.4699  
          NNODESW=(IMAXW+1)*JNEXT*KMAXW                                    MLTGRD1A.4700  
C NEXT GRID ILLEGAL                                                        MLTGRD1A.4701  
          IF(JNEXT.LT.MIN_J .OR.                                           MLTGRD1A.4702  
     &        MOD(JNEXT,2).EQ.0 ) THEN                                     MLTGRD1A.4703  
            EVAL = 0                                                       MLTGRD1A.4704  
C NEXT GRID LEGAL AND POSSIBLE OTHERS TO FOLLOW                            MLTGRD1A.4705  
          ELSE                                                             MLTGRD1A.4706  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4707  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4708  
            JMAXW = JNEXT                                                  MLTGRD1A.4709  
          END IF                                                           MLTGRD1A.4710  
        END DO                                                             MLTGRD1A.4711  
                                                                           MLTGRD1A.4712  
C TRY AND RESTRICT IN K DIRECTION ONLY.                                    MLTGRD1A.4713  
                                                                           MLTGRD1A.4714  
        DO WHILE (EVAL.EQ.1 .AND. NGRIDS.LT.MXNGRDS)                       MLTGRD1A.4715  
          KNEXT = (KMAXW+1)/2                                              MLTGRD1A.4716  
          NNODESW=(IMAXW+1)*JMAXW*KNEXT                                    MLTGRD1A.4717  
C NEXT GRID ILLEGAL                                                        MLTGRD1A.4718  
          IF(KNEXT.LT.MIN_K ) THEN                                         MLTGRD1A.4719  
            EVAL = 0                                                       MLTGRD1A.4720  
C NEXT GRID LEGAL AND POSSIBLE OTHERS TO FOLLOW                            MLTGRD1A.4721  
          ELSE                                                             MLTGRD1A.4722  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4723  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4724  
            KMAXW = KNEXT                                                  MLTGRD1A.4725  
          END IF                                                           MLTGRD1A.4726  
        END DO                                                             MLTGRD1A.4727  
                                                                           MLTGRD1A.4728  
      ELSE                                                                 MLTGRD1A.4729  
CL LAM VERSIONS                                                            MLTGRD1A.4730  
C SET MINIMUM NUMBER OF POINTS ALLOWED ON EACH GRID.                       MLTGRD1A.4731  
        MIN_I = 3                                                          MLTGRD1A.4732  
        MIN_J = 3                                                          MLTGRD1A.4733  
        MIN_K = 3                                                          MLTGRD1A.4734  
C CALCULATE MAXIMUM NUMBER OF GRIDS POSSIBLE.                              MLTGRD1A.4735  
C CALCULATION DOES NOT CHECK FOR MORE LEGAL GRIDS THAN USER REQUESTED.     MLTGRD1A.4736  
C CALCULATION ASSUMES NON-PERIODICITY IN I DIRECTION.                      MLTGRD1A.4737  
                                                                           MLTGRD1A.4738  
        NGRIDS=1                                                           MLTGRD1A.4739  
        I = 0                                                              MLTGRD1A.4740  
        J = 0                                                              MLTGRD1A.4741  
        K = 0                                                              MLTGRD1A.4742  
        IF (I_NT) I=4                                                      MLTGRD1A.4743  
        IF (J_NT) J=2                                                      MLTGRD1A.4744  
        IF (K_NT) K=1                                                      MLTGRD1A.4745  
                                                                           MLTGRD1A.4746  
C CHECK INPUT VALUES ARE LEGAL.                                            MLTGRD1A.4747  
                                                                           MLTGRD1A.4748  
        IF(MOD(IMAXW,2).EQ.0 .AND. I_NT) THEN                              MLTGRD1A.4749  
          WRITE(6,*)' GRIDSEQ: ILLEGAL INPUT DATA FOR MULTI-GRID '         GIE0F403.442   
      WRITE(6,*)' INPUT NUMBER OF I NODES WAS EVEN, VALUE WAS ',IMAXW      GIE0F403.443   
          WRITE(6,*)' COARSENING IN I DIRECTION NOT ATTEMPTED.'            GIE0F403.444   
          I=0                                                              MLTGRD1A.4753  
        END IF                                                             MLTGRD1A.4754  
        IF(MOD(JMAXW,2).EQ.0 .AND. J_NT) THEN                              MLTGRD1A.4755  
          WRITE(6,*)' GRIDSEQ: ILLEGAL INPUT DATA FOR MULTI-GRID '         GIE0F403.445   
      WRITE(6,*)' INPUT NUMBER OF J NODES WAS EVEN, VALUE WAS ',JMAXW      GIE0F403.446   
          WRITE(6,*)' COARSENING IN J DIRECTION NOT ATTEMPTED.'            GIE0F403.447   
          J=0                                                              MLTGRD1A.4759  
        END IF                                                             MLTGRD1A.4760  
        IF(MOD(KMAXW,2).EQ.0 .AND. K_NT) THEN                              MLTGRD1A.4761  
          WRITE(6,*)' GRIDSEQ: ILLEGAL INPUT DATA FOR MULTI-GRID '         GIE0F403.448   
      WRITE(6,*)' INPUT NUMBER OF K NODES WAS EVEN, VALUE WAS ',KMAXW      GIE0F403.449   
          WRITE(6,*)' COARSENING IN K DIRECTION NOT ATTEMPTED.'            GIE0F403.450   
          K=0                                                              MLTGRD1A.4765  
        END IF                                                             MLTGRD1A.4766  
                                                                           MLTGRD1A.4767  
        EVAL = I + J + K                                                   MLTGRD1A.4768  
                                                                           MLTGRD1A.4769  
CL TEST ALL DIRECTIONS.                                                    MLTGRD1A.4770  
        DO WHILE (EVAL.EQ.7 .AND. NGRIDS.LT.MXNGRDS)                       MLTGRD1A.4771  
          INEXT=(IMAXW+1)/2                                                MLTGRD1A.4772  
          JNEXT=(JMAXW+1)/2                                                MLTGRD1A.4773  
          KNEXT=(KMAXW+1)/2                                                MLTGRD1A.4774  
          NNODESW=INEXT*JNEXT*KNEXT                                        MLTGRD1A.4775  
C NEXT GRID ILLEGAL                                                        MLTGRD1A.4776  
          IF( INEXT.LT.MIN_I ) THEN                                        MLTGRD1A.4777  
            EVAL = 3                                                       MLTGRD1A.4778  
          ELSE IF ( JNEXT.LT.MIN_J .OR. MOD(JNEXT,2).EQ.0) THEN            MLTGRD1A.4779  
            EVAL = 5                                                       MLTGRD1A.4780  
          ELSE IF  (KNEXT.LT.MIN_K) THEN                                   MLTGRD1A.4781  
            EVAL = 6                                                       MLTGRD1A.4782  
C NEXT GRID LEGAL BUT THAT'S THE LAST                                      MLTGRD1A.4783  
          ELSE IF(MOD(NNODESW,2).EQ.0) THEN                                MLTGRD1A.4784  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4785  
            IF (MOD(INEXT,2).EQ.0) I = 0                                   MLTGRD1A.4786  
            IF (MOD(JNEXT,2).EQ.0) J = 0                                   MLTGRD1A.4787  
            IF (MOD(KNEXT,2).EQ.0) K = 0                                   MLTGRD1A.4788  
            EVAL = I + J + K                                               MLTGRD1A.4789  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4790  
            IMAXW = INEXT                                                  MLTGRD1A.4791  
            JMAXW = JNEXT                                                  MLTGRD1A.4792  
            KMAXW = KNEXT                                                  MLTGRD1A.4793  
C NEXT GRID LEGAL AND POSSIBLE OTHERS TO FOLLOW                            MLTGRD1A.4794  
          ELSE                                                             MLTGRD1A.4795  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4796  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4797  
            IMAXW = INEXT                                                  MLTGRD1A.4798  
            JMAXW = JNEXT                                                  MLTGRD1A.4799  
            KMAXW = KNEXT                                                  MLTGRD1A.4800  
          END IF                                                           MLTGRD1A.4801  
        END DO                                                             MLTGRD1A.4802  
                                                                           MLTGRD1A.4803  
C RESTRICT IN I AND J DIRECTIONS ONLY.                                     MLTGRD1A.4804  
                                                                           MLTGRD1A.4805  
        DO WHILE (EVAL.EQ.6  .AND. NGRIDS.LT.MXNGRDS)                      MLTGRD1A.4806  
          INEXT=(IMAXW+1)/2                                                MLTGRD1A.4807  
          JNEXT=(JMAXW+1)/2                                                MLTGRD1A.4808  
          NNODESW=INEXT*JNEXT*KMAXW                                        MLTGRD1A.4809  
C NEXT GRID ILLEGAL                                                        MLTGRD1A.4810  
          IF(INEXT.LT.MIN_I ) THEN                                         MLTGRD1A.4811  
            EVAL = 2                                                       MLTGRD1A.4812  
          ELSE IF ( JNEXT.LT.MIN_J .OR. MOD(JNEXT,2).EQ.0) THEN            MLTGRD1A.4813  
            EVAL = 4                                                       MLTGRD1A.4814  
C NEXT GRID LEGAL BUT THAT'S THE LAST                                      MLTGRD1A.4815  
          ELSE IF(MOD(NNODESW,2).EQ.0) THEN                                MLTGRD1A.4816  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4817  
            IF(MOD(INEXT,2).EQ.0) I = 0                                    MLTGRD1A.4818  
            IF(MOD(JNEXT,2).EQ.0) J = 0                                    MLTGRD1A.4819  
            EVAL = I + J + K                                               MLTGRD1A.4820  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4821  
            IMAXW = INEXT                                                  MLTGRD1A.4822  
            JMAXW = JNEXT                                                  MLTGRD1A.4823  
C NEXT GRID LEGAL AND POSSIBLE OTHERS TO FOLLOW                            MLTGRD1A.4824  
          ELSE                                                             MLTGRD1A.4825  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4826  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4827  
            IMAXW = INEXT                                                  MLTGRD1A.4828  
            JMAXW = JNEXT                                                  MLTGRD1A.4829  
          END IF                                                           MLTGRD1A.4830  
        END DO                                                             MLTGRD1A.4831  
                                                                           MLTGRD1A.4832  
C RESTRICT IN I AND K DIRECTIONS ONLY.                                     MLTGRD1A.4833  
                                                                           MLTGRD1A.4834  
        DO WHILE (EVAL.EQ.5  .AND. NGRIDS.LT.MXNGRDS)                      MLTGRD1A.4835  
          INEXT = IMAXW/2                                                  MLTGRD1A.4836  
          KNEXT = (KMAXW+1)/2                                              MLTGRD1A.4837  
          NNODESW= INEXT*JMAXW*KNEXT                                       MLTGRD1A.4838  
C NEXT GRID ILLEGAL                                                        MLTGRD1A.4839  
          IF(INEXT.LT.MIN_I ) THEN                                         MLTGRD1A.4840  
            EVAL = 1                                                       MLTGRD1A.4841  
          ELSE IF(KNEXT.LT.MIN_K ) THEN                                    MLTGRD1A.4842  
            EVAL = 4                                                       MLTGRD1A.4843  
C NEXT GRID LEGAL BUT THAT'S THE LAST                                      MLTGRD1A.4844  
          ELSE IF(MOD(NNODESW,2).EQ.0) THEN                                MLTGRD1A.4845  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4846  
            IF(MOD(INEXT,2).EQ.0) I = 0                                    MLTGRD1A.4847  
            IF(MOD(KNEXT,2).EQ.0) K = 0                                    MLTGRD1A.4848  
            EVAL = I + J + K                                               MLTGRD1A.4849  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4850  
            IMAXW = INEXT                                                  MLTGRD1A.4851  
            KMAXW = KNEXT                                                  MLTGRD1A.4852  
C NEXT GRID LEGAL AND POSSIBLE OTHERS TO FOLLOW                            MLTGRD1A.4853  
          ELSE                                                             MLTGRD1A.4854  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4855  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4856  
            IMAXW = INEXT                                                  MLTGRD1A.4857  
            KMAXW = KNEXT                                                  MLTGRD1A.4858  
          END IF                                                           MLTGRD1A.4859  
        END DO                                                             MLTGRD1A.4860  
                                                                           MLTGRD1A.4861  
C TRY AND RESTRICT IN I DIRECTION ONLY.                                    MLTGRD1A.4862  
                                                                           MLTGRD1A.4863  
        DO WHILE (EVAL.EQ.4 .AND. NGRIDS.LT.MXNGRDS)                       MLTGRD1A.4864  
          INEXT = IMAXW/2                                                  MLTGRD1A.4865  
          NNODESW=INEXT*JMAXW*KMAXW                                        MLTGRD1A.4866  
C NEXT GRID ILLEGAL                                                        MLTGRD1A.4867  
          IF(INEXT.LT.MIN_I) THEN                                          MLTGRD1A.4868  
            EVAL = 0                                                       MLTGRD1A.4869  
C NEXT GRID LEGAL AND POSSIBLE OTHERS TO FOLLOW                            MLTGRD1A.4870  
          ELSE                                                             MLTGRD1A.4871  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4872  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4873  
            IMAXW = INEXT                                                  MLTGRD1A.4874  
          END IF                                                           MLTGRD1A.4875  
        END DO                                                             MLTGRD1A.4876  
                                                                           MLTGRD1A.4877  
C RESTRICT IN J AND K DIRECTIONS ONLY.                                     MLTGRD1A.4878  
                                                                           MLTGRD1A.4879  
        DO WHILE (EVAL.EQ.3  .AND. NGRIDS.LT.MXNGRDS)                      MLTGRD1A.4880  
          JNEXT=(JMAXW+1)/2                                                MLTGRD1A.4881  
          KNEXT=(KMAXW+1)/2                                                MLTGRD1A.4882  
          NNODESW=IMAXW*JNEXT*KNEXT                                        MLTGRD1A.4883  
C NEXT GRID ILLEGAL                                                        MLTGRD1A.4884  
          IF ( JNEXT.LT.MIN_J .OR. MOD(JNEXT,2).EQ.0) THEN                 MLTGRD1A.4885  
            EVAL = 1                                                       MLTGRD1A.4886  
          ELSE IF(KNEXT.LT.MIN_K ) THEN                                    MLTGRD1A.4887  
            EVAL = 2                                                       MLTGRD1A.4888  
C NEXT GRID LEGAL BUT THAT'S THE LAST                                      MLTGRD1A.4889  
          ELSE IF(MOD(NNODESW,2).EQ.0) THEN                                MLTGRD1A.4890  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4891  
            IF(MOD(JNEXT,2).EQ.0) J = 0                                    MLTGRD1A.4892  
            IF(MOD(KNEXT,2).EQ.0) K = 0                                    MLTGRD1A.4893  
            EVAL = I + J + K                                               MLTGRD1A.4894  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4895  
            JMAXW = JNEXT                                                  MLTGRD1A.4896  
            KMAXW = KNEXT                                                  MLTGRD1A.4897  
C NEXT GRID LEGAL AND POSSIBLE OTHERS TO FOLLOW                            MLTGRD1A.4898  
          ELSE                                                             MLTGRD1A.4899  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4900  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4901  
            JMAXW = JNEXT                                                  MLTGRD1A.4902  
            KMAXW = KNEXT                                                  MLTGRD1A.4903  
          END IF                                                           MLTGRD1A.4904  
        END DO                                                             MLTGRD1A.4905  
                                                                           MLTGRD1A.4906  
C TRY AND RESTRICT IN J DIRECTION ONLY.                                    MLTGRD1A.4907  
                                                                           MLTGRD1A.4908  
        DO WHILE (EVAL.EQ.2 .AND. NGRIDS.LT.MXNGRDS)                       MLTGRD1A.4909  
          JNEXT = (JMAXW+1)/2                                              MLTGRD1A.4910  
          NNODESW=IMAXW*JNEXT*KMAXW                                        MLTGRD1A.4911  
C NEXT GRID ILLEGAL                                                        MLTGRD1A.4912  
          IF ( JNEXT.LT.MIN_J .OR. MOD(JNEXT,2).EQ.0) THEN                 MLTGRD1A.4913  
            EVAL = 0                                                       MLTGRD1A.4914  
C NEXT GRID LEGAL AND POSSIBLE OTHERS TO FOLLOW                            MLTGRD1A.4915  
          ELSE                                                             MLTGRD1A.4916  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4917  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4918  
            JMAXW = JNEXT                                                  MLTGRD1A.4919  
          END IF                                                           MLTGRD1A.4920  
        END DO                                                             MLTGRD1A.4921  
                                                                           MLTGRD1A.4922  
C TRY AND RESTRICT IN K DIRECTION ONLY.                                    MLTGRD1A.4923  
                                                                           MLTGRD1A.4924  
        DO WHILE (EVAL.EQ.1 .AND. NGRIDS.LT.MXNGRDS)                       MLTGRD1A.4925  
          KNEXT = (KMAXW+1)/2                                              MLTGRD1A.4926  
          NNODESW=IMAXW*JMAXW*KNEXT                                        MLTGRD1A.4927  
C NEXT GRID ILLEGAL                                                        MLTGRD1A.4928  
          IF(KNEXT.LT.MIN_K ) THEN                                         MLTGRD1A.4929  
            EVAL = 0                                                       MLTGRD1A.4930  
C NEXT GRID LEGAL AND POSSIBLE OTHERS TO FOLLOW                            MLTGRD1A.4931  
          ELSE                                                             MLTGRD1A.4932  
            WORK( NGRIDS) = EVAL                                           MLTGRD1A.4933  
            NGRIDS = NGRIDS + 1                                            MLTGRD1A.4934  
            KMAXW = KNEXT                                                  MLTGRD1A.4935  
          END IF                                                           MLTGRD1A.4936  
        END DO                                                             MLTGRD1A.4937  
                                                                           MLTGRD1A.4938  
      END IF                                                               MLTGRD1A.4939  
                                                                           MLTGRD1A.4940  
CL--- ------------------------------------------------------------------   MLTGRD1A.4941  
CL    SECTION 2. CALCULATE GRID-SIZES AND ADDRESS INFORMATION.             MLTGRD1A.4942  
CL--- ------------------------------------------------------------------   MLTGRD1A.4943  
                                                                           MLTGRD1A.4944  
CFPP$ NOCONCUR                                                             MLTGRD1A.4945  
      DO I = NGRIDS,2,-1                                                   MLTGRD1A.4946  
        RES_DIRS(I) = WORK(NGRIDS+1-I)                                     MLTGRD1A.4947  
      END DO                                                               MLTGRD1A.4948  
      RES_DIRS(1) = 0.                                                     MLTGRD1A.4949  
                                                                           MLTGRD1A.4950  
CL    DEFINE THE PARAMETERS OF THE COARSEST GRID: IGRID=1                  MLTGRD1A.4951  
                                                                           MLTGRD1A.4952  
      START_ADDRESS(1)=1                                                   MLTGRD1A.4953  
      START_ADDRESS_2D(1)=1                                                MLTGRD1A.4954  
      START_ADDRESS_Z(1)=1                                                 MLTGRD1A.4955  
      IMAX(1)=IMAXW                                                        MLTGRD1A.4956  
      JMAX(1)=JMAXW                                                        MLTGRD1A.4957  
      KMAX(1)=KMAXW                                                        MLTGRD1A.4958  
                                                                           MLTGRD1A.4959  
CL    FIND NUMBER OF NODES AND STORAGE POINTERS FOR THE REMAINING GRIDS    MLTGRD1A.4960  
                                                                           MLTGRD1A.4961  
      DO I=2,NGRIDS                                                        MLTGRD1A.4962  
        J= I-1                                                             MLTGRD1A.4963  
        IMAX(I) = IMAX(J)                                                  MLTGRD1A.4964  
        JMAX(I) = JMAX(J)                                                  MLTGRD1A.4965  
        KMAX(I) = KMAX(J)                                                  MLTGRD1A.4966  
        IF(VERSION.LT.3) THEN                                              MLTGRD1A.4967  
CL GLOBAL                                                                  MLTGRD1A.4968  
          IF(RES_DIRS(I).GT.3) IMAX(I)=2*IMAX(J)                           MLTGRD1A.4969  
        ELSE                                                               MLTGRD1A.4970  
CL LAM                                                                     MLTGRD1A.4971  
          IF(RES_DIRS(I).GT.3) IMAX(I)=2*IMAX(J)-1                         MLTGRD1A.4972  
        END IF                                                             MLTGRD1A.4973  
        IF(MOD(RES_DIRS(I),2).EQ.1) KMAX(I)=2*KMAX(J)-1                    MLTGRD1A.4974  
        IF(RES_DIRS(I).EQ.2 .OR.                                           MLTGRD1A.4975  
     &     RES_DIRS(I).EQ.3 .OR.                                           MLTGRD1A.4976  
     &     RES_DIRS(I).EQ.6 .OR.                                           MLTGRD1A.4977  
     &     RES_DIRS(I).EQ.7 ) JMAX(I) = 2*JMAX(J)-1                        MLTGRD1A.4978  
        START_ADDRESS(I)= START_ADDRESS(J)+IMAX(J)*JMAX(J)*KMAX(J)         MLTGRD1A.4979  
        START_ADDRESS_2D(I)= START_ADDRESS_2D(J)+IMAX(J)*JMAX(J)           MLTGRD1A.4980  
        START_ADDRESS_Z(I)= START_ADDRESS_Z(J)+KMAX(J)+1                   MLTGRD1A.4981  
      END DO                                                               MLTGRD1A.4982  
      LAST_ADDRESS = START_ADDRESS(NGRIDS) + IMAX(NGRIDS)*JMAX(NGRIDS)     MLTGRD1A.4983  
     &               *KMAX(NGRIDS) - 1                                     MLTGRD1A.4984  
      LAST_ADDRESS_2D = START_ADDRESS_2D(NGRIDS) +                         MLTGRD1A.4985  
     &                  IMAX(NGRIDS)*JMAX(NGRIDS) - 1                      MLTGRD1A.4986  
      LAST_ADDRESS_Z = START_ADDRESS_Z(NGRIDS) +                           MLTGRD1A.4987  
     &                  KMAX(NGRIDS)                                       MLTGRD1A.4988  
                                                                           MLTGRD1A.4989  
CL    SET HORIZONTAL GRID SPACING ON EACH GRID.                            MLTGRD1A.4990  
                                                                           MLTGRD1A.4991  
      LATITUDE_STEP_GRIDS(NGRIDS) = LATITUDE_STEP_INVERSE                  MLTGRD1A.4992  
      LONGITUDE_STEP_GRIDS(NGRIDS) = LONGITUDE_STEP_INVERSE                MLTGRD1A.4993  
      DO I = NGRIDS-1,1,-1                                                 MLTGRD1A.4994  
        LATITUDE_STEP_GRIDS(I) = LATITUDE_STEP_GRIDS(I+1)                  MLTGRD1A.4995  
        LONGITUDE_STEP_GRIDS(I) = LONGITUDE_STEP_GRIDS(I+1)                MLTGRD1A.4996  
        IF(RES_DIRS(I+1).GT.3)                                             MLTGRD1A.4997  
     &     LONGITUDE_STEP_GRIDS(I) = LONGITUDE_STEP_GRIDS(I+1)*.5          MLTGRD1A.4998  
        IF(RES_DIRS(I+1).EQ.2 .OR.                                         MLTGRD1A.4999  
     &     RES_DIRS(I+1).EQ.3 .OR.                                         MLTGRD1A.5000  
     &     RES_DIRS(I+1).EQ.6 .OR.                                         MLTGRD1A.5001  
     &     RES_DIRS(I+1).EQ.7 )                                            MLTGRD1A.5002  
     &     LATITUDE_STEP_GRIDS(I) = LATITUDE_STEP_GRIDS(I+1)*.5            MLTGRD1A.5003  
      END DO                                                               MLTGRD1A.5004  
                                                                           MLTGRD1A.5005  
CL    END OF ROUTINE MG_GRIDSEQ                                            MLTGRD1A.5006  
                                                                           MLTGRD1A.5007  
      RETURN                                                               MLTGRD1A.5008  
      END                                                                  MLTGRD1A.5009  
CLL   SUBROUTINE MG_I_LINE                                                 MLTGRD1A.5010  
CLL                                                                        MLTGRD1A.5011  
CLL   PURPOSE:                                                             MLTGRD1A.5012  
CLL   -------                                                              MLTGRD1A.5013  
CLL   PERFORMS LINE SMOOTHING IN I DIRECTION.                              MLTGRD1A.5014  
CLL                                                                        MLTGRD1A.5015  
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.5016  
CLL                                                                        MLTGRD1A.5017  
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.5018  
CLL VERSION  DATE                                                          MLTGRD1A.5019  
CLL   3.3                                                                  MLTGRD1A.5020  
CLL                                                                        MLTGRD1A.5021  
CLL                                                                        MLTGRD1A.5022  
CLLEND -----------------------------------------------------------------   MLTGRD1A.5023  
                                                                           MLTGRD1A.5024  
C*L ARGUMENT LIST.                                                         MLTGRD1A.5025  
                                                                           MLTGRD1A.5026  
      SUBROUTINE MG_I_LINE(                                                MLTGRD1A.5027  
     &                     Q,RHS,A,B,C1,C2,DEF,D,E,F,G,COS_P_LATITUDE,     MLTGRD1A.5028  
     &                     SEC_P_LATITUDE,                                 MLTGRD1A.5029  
     &                     COS_V_LATITUDE,LATITUDE_STEP_INVERSE,           MLTGRD1A.5030  
     &                     LONGITUDE_STEP_INVERSE,EARTH_RADIUS_INVERSE,    MLTGRD1A.5031  
     &                     I_DIM,J_DIM,K_DIM,W,RMS_RES,RMS_INC,            MLTGRD1A.5032  
     &                     SWJAC,SWSYM,JAC,PAT,SYM,NFB,IPAT,               MLTGRD1A.5033  
     &                     VERSION,K_BC,Z_Q,Z_MID,J_NT,K_NT)               MLTGRD1A.5034  
                                                                           MLTGRD1A.5035  
      IMPLICIT NONE                                                        MLTGRD1A.5036  
                                                                           MLTGRD1A.5037  
      LOGICAL                                                              MLTGRD1A.5038  
     &  J_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN J DIRECTION   MLTGRD1A.5039  
     &, K_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN K DIRECTION   MLTGRD1A.5040  
                                                                           MLTGRD1A.5041  
      INTEGER                                                              MLTGRD1A.5042  
     &  I_DIM       !IN. NUMBER OF POINTS IN I-DIRECTION.                  MLTGRD1A.5043  
     &, J_DIM       !IN. NUMBER OF POINTS IN J-DIRECTION.                  MLTGRD1A.5044  
     &, K_DIM       !IN. NUMBER OF POINTS IN K-DIRECTION.                  MLTGRD1A.5045  
     &, NFB         !IN. NUMBER OF FORWARD / BACKWARD SWEEPS OF GRID       MLTGRD1A.5046  
     &              ! NEEDED.                                              MLTGRD1A.5047  
     &, IPAT        !IN. USED TO DISTINGUISH BETWEEN RED AND BLACK         MLTGRD1A.5048  
     &              ! POINTS.                                              MLTGRD1A.5049  
     &, VERSION     !IN. VERSION OF MULTIGRID SCHEME.                      MLTGRD1A.5050  
     &, K_BC        !IN. BOUNDARY CONDITION IN K DIRECTION.                MLTGRD1A.5051  
                                                                           MLTGRD1A.5052  
      LOGICAL                                                              MLTGRD1A.5053  
     &  JAC     !IN. .TRUE. FOR JACOBI METHODS                             MLTGRD1A.5054  
     &, PAT     !IN. .TRUE. FOR PATTERN SCHEMES                            MLTGRD1A.5055  
     &, SYM     !IN. .TRUE. FOR SYMMETRIC SCHEMES                          MLTGRD1A.5056  
                                                                           MLTGRD1A.5057  
      REAL                                                                 MLTGRD1A.5058  
     &  SWJAC    !IN. A SWITCH WHICH IS ZERO FOR JACOBI METHODS            MLTGRD1A.5059  
     &, SWSYM    !IN. A SWITCH WHICH IS ZERO FOR SYMMETRIC METHODS         MLTGRD1A.5060  
     &, RMS_RES  !IN. ROOT MEAN SQUARE RESIDUAL NORM.                      MLTGRD1A.5061  
     &, RMS_INC  !IN. ROOT MEAN SQUARE INCREMENT NORM.                     MLTGRD1A.5062  
     &, W        !IN. RELAXATION PARAMETER FOR EACH VARIABLE IN SYSTEM     MLTGRD1A.5063  
                                                                           MLTGRD1A.5064  
      REAL                                                                 MLTGRD1A.5065  
     &  A(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5066  
     &, B(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5067  
     &, C1(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.5068  
     &, C2(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.5069  
     &, DEF(I_DIM,J_DIM,K_DIM)  !IN. COEFFICIENT                           MLTGRD1A.5070  
     &, D(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5071  
     &, E(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5072  
     &, F(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5073  
     &, G(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5074  
     &, RHS(I_DIM,J_DIM,K_DIM)  !IN. RIGHT-HAND-SIDE OF EQUATION.          MLTGRD1A.5075  
     &, COS_P_LATITUDE(I_DIM,J_DIM) !IN. COSINE OF LATITUDE AT Q POINTS.   MLTGRD1A.5076  
     &, SEC_P_LATITUDE(I_DIM,J_DIM) !IN. 1./COS OF LATITUDE AT Q POINTS.   MLTGRD1A.5077  
     &, COS_V_LATITUDE(I_DIM,J_DIM-1)                                      MLTGRD1A.5078  
     &                          !IN. COSINE OF LATITUDE AT V POINTS.       MLTGRD1A.5079  
     &, Z_Q(K_DIM)              !IN. Z AT Q POINTS                         MLTGRD1A.5080  
     &, Z_MID(0:K_DIM)          !IN. Z MIDWAY BETWEEN Q POINTS             MLTGRD1A.5081  
                                                                           MLTGRD1A.5082  
      REAL                                                                 MLTGRD1A.5083  
     &  Q(I_DIM,J_DIM,K_DIM)    !OUT. SOLUTION.                            MLTGRD1A.5084  
                                                                           MLTGRD1A.5085  
      REAL                                                                 MLTGRD1A.5086  
     &  LATITUDE_STEP_INVERSE  !IN.                                        MLTGRD1A.5087  
     &, LONGITUDE_STEP_INVERSE !IN.                                        MLTGRD1A.5088  
     &, EARTH_RADIUS_INVERSE   !IN                                         MLTGRD1A.5089  
                                                                           MLTGRD1A.5090  
C*----------------------------------------------------------------------   MLTGRD1A.5091  
                                                                           MLTGRD1A.5092  
C*L   9 LOCAL WORK ARRAYS REQUIRED.                                        MLTGRD1A.5093  
                                                                           MLTGRD1A.5094  
      REAL                                                                 MLTGRD1A.5095  
     &  LHS(I_DIM)                                                         MLTGRD1A.5096  
     &, A0(I_DIM,J_DIM)     !\                                             MLTGRD1A.5097  
     &, A1(I_DIM,J_DIM)     !  \                                           MLTGRD1A.5098  
     &, A2(I_DIM,J_DIM)     !   > ARRAYS USED IN TRI-DIAGONAL SOLVER       MLTGRD1A.5099  
     &, X(I_DIM,J_DIM)      !  /                                           MLTGRD1A.5100  
     &, R(I_DIM,J_DIM)      !/                                             MLTGRD1A.5101  
     &, F_VECTOR(I_DIM-1,J_DIM) !USED IN PERIODIC TRIDIAGONAL SOLVER       MLTGRD1A.5102  
     &, G_VECTOR(2,J_DIM)       !USED IN PERIODIC TRIDIAGONAL SOLVER       MLTGRD1A.5103  
     &, CORRECTIONS(I_DIM,J_DIM,K_DIM)                                     MLTGRD1A.5104  
     &, AN(J_DIM)           !USED IN PERIODIC TRIDIAGONAL SOLVER           MLTGRD1A.5105  
                                                                           MLTGRD1A.5106  
C*----------------------------------------------------------------------   MLTGRD1A.5107  
C LOCAL VARIABLES.                                                         MLTGRD1A.5108  
                                                                           MLTGRD1A.5109  
      INTEGER                                                              MLTGRD1A.5110  
     &  I_BEGIN                                                            MLTGRD1A.5111  
     &, I_END                                                              MLTGRD1A.5112  
     &, J_BEGIN                                                            MLTGRD1A.5113  
     &, JK_BEGIN                                                           MLTGRD1A.5114  
     &, J_END                                                              MLTGRD1A.5115  
     &, J_STEP                                                             MLTGRD1A.5116  
     &, K_BEGIN                                                            MLTGRD1A.5117  
     &, K_END                                                              MLTGRD1A.5118  
     &, K_STEP                                                             MLTGRD1A.5119  
     &, I,J,K                                                              MLTGRD1A.5120  
     &, I_FB                                                               MLTGRD1A.5121  
     &, I_ZEBRA                                                            MLTGRD1A.5122  
                                                                           MLTGRD1A.5123  
      REAL                                                                 MLTGRD1A.5124  
     &  WEIGHT                                                             MLTGRD1A.5125  
     &, FACTOR                                                             MLTGRD1A.5126  
                                                                           MLTGRD1A.5127  
                                                                           MLTGRD1A.5128  
C*L   EXTERNAL ROUTINES CALLED.                                            MLTGRD1A.5129  
      EXTERNAL MG_I_MATRIX                                                 MLTGRD1A.5130  
                                                                           MLTGRD1A.5131  
C*----------------------------------------------------------------------   MLTGRD1A.5132  
                                                                           MLTGRD1A.5133  
CFPP$ NOCONCUR R                                                           MLTGRD1A.5134  
                                                                           MLTGRD1A.5135  
CL----------------------------------------------------------------------   MLTGRD1A.5136  
CL    SECTION 1. INITIALISATION.                                           MLTGRD1A.5137  
CL----------------------------------------------------------------------   MLTGRD1A.5138  
                                                                           MLTGRD1A.5139  
CL    INITIALISE NORMS                                                     MLTGRD1A.5140  
                                                                           MLTGRD1A.5141  
      RMS_RES=0.0                                                          MLTGRD1A.5142  
      RMS_INC=0.0                                                          MLTGRD1A.5143  
                                                                           MLTGRD1A.5144  
CL    SET TEMPORARY RELAXATION PARAMETER TO ZERO FOR JACOBI:               MLTGRD1A.5145  
                                                                           MLTGRD1A.5146  
      WEIGHT = SWJAC*W                                                     MLTGRD1A.5147  
                                                                           MLTGRD1A.5148  
CL    DEFINE POINT ORDERING IN JK PLANE FOR FIRST SWEEP                    MLTGRD1A.5149  
                                                                           MLTGRD1A.5150  
      IF (.NOT.J_NT) THEN                                                  MLTGRD1A.5151  
        J_BEGIN = 1                                                        MLTGRD1A.5152  
        J_END = 1                                                          MLTGRD1A.5153  
      ELSE IF (VERSION.EQ.3) THEN                                          MLTGRD1A.5154  
        J_BEGIN = 1                                                        MLTGRD1A.5155  
        J_END   = J_DIM                                                    MLTGRD1A.5156  
      ELSE                                                                 MLTGRD1A.5157  
C DO NOT DO BOUNDARY IN OTHER VERSIONS.                                    MLTGRD1A.5158  
        J_BEGIN = 2                                                        MLTGRD1A.5159  
        J_END   = J_DIM-1                                                  MLTGRD1A.5160  
      END IF                                                               MLTGRD1A.5161  
      IF (IPAT.EQ.2) THEN                                                  MLTGRD1A.5162  
        J_STEP  = 2                                                        MLTGRD1A.5163  
      ELSE                                                                 MLTGRD1A.5164  
        J_STEP  = 1                                                        MLTGRD1A.5165  
      END IF                                                               MLTGRD1A.5166  
      K_BEGIN = 1                                                          MLTGRD1A.5167  
      K_END   = K_DIM                                                      MLTGRD1A.5168  
      IF (K_BC.EQ.2 ) THEN                                                 MLTGRD1A.5169  
        K_END = K_DIM-1                                                    MLTGRD1A.5170  
      ELSE IF (K_BC.EQ.3 ) THEN                                            MLTGRD1A.5171  
        K_BEGIN = 2                                                        MLTGRD1A.5172  
      ELSE IF (K_BC.EQ. 4) THEN                                            MLTGRD1A.5173  
        K_BEGIN = 2                                                        MLTGRD1A.5174  
        K_END = K_DIM-1                                                    MLTGRD1A.5175  
      END IF                                                               MLTGRD1A.5176  
      K_STEP  = 1                                                          MLTGRD1A.5177  
      I_BEGIN=1                                                            MLTGRD1A.5178  
      I_END=I_DIM                                                          MLTGRD1A.5179  
      IF (VERSION.EQ.4) THEN                                               MLTGRD1A.5180  
C DO NOT USE BOUNDARIES WHEN THEY ARE DIRICHLET BOUNDARY CONDITIONS        MLTGRD1A.5181  
        I_BEGIN = 2                                                        MLTGRD1A.5182  
        I_END = I_DIM-1                                                    MLTGRD1A.5183  
      END IF                                                               MLTGRD1A.5184  
                                                                           MLTGRD1A.5185  
CL    SET ZEBRA SWITCH FOR FIRST SWEEP                                     MLTGRD1A.5186  
                                                                           MLTGRD1A.5187  
      I_ZEBRA=0                                                            MLTGRD1A.5188  
                                                                           MLTGRD1A.5189  
CL----------------------------------------------------------------------   MLTGRD1A.5190  
CL    SECTION 2. PERFORM APPROPRIATE LINE SMOOTHING.                       MLTGRD1A.5191  
CL----------------------------------------------------------------------   MLTGRD1A.5192  
                                                                           MLTGRD1A.5193  
CL    FORWARD / BACKWARD SWEEP                                             MLTGRD1A.5194  
                                                                           MLTGRD1A.5195  
      DO I_FB= 1,NFB                                                       MLTGRD1A.5196  
                                                                           MLTGRD1A.5197  
        RMS_RES = SWSYM*RMS_RES                                            MLTGRD1A.5198  
        RMS_INC = SWSYM*RMS_INC                                            MLTGRD1A.5199  
                                                                           MLTGRD1A.5200  
CL    SWEEP OVER JK PLANE IN PRESCRIBED POINT ORDER                        MLTGRD1A.5201  
                                                                           MLTGRD1A.5202  
        DO K = K_BEGIN,K_END,K_STEP                                        MLTGRD1A.5203  
                                                                           MLTGRD1A.5204  
          IF (IPAT.EQ.2) THEN                                              MLTGRD1A.5205  
CL    START EACH LINE ON A DIFFERENT COLOUR.                               MLTGRD1A.5206  
            IF(MOD(J_BEGIN+K+I_ZEBRA,IPAT).NE.0 .AND. I_FB.EQ.1) THEN      MLTGRD1A.5207  
              JK_BEGIN = J_BEGIN + 1                                       MLTGRD1A.5208  
            ELSE IF(MOD(J_BEGIN+K+I_ZEBRA,IPAT).NE.0 .AND.                 MLTGRD1A.5209  
     &              I_FB.EQ.2) THEN                                        MLTGRD1A.5210  
              JK_BEGIN = J_BEGIN - 1                                       MLTGRD1A.5211  
            ELSE                                                           MLTGRD1A.5212  
              JK_BEGIN = J_BEGIN                                           MLTGRD1A.5213  
            END IF                                                         MLTGRD1A.5214  
          ELSE                                                             MLTGRD1A.5215  
            JK_BEGIN = J_BEGIN                                             MLTGRD1A.5216  
          END IF                                                           MLTGRD1A.5217  
                                                                           MLTGRD1A.5218  
          IF (VERSION .EQ. 2) THEN                                         MLTGRD1A.5219  
            DO J = JK_BEGIN,J_END,J_STEP                                   MLTGRD1A.5220  
                                                                           MLTGRD1A.5221  
              IF(J.EQ.(J_DIM+1)/2) THEN                                    MLTGRD1A.5222  
C SET ZERO VALUES EXCEPT FOR MATRIX DIAGONAL TO ENABLE COMPLETE            MLTGRD1A.5223  
C VECTORISATION OF MATRIX SOLVERS.                                         MLTGRD1A.5224  
                DO I=1,I_DIM                                               MLTGRD1A.5225  
                  R(I,J) = 0.                                              MLTGRD1A.5226  
                  A0(I,J) = 1.                                             MLTGRD1A.5227  
                  A1(I,J) = 0.                                             MLTGRD1A.5228  
                  A2(I,J) = 0.                                             MLTGRD1A.5229  
                END DO                                                     MLTGRD1A.5230  
                DO I=1,I_DIM-1                                             MLTGRD1A.5231  
                  F_VECTOR(I,J) = 0.                                       MLTGRD1A.5232  
                END DO                                                     MLTGRD1A.5233  
                G_VECTOR(1,J) = 0.                                         MLTGRD1A.5234  
                G_VECTOR(2,J) = 0.                                         MLTGRD1A.5235  
                AN(J) = 1                                                  MLTGRD1A.5236  
                                                                           MLTGRD1A.5237  
              ELSE                                                         MLTGRD1A.5238  
CL    ASSEMBLE TRIDIAGONAL SYSTEM TO INVERT FOR LINE VALUES                MLTGRD1A.5239  
                                                                           MLTGRD1A.5240  
                CALL MG_I_MATRIX(LHS,A0(1,J),A1(1,J),A2(1,J),              MLTGRD1A.5241  
     &                           AN(J),F_VECTOR(1,J),G_VECTOR(1,J),        MLTGRD1A.5242  
     &                           Q,A,B,C1,C2,DEF,D,E,F,G,                  MLTGRD1A.5243  
     &                           I_DIM,J_DIM,K_DIM,                        MLTGRD1A.5244  
     &                           COS_P_LATITUDE,SEC_P_LATITUDE,            MLTGRD1A.5245  
     &                           COS_V_LATITUDE,EARTH_RADIUS_INVERSE,      MLTGRD1A.5246  
     &                           LATITUDE_STEP_INVERSE,                    MLTGRD1A.5247  
     &                           LONGITUDE_STEP_INVERSE,J,K,VERSION,       MLTGRD1A.5248  
     &                           Z_Q,Z_MID,J_NT,K_NT)                      MLTGRD1A.5249  
                                                                           MLTGRD1A.5250  
                DO I=I_BEGIN,I_END                                         MLTGRD1A.5251  
                  R(I,J) = LHS(I)-RHS(I,J,K)                               MLTGRD1A.5252  
                  RMS_RES = RMS_RES+R(I,J)*R(I,J)                          MLTGRD1A.5253  
                END DO                                                     MLTGRD1A.5254  
                                                                           MLTGRD1A.5255  
              END IF                                                       MLTGRD1A.5256  
            END DO                                                         MLTGRD1A.5257  
          ELSE                                                             MLTGRD1A.5258  
            DO J = JK_BEGIN,J_END,J_STEP                                   MLTGRD1A.5259  
CL    ASSEMBLE TRIDIAGONAL SYSTEM TO INVERT FOR LINE VALUES                MLTGRD1A.5260  
                                                                           MLTGRD1A.5261  
                CALL MG_I_MATRIX(LHS,A0(1,J),A1(1,J),A2(1,J),              MLTGRD1A.5262  
     &                           AN(J),F_VECTOR(1,J),G_VECTOR(1,J),        MLTGRD1A.5263  
     &                           Q,A,B,C1,C2,DEF,D,E,F,G,                  MLTGRD1A.5264  
     &                           I_DIM,J_DIM,K_DIM,                        MLTGRD1A.5265  
     &                           COS_P_LATITUDE,SEC_P_LATITUDE,            MLTGRD1A.5266  
     &                           COS_V_LATITUDE,EARTH_RADIUS_INVERSE,      MLTGRD1A.5267  
     &                           LATITUDE_STEP_INVERSE,                    MLTGRD1A.5268  
     &                           LONGITUDE_STEP_INVERSE,J,K,VERSION,       MLTGRD1A.5269  
     &                           Z_Q,Z_MID,J_NT,K_NT)                      MLTGRD1A.5270  
                                                                           MLTGRD1A.5271  
                DO I=I_BEGIN,I_END                                         MLTGRD1A.5272  
                  R(I,J) = LHS(I)-RHS(I,J,K)                               MLTGRD1A.5273  
                  RMS_RES = RMS_RES+R(I,J)*R(I,J)                          MLTGRD1A.5274  
                END DO                                                     MLTGRD1A.5275  
                                                                           MLTGRD1A.5276  
            END DO                                                         MLTGRD1A.5277  
          END IF                                                           MLTGRD1A.5278  
                                                                           MLTGRD1A.5279  
          IF (VERSION.LT.3) THEN                                           MLTGRD1A.5280  
CL    GLOBAL VERSION.  SOLVE CYCLIC TRIDIAGONAL SYSTEM FOR CORRECTIONS     MLTGRD1A.5281  
                                                                           MLTGRD1A.5282  
C CREATE V_VECTOR IN R(I)                                                  MLTGRD1A.5283  
C AND CREATE U_VECTOR FOR IN F_VECTOR                                      MLTGRD1A.5284  
C REDUCE MATRIX TO UPPER DIAGONAL FORM.                                    MLTGRD1A.5285  
                                                                           MLTGRD1A.5286  
            DO J = JK_BEGIN,J_END,J_STEP                                   MLTGRD1A.5287  
              A0(1,J) = 1./A0(1,J)                                         MLTGRD1A.5288  
            END DO                                                         MLTGRD1A.5289  
            DO I=2,I_DIM-1                                                 MLTGRD1A.5290  
              DO J = JK_BEGIN,J_END,J_STEP                                 MLTGRD1A.5291  
                FACTOR = A2(I,J) * A0(I-1,J)                               MLTGRD1A.5292  
                A0(I,J) = 1./(A0(I,J) - FACTOR*A1(I-1,J))                  MLTGRD1A.5293  
                R(I,J) = R(I,J) - FACTOR*R(I-1,J)                          MLTGRD1A.5294  
                F_VECTOR(I,J) = F_VECTOR(I,J) - FACTOR*F_VECTOR(I-1,J)     MLTGRD1A.5295  
              END DO                                                       MLTGRD1A.5296  
            END DO                                                         MLTGRD1A.5297  
                                                                           MLTGRD1A.5298  
C BACK SUBSTITUTE TO GET SOLUTION.                                         MLTGRD1A.5299  
                                                                           MLTGRD1A.5300  
            DO J = JK_BEGIN,J_END,J_STEP                                   MLTGRD1A.5301  
              R(I_DIM-1,J) = A0(I_DIM-1,J)*R(I_DIM-1,J)                    MLTGRD1A.5302  
              F_VECTOR(I_DIM-1,J) = A0(I_DIM-1,J)*F_VECTOR(I_DIM-1,J)      MLTGRD1A.5303  
            END DO                                                         MLTGRD1A.5304  
            DO I= I_DIM-2,1,-1                                             MLTGRD1A.5305  
              DO J = JK_BEGIN,J_END,J_STEP                                 MLTGRD1A.5306  
                R(I,J) = A0(I,J)*(R(I,J)-A1(I,J)*R(I+1,J))                 MLTGRD1A.5307  
                F_VECTOR(I,J) = A0(I,J)*(F_VECTOR(I,J)-                    MLTGRD1A.5308  
     &                                   A1(I,J)*F_VECTOR(I+1,J))          MLTGRD1A.5309  
              END DO                                                       MLTGRD1A.5310  
            END DO                                                         MLTGRD1A.5311  
                                                                           MLTGRD1A.5312  
C SOLVE FOR LAST ELEMENT OF FIELD.                                         MLTGRD1A.5313  
                                                                           MLTGRD1A.5314  
            DO J = JK_BEGIN,J_END,J_STEP                                   MLTGRD1A.5315  
              X(I_DIM,J) = (R(I_DIM,J)-G_VECTOR(1,J)*R(1,J)-               MLTGRD1A.5316  
     &                        G_VECTOR(2,J)*R(I_DIM-1,J))/                 MLTGRD1A.5317  
     &                        (AN(J)-G_VECTOR(1,J)*F_VECTOR(1,J)-          MLTGRD1A.5318  
     &                         G_VECTOR(2,J)*F_VECTOR(I_DIM-1,J))          MLTGRD1A.5319  
            END DO                                                         MLTGRD1A.5320  
                                                                           MLTGRD1A.5321  
C SOLVE FOR ALL OTHER ELEMENTS OF FIELD.                                   MLTGRD1A.5322  
                                                                           MLTGRD1A.5323  
            DO J = JK_BEGIN,J_END,J_STEP                                   MLTGRD1A.5324  
              DO I=1,I_DIM-1                                               MLTGRD1A.5325  
                X(I,J) = R(I,J) - F_VECTOR(I,J)* X(I_DIM,J)                MLTGRD1A.5326  
              END DO                                                       MLTGRD1A.5327  
            END DO                                                         MLTGRD1A.5328  
                                                                           MLTGRD1A.5329  
          ELSE                                                             MLTGRD1A.5330  
CL    LIMITED AREA CODE. SOLVES NON-CYCLIC TRI-DIAGONAL SYSTEM.            MLTGRD1A.5331  
CL    SOLVE TRIDIAGONAL SYSTEM FOR CORRECTIONS X                           MLTGRD1A.5332  
C REDUCE MATRIX TO UPPER DIAGONAL FORM.                                    MLTGRD1A.5333  
                                                                           MLTGRD1A.5334  
            DO J = JK_BEGIN,J_END,J_STEP                                   MLTGRD1A.5335  
              A0(I_BEGIN,J) = 1./A0(I_BEGIN,J)                             MLTGRD1A.5336  
            END DO                                                         MLTGRD1A.5337  
            DO I=I_BEGIN+1,I_END                                           MLTGRD1A.5338  
              DO J = JK_BEGIN,J_END,J_STEP                                 MLTGRD1A.5339  
                FACTOR = A2(I,J) * A0(I-1,J)                               MLTGRD1A.5340  
                A0(I,J) = 1./(A0(I,J) - FACTOR*A1(I-1,J))                  MLTGRD1A.5341  
                R(I,J) = R(I,J) - FACTOR*R(I-1,J)                          MLTGRD1A.5342  
              END DO                                                       MLTGRD1A.5343  
            END DO                                                         MLTGRD1A.5344  
                                                                           MLTGRD1A.5345  
C BACK SUBSTITUTE TO GET SOLUTION.                                         MLTGRD1A.5346  
                                                                           MLTGRD1A.5347  
            DO J = JK_BEGIN,J_END,J_STEP                                   MLTGRD1A.5348  
              X(I_END,J) = A0(I_END,J)*R(I_END,J)                          MLTGRD1A.5349  
            END DO                                                         MLTGRD1A.5350  
            DO I= I_END-1,1,-1                                             MLTGRD1A.5351  
              DO J = JK_BEGIN,J_END,J_STEP                                 MLTGRD1A.5352  
                X(I,J) = A0(I,J)*(R(I,J)-A1(I,J)*X(I+1,J))                 MLTGRD1A.5353  
              END DO                                                       MLTGRD1A.5354  
            END DO                                                         MLTGRD1A.5355  
                                                                           MLTGRD1A.5356  
          END IF                                                           MLTGRD1A.5357  
                                                                           MLTGRD1A.5358  
CL    STORE CORRECTIONS IN WORKSPACE                                       MLTGRD1A.5359  
CL    AND ADD TO CURRENT SOLUTION UNLESS WT=0 (JACOBI)                     MLTGRD1A.5360  
                                                                           MLTGRD1A.5361  
          DO J = JK_BEGIN,J_END,J_STEP                                     MLTGRD1A.5362  
            DO I=I_BEGIN,I_END                                             MLTGRD1A.5363  
              Q(I,J,K)=Q(I,J,K)-WEIGHT*X(I,J)                              MLTGRD1A.5364  
              RMS_INC=RMS_INC+X(I,J)*X(I,J)                                MLTGRD1A.5365  
            END DO                                                         MLTGRD1A.5366  
          END DO                                                           MLTGRD1A.5367  
          IF (JAC) THEN                                                    MLTGRD1A.5368  
            DO J = JK_BEGIN,J_END,J_STEP                                   MLTGRD1A.5369  
              DO I=I_BEGIN,I_END                                           MLTGRD1A.5370  
                CORRECTIONS(I,J,K)=X(I,J)                                  MLTGRD1A.5371  
              END DO                                                       MLTGRD1A.5372  
            END DO                                                         MLTGRD1A.5373  
          END IF                                                           MLTGRD1A.5374  
                                                                           MLTGRD1A.5375  
CL    END OF JK PLANE SWEEP                                                MLTGRD1A.5376  
                                                                           MLTGRD1A.5377  
        END DO                                                             MLTGRD1A.5378  
                                                                           MLTGRD1A.5379  
CL    ADD CORRECTIONS FOR THE JACOBI METHOD                                MLTGRD1A.5380  
                                                                           MLTGRD1A.5381  
        IF(JAC) THEN                                                       MLTGRD1A.5382  
          DO K=K_BEGIN,K_END                                               MLTGRD1A.5383  
            DO J=J_BEGIN,J_END                                             MLTGRD1A.5384  
              IF(.NOT. (J.EQ.(J_DIM+1)/2 .AND. VERSION.EQ.2)) THEN         MLTGRD1A.5385  
                DO I=I_BEGIN,I_END                                         MLTGRD1A.5386  
                  Q(I,J,K)=Q(I,J,K)-W*CORRECTIONS(I,J,K)                   MLTGRD1A.5387  
                END DO                                                     MLTGRD1A.5388  
              END IF                                                       MLTGRD1A.5389  
            END DO                                                         MLTGRD1A.5390  
          END DO                                                           MLTGRD1A.5391  
        ENDIF                                                              MLTGRD1A.5392  
                                                                           MLTGRD1A.5393  
CL    RESET POINT ORDERING OF JK PLANE FOR SECOND SWEEP                    MLTGRD1A.5394  
                                                                           MLTGRD1A.5395  
        J = J_BEGIN                                                        MLTGRD1A.5396  
        J_BEGIN = J_END                                                    MLTGRD1A.5397  
        J_END   =  J                                                       MLTGRD1A.5398  
        J_STEP  = -J_STEP                                                  MLTGRD1A.5399  
        K = K_BEGIN                                                        MLTGRD1A.5400  
        K_BEGIN = K_END                                                    MLTGRD1A.5401  
        K_END   =  K                                                       MLTGRD1A.5402  
        K_STEP  = -1                                                       MLTGRD1A.5403  
                                                                           MLTGRD1A.5404  
CL    RESET ZEBRA SWITCH FOR SECOND SWEEP                                  MLTGRD1A.5405  
                                                                           MLTGRD1A.5406  
        I_ZEBRA=1                                                          MLTGRD1A.5407  
                                                                           MLTGRD1A.5408  
      END DO                                                               MLTGRD1A.5409  
                                                                           MLTGRD1A.5410  
CL    END OF ROUTINE MG_I_LINE                                             MLTGRD1A.5411  
                                                                           MLTGRD1A.5412  
      RETURN                                                               MLTGRD1A.5413  
      END                                                                  MLTGRD1A.5414  
CLL   SUBROUTINE MG_I_MATRIX                                               MLTGRD1A.5415  
CLL                                                                        MLTGRD1A.5416  
CLL   PURPOSE:                                                             MLTGRD1A.5417  
CLL   -------                                                              MLTGRD1A.5418  
CLL   CALCULATES CURRENT VALUE OF LEFT-HAND-SIDE OF P.D.E. FOR A GIVEN     MLTGRD1A.5419  
CLL   VALUE OF J AND K. SETS MATRIX ENTRIES TO SOLVE FOR CORRECTION.       MLTGRD1A.5420  
CLL                                                                        MLTGRD1A.5421  
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.5422  
CLL                                                                        MLTGRD1A.5423  
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.5424  
CLL VERSION  DATE                                                          MLTGRD1A.5425  
CLL   3.3             WRITTEN BY M. H. MAWSON.                             MLTGRD1A.5426  
CLL                                                                        MLTGRD1A.5427  
CLL                                                                        MLTGRD1A.5428  
CLLEND -----------------------------------------------------------------   MLTGRD1A.5429  
                                                                           MLTGRD1A.5430  
C*L ARGUMENT LIST.                                                         MLTGRD1A.5431  
                                                                           MLTGRD1A.5432  
      SUBROUTINE MG_I_MATRIX(                                              MLTGRD1A.5433  
     &                       LHS,A0,A1,A2,AN,F_VECTOR,G_VECTOR,            MLTGRD1A.5434  
     &                       Q,A,B,C1,C2,DEF,D,E,F,G,I_DIM,J_DIM,K_DIM,    MLTGRD1A.5435  
     &                       COS_P_LATITUDE,SEC_P_LATITUDE,                MLTGRD1A.5436  
     &                       COS_V_LATITUDE,EARTH_RADIUS_INVERSE,          MLTGRD1A.5437  
     &                       LATITUDE_STEP_INVERSE,                        MLTGRD1A.5438  
     &                       LONGITUDE_STEP_INVERSE,                       MLTGRD1A.5439  
     &                       J,K,VERSION,Z_Q,Z_MID,J_NT,K_NT)              MLTGRD1A.5440  
                                                                           MLTGRD1A.5441  
      IMPLICIT NONE                                                        MLTGRD1A.5442  
                                                                           MLTGRD1A.5443  
      LOGICAL                                                              MLTGRD1A.5444  
     &  J_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN J DIRECTION   MLTGRD1A.5445  
     &, K_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN K DIRECTION   MLTGRD1A.5446  
                                                                           MLTGRD1A.5447  
      INTEGER                                                              MLTGRD1A.5448  
     &  I_DIM         !IN. NUMBER OF NODES IN THE I-DIRECTION              MLTGRD1A.5449  
     &, J_DIM         !IN. NUMBER OF NODES IN THE J-DIRECTION              MLTGRD1A.5450  
     &, K_DIM         !IN. NUMBER OF NODES IN THE K-DIRECTION              MLTGRD1A.5451  
     &, J             !IN. VALUE OF J FOR WHICH LHS AND COEFFS ARE REQ.    MLTGRD1A.5452  
     &, K             !IN. VALUE OF K FOR WHICH LHS AND COEFFS ARE REQ.    MLTGRD1A.5453  
     &, VERSION       !IN. VERSION OF MULTIGRID SCHEME.                    MLTGRD1A.5454  
                                                                           MLTGRD1A.5455  
      REAL                                                                 MLTGRD1A.5456  
     &  Q(I_DIM,J_DIM,K_DIM)    !IN. SOLUTION                              MLTGRD1A.5457  
     &, A(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5458  
     &, B(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5459  
     &, C1(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.5460  
     &, C2(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.5461  
     &, DEF(I_DIM,J_DIM,K_DIM)  !IN. COEFFICIENT                           MLTGRD1A.5462  
     &, D(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5463  
     &, E(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5464  
     &, F(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5465  
     &, G(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5466  
     &, COS_P_LATITUDE(I_DIM,J_DIM) !IN. COSINE OF LATITUDE AT Q POINTS    MLTGRD1A.5467  
     &, COS_V_LATITUDE(I_DIM,J_DIM-1)!IN. COSINE OF LATITUDE AT B POINTS   MLTGRD1A.5468  
     &, SEC_P_LATITUDE(I_DIM,J_DIM)!IN. 1./COSINE OF LATITUDE AT Q POINT   MLTGRD1A.5469  
     &, Z_Q(K_DIM)              !IN. Z AT Q POINTS.                        MLTGRD1A.5470  
     &, Z_MID(0:K_DIM)          !IN. Z MIDWAY BETWEEN Q POINTS.            MLTGRD1A.5471  
                                                                           MLTGRD1A.5472  
      REAL                                                                 MLTGRD1A.5473  
     &  EARTH_RADIUS_INVERSE    !IN. 1/EARTH RADIUS                        MLTGRD1A.5474  
     &, LATITUDE_STEP_INVERSE   !IN. 1/LATITUDE STEP LENGTH IN RADIANS     MLTGRD1A.5475  
     &, LONGITUDE_STEP_INVERSE  !IN. 1/LONGITUDE STEP LENGTH IN RADIANS    MLTGRD1A.5476  
                                                                           MLTGRD1A.5477  
      REAL                                                                 MLTGRD1A.5478  
     &  LHS(I_DIM)         !OUT. LEFT-HAND-SIDE.                           MLTGRD1A.5479  
     &, A0(I_DIM)          !OUT. DIAGONAL MATRIX COEFFICIENT.              MLTGRD1A.5480  
     &, A1(I_DIM)          !OUT. SUPER-DIAGONAL MATRIX COEFFICIENT.        MLTGRD1A.5481  
     &, A2(I_DIM)          !OUT. SUB-DIAGONAL MATRIX COEFFICIENT.          MLTGRD1A.5482  
     &, AN                 !OUT. LAST VALUE OF DIAGONAL                    MLTGRD1A.5483  
     &, F_VECTOR(I_DIM-1)  !OUT. LAST COLUMN VECTOR                        MLTGRD1A.5484  
     &, G_VECTOR(2)        !OUT. LAST ROW VECTOR.                          MLTGRD1A.5485  
C*----------------------------------------------------------------------   MLTGRD1A.5486  
                                                                           MLTGRD1A.5487  
C*L NO LOCAL WORK ARRAYS REQUIRED.                                         MLTGRD1A.5488  
C*----------------------------------------------------------------------   MLTGRD1A.5489  
C LOCAL VARIABLES.                                                         MLTGRD1A.5490  
                                                                           MLTGRD1A.5491  
      INTEGER                                                              MLTGRD1A.5492  
     &  I,I2                                                               MLTGRD1A.5493  
     &, I_BEGIN                                                            MLTGRD1A.5494  
     &, I_END                                                              MLTGRD1A.5495  
                                                                           MLTGRD1A.5496  
      REAL                                                                 MLTGRD1A.5497  
     &  SCALAR                                                             MLTGRD1A.5498  
     &, SCALARS                                                            MLTGRD1A.5499  
     &, SCALAR1                                                            MLTGRD1A.5500  
     &, SCALAR2                                                            MLTGRD1A.5501  
                                                                           MLTGRD1A.5502  
C*L NO EXTERNAL ROUTINES CALLED.                                           MLTGRD1A.5503  
C*----------------------------------------------------------------------   MLTGRD1A.5504  
                                                                           MLTGRD1A.5505  
CL----------------------------------------------------------------------   MLTGRD1A.5506  
CL    SECTION 1. CALCULATE LEFT-HAND-SIDE OF P.D.E.                        MLTGRD1A.5507  
CL               AND MATRIX COEFFICIENTS.                                  MLTGRD1A.5508  
CL----------------------------------------------------------------------   MLTGRD1A.5509  
                                                                           MLTGRD1A.5510  
C ----------------------------------------------------------------------   MLTGRD1A.5511  
CL    SECTION 1.1 CALCULATE I-DIRECTION DERIVATIVES.                       MLTGRD1A.5512  
C ----------------------------------------------------------------------   MLTGRD1A.5513  
                                                                           MLTGRD1A.5514  
      SCALARS= EARTH_RADIUS_INVERSE*LONGITUDE_STEP_INVERSE                 MLTGRD1A.5515  
      SCALAR = EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*                  MLTGRD1A.5516  
     &         LONGITUDE_STEP_INVERSE*LONGITUDE_STEP_INVERSE               MLTGRD1A.5517  
                                                                           MLTGRD1A.5518  
C SET LAST POINT IN A0 WHICH IS USED, WHICH IS I_DIM-1 IN CYCLIC CODE.     MLTGRD1A.5519  
      IF(VERSION.LT.3) THEN                                                MLTGRD1A.5520  
        I_END = I_DIM-1                                                    MLTGRD1A.5521  
        DO I=1,I_DIM-1                                                     MLTGRD1A.5522  
          F_VECTOR(I) = 0.                                                 MLTGRD1A.5523  
        END DO                                                             MLTGRD1A.5524  
      ELSE                                                                 MLTGRD1A.5525  
        I_END = I_DIM                                                      MLTGRD1A.5526  
      END IF                                                               MLTGRD1A.5527  
                                                                           MLTGRD1A.5528  
C SET ZERO COEFFICIENTS IN MATRICES.                                       MLTGRD1A.5529  
      A1(I_END) = 0.                                                       MLTGRD1A.5530  
      A2(1) = 0.                                                           MLTGRD1A.5531  
                                                                           MLTGRD1A.5532  
      DO I= 2,I_END-1                                                      MLTGRD1A.5533  
        SCALAR1 = SCALAR*SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)           MLTGRD1A.5534  
        A1(I)  =  A(I,J,K) *SCALAR1 + .5*DEF(I,J,K)*D(I,J,K)*SCALARS       MLTGRD1A.5535  
     &            *SEC_P_LATITUDE(I,J)                                     MLTGRD1A.5536  
        A2(I)  =  A(I-1,J,K) *SCALAR1 - .5*DEF(I,J,K)*D(I-1,J,K)           MLTGRD1A.5537  
     &            *SCALARS*SEC_P_LATITUDE(I,J)                             MLTGRD1A.5538  
        A0(I)  = - A1(I) - A2(I) - G(I,J,K)                                MLTGRD1A.5539  
        LHS(I) = (Q(I-1,J,K)*A(I-1,J,K) - Q(I,J,K) *                       MLTGRD1A.5540  
     &            (A(I-1,J,K) + A(I,J,K)) + Q(I+1,J,K)*A(I,J,K))           MLTGRD1A.5541  
     &            *SCALAR1 + .5*DEF(I,J,K)*SCALARS*SEC_P_LATITUDE(I,J)*    MLTGRD1A.5542  
     &            (D(I,J,K)*(Q(I+1,J,K)-Q(I,J,K))+D(I-1,J,K)*              MLTGRD1A.5543  
     &             (Q(I,J,K)-Q(I-1,J,K)))                                  MLTGRD1A.5544  
     &            - Q(I,J,K)*G(I,J,K)                                      MLTGRD1A.5545  
      END DO                                                               MLTGRD1A.5546  
                                                                           MLTGRD1A.5547  
      IF (VERSION.LT.3) THEN                                               MLTGRD1A.5548  
CL GLOBAL VERSION.                                                         MLTGRD1A.5549  
CL    FIRST POINT.                                                         MLTGRD1A.5550  
                                                                           MLTGRD1A.5551  
        SCALAR1 = SCALAR*SEC_P_LATITUDE(1,J)*SEC_P_LATITUDE(1,J)           MLTGRD1A.5552  
        A1(1)  =  A(1,J,K) *SCALAR1 + .5*DEF(1,J,K)*D(1,J,K)*SCALARS       MLTGRD1A.5553  
     &            *SEC_P_LATITUDE(1,J)                                     MLTGRD1A.5554  
        F_VECTOR(1) = A(I_DIM,J,K)*SCALAR1                                 MLTGRD1A.5555  
     &                - .5*DEF(1,J,K)*D(I_DIM,J,K)                         MLTGRD1A.5556  
     &                    *SCALARS*SEC_P_LATITUDE(1,J)                     MLTGRD1A.5557  
        A0(1)       = - A1(1) - F_VECTOR(1) - G(1,J,K)                     MLTGRD1A.5558  
        LHS(1)      =  (Q(I_DIM,J,K)*A(I_DIM,J,K) - Q(1,J,K) *             MLTGRD1A.5559  
     &                 (A(I_DIM,J,K) + A(1,J,K)) + Q(2,J,K)*A(1,J,K))      MLTGRD1A.5560  
     &            *SCALAR1 + .5*DEF(1,J,K)*SCALARS*SEC_P_LATITUDE(1,J)*    MLTGRD1A.5561  
     &            (D(1,J,K)*(Q(2,J,K)-Q(1,J,K))+D(I_DIM,J,K)*              MLTGRD1A.5562  
     &             (Q(1,J,K)-Q(I_DIM,J,K)))                                MLTGRD1A.5563  
     &            - Q(1,J,K)*G(1,J,K)                                      MLTGRD1A.5564  
                                                                           MLTGRD1A.5565  
CL    PENULTIMATE POINT.                                                   MLTGRD1A.5566  
                                                                           MLTGRD1A.5567  
        I = I_DIM-1                                                        MLTGRD1A.5568  
        SCALAR1 = SCALAR*SEC_P_LATITUDE(I,J)*SEC_P_LATITUDE(I,J)           MLTGRD1A.5569  
        F_VECTOR(I)= A(I,J,K) *SCALAR1 + .5*DEF(I,J,K)*D(I,J,K)*SCALARS    MLTGRD1A.5570  
     &            *SEC_P_LATITUDE(I,J)                                     MLTGRD1A.5571  
        A2(I)  =  A(I-1,J,K) *SCALAR1 - .5*DEF(I,J,K)*D(I-1,J,K)           MLTGRD1A.5572  
     &            *SCALARS*SEC_P_LATITUDE(I,J)                             MLTGRD1A.5573  
        A0(I)       = - F_VECTOR(I) - A2(I) - G(I,J,K)                     MLTGRD1A.5574  
        LHS(I)      = (Q(I-1,J,K)*A(I-1,J,K) - Q(I,J,K) *                  MLTGRD1A.5575  
     &               (A(I-1,J,K) + A(I,J,K)) + Q(I+1,J,K)*A(I,J,K))        MLTGRD1A.5576  
     &            *SCALAR1 + .5*DEF(I,J,K)*SCALARS*SEC_P_LATITUDE(I,J)*    MLTGRD1A.5577  
     &            (D(I,J,K)*(Q(I+1,J,K)-Q(I,J,K))+D(I-1,J,K)*              MLTGRD1A.5578  
     &             (Q(I,J,K)-Q(I-1,J,K)))                                  MLTGRD1A.5579  
     &            - Q(I,J,K)*G(I,J,K)                                      MLTGRD1A.5580  
                                                                           MLTGRD1A.5581  
CL    LAST POINT.                                                          MLTGRD1A.5582  
                                                                           MLTGRD1A.5583  
        SCALAR1 = SCALAR*SEC_P_LATITUDE(I_DIM,J)*SEC_P_LATITUDE(I_DIM,J)   MLTGRD1A.5584  
        G_VECTOR(1) = A(I_DIM,J,K) *SCALAR1 +                              MLTGRD1A.5585  
     &                .5*DEF(I_DIM,J,K)*D(I_DIM,J,K)*SCALARS               MLTGRD1A.5586  
     &            *SEC_P_LATITUDE(I_DIM,J)                                 MLTGRD1A.5587  
        G_VECTOR(2) = A(I_DIM-1,J,K)*SCALAR1                               MLTGRD1A.5588  
     &                - .5*DEF(I_DIM,J,K)*D(I_DIM-1,J,K)                   MLTGRD1A.5589  
     &            *SCALARS*SEC_P_LATITUDE(I_DIM,J)                         MLTGRD1A.5590  
        AN          = - G_VECTOR(1) - G_VECTOR(2) - G(I_DIM,J,K)           MLTGRD1A.5591  
        LHS(I_DIM) =(Q(I_DIM-1,J,K)*A(I_DIM-1,J,K) - Q(I_DIM,J,K)          MLTGRD1A.5592  
     &                 *(A(I_DIM-1,J,K) + A(I_DIM,J,K)) + Q(1,J,K)         MLTGRD1A.5593  
     &                 *A(I_DIM,J,K))*SCALAR1                              MLTGRD1A.5594  
     &             + .5*DEF(I_DIM,J,K)*SCALARS*SEC_P_LATITUDE(I_DIM,J)*    MLTGRD1A.5595  
     &            (D(I_DIM,J,K)*(Q(1,J,K)-Q(I_DIM,J,K))+D(I_DIM-1,J,K)*    MLTGRD1A.5596  
     &             (Q(I_DIM,J,K)-Q(I_DIM-1,J,K)))                          MLTGRD1A.5597  
     &            - Q(I_DIM,J,K)*G(I_DIM,J,K)                              MLTGRD1A.5598  
                                                                           MLTGRD1A.5599  
      ELSE                                                                 MLTGRD1A.5600  
CL LIMITED AREA VERSION.                                                   MLTGRD1A.5601  
CL    FIRST POINT.                                                         MLTGRD1A.5602  
                                                                           MLTGRD1A.5603  
        SCALAR1 = SCALAR*SEC_P_LATITUDE(1,J)*SEC_P_LATITUDE(1,J)           MLTGRD1A.5604  
        A1(1)       =  2.*A(1,J,K)*SCALAR1                                 MLTGRD1A.5605  
        A0(1)       = - A1(1) - G(1,J,K)                                   MLTGRD1A.5606  
        LHS(1)      =  2.*( - Q(1,J,K) *                                   MLTGRD1A.5607  
     &                   A(1,J,K) + Q(2,J,K)*A(1,J,K))                     MLTGRD1A.5608  
     &                  *SCALAR1 - G(1,J,K) * Q(1,J,K)                     MLTGRD1A.5609  
                                                                           MLTGRD1A.5610  
CL    LAST POINT.                                                          MLTGRD1A.5611  
                                                                           MLTGRD1A.5612  
        SCALAR1 = SCALAR*SEC_P_LATITUDE(I_DIM,J)*SEC_P_LATITUDE(I_DIM,J)   MLTGRD1A.5613  
        A2(I_DIM) = 2.*A(I_DIM-1,J,K)*SCALAR1                              MLTGRD1A.5614  
        A0(I_DIM)   = - A2(I_DIM) - G(I_DIM,J,K)                           MLTGRD1A.5615  
        LHS(I_DIM) = 2.*(Q(I_DIM-1,J,K)*A(I_DIM-1,J,K) - Q(I_DIM,J,K)      MLTGRD1A.5616  
     &                 *A(I_DIM-1,J,K))*SCALAR1                            MLTGRD1A.5617  
     &                  - G(I_DIM,J,K)*Q(I_DIM,J,K)                        MLTGRD1A.5618  
                                                                           MLTGRD1A.5619  
      END IF                                                               MLTGRD1A.5620  
                                                                           MLTGRD1A.5621  
C ----------------------------------------------------------------------   MLTGRD1A.5622  
CL    SECTION 1.2 CALCULATE J-DIRECTION DERIVATIVES AND ADD ON.            MLTGRD1A.5623  
C ----------------------------------------------------------------------   MLTGRD1A.5624  
                                                                           MLTGRD1A.5625  
      IF(J_NT) THEN                                                        MLTGRD1A.5626  
        SCALAR = EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*                MLTGRD1A.5627  
     &           LATITUDE_STEP_INVERSE*LATITUDE_STEP_INVERSE               MLTGRD1A.5628  
        SCALARS= EARTH_RADIUS_INVERSE*LATITUDE_STEP_INVERSE                MLTGRD1A.5629  
        IF (J.EQ.1) THEN                                                   MLTGRD1A.5630  
C ONLY POSSIBLE IN LIMITED AREA CODE, AS NO I-LINE SOLVE CALLED AT POLE    MLTGRD1A.5631  
C IN GLOBAL VERSION.                                                       MLTGRD1A.5632  
          DO I= 1,I_END                                                    MLTGRD1A.5633  
            LHS(I) = LHS(I) -2.*(Q(I,J,K)*B(I,J,K)                         MLTGRD1A.5634  
     &                      -Q(I,J+1,K)*B(I,J,K))*COS_V_LATITUDE(I,J)      MLTGRD1A.5635  
     &                      *SEC_P_LATITUDE(I,J)*SCALAR                    MLTGRD1A.5636  
            A0(I)  = A0(I) -2.*B(I,J,K)*COS_V_LATITUDE(I,J)                MLTGRD1A.5637  
     &                      *SEC_P_LATITUDE(I,J)*SCALAR                    MLTGRD1A.5638  
          END DO                                                           MLTGRD1A.5639  
                                                                           MLTGRD1A.5640  
        ELSE IF(J.EQ.J_DIM) THEN                                           MLTGRD1A.5641  
C ONLY POSSIBLE IN LIMITED AREA CODE, AS NO I-LINE SOLVE CALLED AT POLE    MLTGRD1A.5642  
C IN GLOBAL VERSION.                                                       MLTGRD1A.5643  
          DO I= 1,I_END                                                    MLTGRD1A.5644  
            LHS(I) = LHS(I) + 2.*(Q(I,J-1,K)*B(I,J-1,K)                    MLTGRD1A.5645  
     &                      -Q(I,J,K)*B(I,J-1,K))*COS_V_LATITUDE(I,J-1)    MLTGRD1A.5646  
     &                      *SEC_P_LATITUDE(I,J)*SCALAR                    MLTGRD1A.5647  
            A0(I)  = A0(I) - 2.*B(I,J-1,K)*COS_V_LATITUDE(I,J-1)           MLTGRD1A.5648  
     &                      *SEC_P_LATITUDE(I,J)*SCALAR                    MLTGRD1A.5649  
          END DO                                                           MLTGRD1A.5650  
                                                                           MLTGRD1A.5651  
        ELSE                                                               MLTGRD1A.5652  
          DO I= 1,I_END                                                    MLTGRD1A.5653  
            LHS(I) = LHS(I) + ((Q(I,J-1,K)*B(I,J-1,K)                      MLTGRD1A.5654  
     &                      -Q(I,J,K)*B(I,J-1,K))*COS_V_LATITUDE(I,J-1)    MLTGRD1A.5655  
     &                      -(Q(I,J,K)*B(I,J,K)                            MLTGRD1A.5656  
     &                      -Q(I,J+1,K)*B(I,J,K))*COS_V_LATITUDE(I,J))     MLTGRD1A.5657  
     &                      *SEC_P_LATITUDE(I,J)*SCALAR                    MLTGRD1A.5658  
     &                      +DEF(I,J,K)*.5*SCALARS*                        MLTGRD1A.5659  
     &                      (E(I,J-1,K)*(Q(I,J-1,K)-Q(I,J,K))+             MLTGRD1A.5660  
     &                       E(I,J,K)*(Q(I,J,K)-Q(I,J+1,K)))               MLTGRD1A.5661  
            A0(I)  = A0(I) - (B(I,J-1,K)*COS_V_LATITUDE(I,J-1)             MLTGRD1A.5662  
     &                   +B(I,J,K)*COS_V_LATITUDE(I,J))                    MLTGRD1A.5663  
     &                    *SEC_P_LATITUDE(I,J)*SCALAR                      MLTGRD1A.5664  
     &                      +DEF(I,J,K)*.5*SCALARS*                        MLTGRD1A.5665  
     &                      (E(I,J,K)-E(I,J-1,K))                          MLTGRD1A.5666  
          END DO                                                           MLTGRD1A.5667  
                                                                           MLTGRD1A.5668  
          IF (VERSION.LT.3) THEN                                           MLTGRD1A.5669  
CL    LAST POINT.                                                          MLTGRD1A.5670  
                                                                           MLTGRD1A.5671  
            I = I_DIM                                                      MLTGRD1A.5672  
            LHS(I) = LHS(I) +  ((Q(I,J-1,K)*B(I,J-1,K)                     MLTGRD1A.5673  
     &                    -Q(I,J,K)*B(I,J-1,K))*COS_V_LATITUDE(I,J-1)      MLTGRD1A.5674  
     &                    -(Q(I,J,K)*B(I,J,K)                              MLTGRD1A.5675  
     &                    -Q(I,J+1,K)*B(I,J,K))*COS_V_LATITUDE(I,J))       MLTGRD1A.5676  
     &                    *SEC_P_LATITUDE(I,J)*SCALAR                      MLTGRD1A.5677  
     &                      +DEF(I,J,K)*.5*SCALARS*                        MLTGRD1A.5678  
     &                      (E(I,J-1,K)*(Q(I,J-1,K)-Q(I,J,K))+             MLTGRD1A.5679  
     &                       E(I,J,K)*(Q(I,J,K)-Q(I,J+1,K)))               MLTGRD1A.5680  
            AN   = AN - (B(I,J-1,K)*COS_V_LATITUDE(I,J-1)                  MLTGRD1A.5681  
     &                   +B(I,J,K)*COS_V_LATITUDE(I,J))                    MLTGRD1A.5682  
     &                    *SEC_P_LATITUDE(I,J)*SCALAR                      MLTGRD1A.5683  
     &                      +DEF(I,J,K)*.5*SCALARS*                        MLTGRD1A.5684  
     &                      (E(I,J,K)-E(I,J-1,K))                          MLTGRD1A.5685  
          END IF                                                           MLTGRD1A.5686  
        END IF                                                             MLTGRD1A.5687  
      END IF                                                               MLTGRD1A.5688  
                                                                           MLTGRD1A.5689  
C ----------------------------------------------------------------------   MLTGRD1A.5690  
CL    SECTION 1.3 CALCULATE K-DIRECTION DERIVATIVES AND ADD ON.            MLTGRD1A.5691  
C ----------------------------------------------------------------------   MLTGRD1A.5692  
                                                                           MLTGRD1A.5693  
      IF (K_NT) THEN                                                       MLTGRD1A.5694  
        IF(K.EQ.1) THEN                                                    MLTGRD1A.5695  
          SCALAR = 1./(Z_MID(K) - Z_MID(K-1))                              MLTGRD1A.5696  
          SCALAR1 = 1./(Z_Q(K+1) - Z_Q(K))                                 MLTGRD1A.5697  
          DO I=1,I_END                                                     MLTGRD1A.5698  
            LHS(I) = LHS(I) + SCALAR*(Q(I,J,K+1)*C2(I,J,K+1)               MLTGRD1A.5699  
     &                   -Q(I,J,K)*C2(I,J,K))*C1(I,J,K)*SCALAR1            MLTGRD1A.5700  
            A0(I) = A0(I) - SCALAR*C1(I,J,K)*SCALAR1*C2(I,J,K)             MLTGRD1A.5701  
            IF(Z_Q(1).NE.Z_MID(1)) THEN                                    MLTGRD1A.5702  
C INCLUDE FIRST DERIVATIVE TERM WHEN NON-ZERO                              MLTGRD1A.5703  
              LHS(I) = LHS(I)  + .5*SCALAR1*DEF(I,J,K)*F(I,J,K)*           MLTGRD1A.5704  
     &                        (Q(I,J,K+1)*C2(I,J,K+1)-                     MLTGRD1A.5705  
     &                         Q(I,J,K)*C2(I,J,K))                         MLTGRD1A.5706  
              A0(I) = A0(I) - .5*SCALAR1*DEF(I,J,K)*F(I,J,K)               MLTGRD1A.5707  
     &                         *C2(I,J,K)                                  MLTGRD1A.5708  
            END IF                                                         MLTGRD1A.5709  
          END DO                                                           MLTGRD1A.5710  
          IF (VERSION.LT.3) THEN                                           MLTGRD1A.5711  
            I = I_DIM                                                      MLTGRD1A.5712  
            LHS(I) = LHS(I) + SCALAR*(Q(I,J,K+1)*C2(I,J,K+1)               MLTGRD1A.5713  
     &                   -Q(I,J,K)*C2(I,J,K))*C1(I,J,K)*SCALAR1            MLTGRD1A.5714  
            AN = AN - SCALAR*C1(I,J,K)*SCALAR1*C2(I,J,K)                   MLTGRD1A.5715  
            IF(Z_Q(1).NE.Z_MID(1)) THEN                                    MLTGRD1A.5716  
C INCLUDE FIRST DERIVATIVE TERM WHEN NON-ZERO                              MLTGRD1A.5717  
              LHS(I) = LHS(I) + .5*SCALAR1*DEF(I,J,K)*F(I,J,K)*            MLTGRD1A.5718  
     &                        (Q(I,J,K+1)*C2(I,J,K+1)-                     MLTGRD1A.5719  
     &                         Q(I,J,K)*C2(I,J,K))                         MLTGRD1A.5720  
              AN = AN - .5*SCALAR1*DEF(I,J,K)*F(I,J,K)                     MLTGRD1A.5721  
     &                         *C2(I,J,K)                                  MLTGRD1A.5722  
            END IF                                                         MLTGRD1A.5723  
          END IF                                                           MLTGRD1A.5724  
        ELSE IF (K.EQ.K_DIM) THEN                                          MLTGRD1A.5725  
          SCALAR = 1./(Z_MID(K) - Z_MID(K-1))                              MLTGRD1A.5726  
          SCALAR2 = 1./(Z_Q(K) - Z_Q(K-1))                                 MLTGRD1A.5727  
          DO I=1,I_END                                                     MLTGRD1A.5728  
            LHS(I) = LHS(I) - SCALAR*(Q(I,J,K)*C2(I,J,K)                   MLTGRD1A.5729  
     &                   -Q(I,J,K-1)*C2(I,J,K-1))*C1(I,J,K-1)*SCALAR2      MLTGRD1A.5730  
            A0(I) = A0(I) - SCALAR*C1(I,J,K-1)*SCALAR2*C2(I,J,K)           MLTGRD1A.5731  
            IF(Z_Q(K_DIM).NE.Z_MID(K_DIM+1)) THEN                          MLTGRD1A.5732  
C INCLUDE FIRST DERIVATIVE TERM WHEN NON-ZERO                              MLTGRD1A.5733  
              LHS(I) = LHS(I)  + .5*SCALAR2*DEF(I,J,K)*F(I,J,K-1)*         MLTGRD1A.5734  
     &                        (Q(I,J,K)*C2(I,J,K)-                         MLTGRD1A.5735  
     &                         Q(I,J,K-1)*C2(I,J,K-1))                     MLTGRD1A.5736  
              A0(I) = A0(I) + .5*SCALAR2*DEF(I,J,K)*F(I,J,K-1)             MLTGRD1A.5737  
     &                         *C2(I,J,K)                                  MLTGRD1A.5738  
            END IF                                                         MLTGRD1A.5739  
          END DO                                                           MLTGRD1A.5740  
          IF (VERSION.LT.3) THEN                                           MLTGRD1A.5741  
            I = I_DIM                                                      MLTGRD1A.5742  
            LHS(I) = LHS(I) - SCALAR*(Q(I,J,K)*C2(I,J,K)                   MLTGRD1A.5743  
     &                   -Q(I,J,K-1)*C2(I,J,K-1))*C1(I,J,K-1)*SCALAR2      MLTGRD1A.5744  
            AN = AN - SCALAR*C1(I,J,K-1)*SCALAR2*C2(I,J,K)                 MLTGRD1A.5745  
            IF(Z_Q(K_DIM).NE.Z_MID(K_DIM+1)) THEN                          MLTGRD1A.5746  
C INCLUDE FIRST DERIVATIVE TERM WHEN NON-ZERO                              MLTGRD1A.5747  
              LHS(I) = LHS(I)  + .5*SCALAR2*DEF(I,J,K)*F(I,J,K-1)*         MLTGRD1A.5748  
     &                        (Q(I,J,K)*C2(I,J,K)-                         MLTGRD1A.5749  
     &                         Q(I,J,K-1)*C2(I,J,K-1))                     MLTGRD1A.5750  
              AN = AN + .5*SCALAR2*DEF(I,J,K)*F(I,J,K-1)                   MLTGRD1A.5751  
     &                         *C2(I,J,K)                                  MLTGRD1A.5752  
            END IF                                                         MLTGRD1A.5753  
          END IF                                                           MLTGRD1A.5754  
        ELSE                                                               MLTGRD1A.5755  
          SCALAR = 1./(Z_MID(K) - Z_MID(K-1))                              MLTGRD1A.5756  
          SCALAR1 = 1./(Z_Q(K+1) - Z_Q(K))                                 MLTGRD1A.5757  
          SCALAR2 = 1./(Z_Q(K) - Z_Q(K-1))                                 MLTGRD1A.5758  
          DO I=1,I_END                                                     MLTGRD1A.5759  
            LHS(I) = LHS(I) + SCALAR*                                      MLTGRD1A.5760  
     &               ((Q(I,J,K+1)*C2(I,J,K+1)-Q(I,J,K)*C2(I,J,K))          MLTGRD1A.5761  
     &                *C1(I,J,K)*SCALAR1                                   MLTGRD1A.5762  
     &               -(Q(I,J,K)*C2(I,J,K)-Q(I,J,K-1)*C2(I,J,K-1))          MLTGRD1A.5763  
     &                *C1(I,J,K-1)*SCALAR2)                                MLTGRD1A.5764  
     &               +.5*DEF(I,J,K)*                                       MLTGRD1A.5765  
     &               ((Q(I,J,K+1)*C2(I,J,K+1)-Q(I,J,K)*C2(I,J,K))          MLTGRD1A.5766  
     &                *F(I,J,K)*SCALAR1                                    MLTGRD1A.5767  
     &               +(Q(I,J,K)*C2(I,J,K)-Q(I,J,K-1)*C2(I,J,K-1))          MLTGRD1A.5768  
     &                *F(I,J,K-1)*SCALAR2)                                 MLTGRD1A.5769  
            A0(I) = A0(I) - SCALAR*(C1(I,J,K)*SCALAR1                      MLTGRD1A.5770  
     &                              +C1(I,J,K-1)*SCALAR2)*C2(I,J,K)        MLTGRD1A.5771  
     &               +.5*DEF(I,J,K)*(F(I,J,K-1)*SCALAR2                    MLTGRD1A.5772  
     &                               -F(I,J,K)*SCALAR1)*C2(I,J,K)          MLTGRD1A.5773  
          END DO                                                           MLTGRD1A.5774  
          IF (VERSION.LT.3) THEN                                           MLTGRD1A.5775  
            I = I_DIM                                                      MLTGRD1A.5776  
            LHS(I) = LHS(I) + SCALAR*                                      MLTGRD1A.5777  
     &               ((Q(I,J,K+1)*C2(I,J,K+1)-Q(I,J,K)*C2(I,J,K))          MLTGRD1A.5778  
     &                *C1(I,J,K)*SCALAR1                                   MLTGRD1A.5779  
     &               -(Q(I,J,K)*C2(I,J,K)-Q(I,J,K-1)*C2(I,J,K-1))          MLTGRD1A.5780  
     &                *C1(I,J,K-1)*SCALAR2)                                MLTGRD1A.5781  
     &               +.5*DEF(I,J,K)*                                       MLTGRD1A.5782  
     &               ((Q(I,J,K+1)*C2(I,J,K+1)-Q(I,J,K)*C2(I,J,K))          MLTGRD1A.5783  
     &                *F(I,J,K)*SCALAR1                                    MLTGRD1A.5784  
     &               +(Q(I,J,K)*C2(I,J,K)-Q(I,J,K-1)*C2(I,J,K-1))          MLTGRD1A.5785  
     &                *F(I,J,K-1)*SCALAR2)                                 MLTGRD1A.5786  
            AN = AN - SCALAR*(C1(I,J,K)*SCALAR1                            MLTGRD1A.5787  
     &                              +C1(I,J,K-1)*SCALAR2)*C2(I,J,K)        MLTGRD1A.5788  
     &               +.5*DEF(I,J,K)*(F(I,J,K-1)*SCALAR2                    MLTGRD1A.5789  
     &                               -F(I,J,K)*SCALAR1)*C2(I,J,K)          MLTGRD1A.5790  
          END IF                                                           MLTGRD1A.5791  
        END IF                                                             MLTGRD1A.5792  
                                                                           MLTGRD1A.5793  
      END IF                                                               MLTGRD1A.5794  
                                                                           MLTGRD1A.5795  
CL    END OF ROUTINE MG_I_MATRIX                                           MLTGRD1A.5796  
                                                                           MLTGRD1A.5797  
      RETURN                                                               MLTGRD1A.5798  
      END                                                                  MLTGRD1A.5799  
CLL   SUBROUTINE MG_J_LINE                                                 MLTGRD1A.5800  
CLL                                                                        MLTGRD1A.5801  
CLL   PURPOSE:                                                             MLTGRD1A.5802  
CLL   -------                                                              MLTGRD1A.5803  
CLL   PERFORMS LINE SMOOTHING IN J DIRECTION.                              MLTGRD1A.5804  
CLL                                                                        MLTGRD1A.5805  
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.5806  
CLL                                                                        MLTGRD1A.5807  
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.5808  
CLL VERSION  DATE                                                          MLTGRD1A.5809  
CLL   3.3                                                                  MLTGRD1A.5810  
CLL                                                                        MLTGRD1A.5811  
CLL                                                                        MLTGRD1A.5812  
CLLEND -----------------------------------------------------------------   MLTGRD1A.5813  
                                                                           MLTGRD1A.5814  
C*L ARGUMENT LIST.                                                         MLTGRD1A.5815  
                                                                           MLTGRD1A.5816  
      SUBROUTINE MG_J_LINE                                                 MLTGRD1A.5817  
     &                    (Q,RHS,A,B,C1,C2,DEF,D,E,F,G,COS_P_LATITUDE,     MLTGRD1A.5818  
     &                     SEC_P_LATITUDE,                                 MLTGRD1A.5819  
     &                     COS_V_LATITUDE,LATITUDE_STEP_INVERSE,           MLTGRD1A.5820  
     &                     LONGITUDE_STEP_INVERSE,EARTH_RADIUS_INVERSE,    MLTGRD1A.5821  
     &                     I_DIM,J_DIM,K_DIM,W,RMS_RES,RMS_INC,            MLTGRD1A.5822  
     &                     SWJAC,SWSYM,JAC,PAT,SYM,NFB,IPAT,               MLTGRD1A.5823  
     &                     VERSION,K_BC,Z_Q,Z_MID,I_NT,K_NT)               MLTGRD1A.5824  
                                                                           MLTGRD1A.5825  
      IMPLICIT NONE                                                        MLTGRD1A.5826  
                                                                           MLTGRD1A.5827  
      LOGICAL                                                              MLTGRD1A.5828  
     &  I_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN I DIRECTION   MLTGRD1A.5829  
     &, K_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN K DIRECTION   MLTGRD1A.5830  
                                                                           MLTGRD1A.5831  
      INTEGER                                                              MLTGRD1A.5832  
     &  I_DIM       !IN. NUMBER OF POINTS IN I-DIRECTION.                  MLTGRD1A.5833  
     &, J_DIM       !IN. NUMBER OF POINTS IN J-DIRECTION.                  MLTGRD1A.5834  
     &, K_DIM       !IN. NUMBER OF POINTS IN K-DIRECTION.                  MLTGRD1A.5835  
     &, NFB         !IN. NUMBER OF FORWARD / BACKWARD SWEEPS OF GRID       MLTGRD1A.5836  
     &              ! NEEDED.                                              MLTGRD1A.5837  
     &, IPAT        !IN. USED TO DISTINGUISH BETWEEN RED AND BLACK         MLTGRD1A.5838  
     &              ! POINTS.                                              MLTGRD1A.5839  
     &, VERSION     !IN. VERSION OF MULTIGRID SCHEME.                      MLTGRD1A.5840  
     &, K_BC        !IN. BOUNDARY CONDITION IN K DIRECTION.                MLTGRD1A.5841  
                                                                           MLTGRD1A.5842  
      LOGICAL                                                              MLTGRD1A.5843  
     &  JAC     !IN. .TRUE. FOR JACOBI METHODS                             MLTGRD1A.5844  
     &, PAT     !IN. .TRUE. FOR PATTERN SCHEMES                            MLTGRD1A.5845  
     &, SYM     !IN. .TRUE. FOR SYMMETRIC SCHEMES                          MLTGRD1A.5846  
                                                                           MLTGRD1A.5847  
      REAL                                                                 MLTGRD1A.5848  
     &  SWJAC    !IN. A SWITCH WHICH IS ZERO FOR JACOBI METHODS            MLTGRD1A.5849  
     &, SWSYM    !IN. A SWITCH WHICH IS ZERO FOR SYMMETRIC METHODS         MLTGRD1A.5850  
     &, RMS_RES  !IN. ROOT MEAN SQUARE RESIDUAL NORM.                      MLTGRD1A.5851  
     &, RMS_INC  !IN. ROOT MEAN SQUARE INCREMENT NORM.                     MLTGRD1A.5852  
     &, W        !IN. RELAXATION PARAMETER FOR EACH VARIABLE IN SYSTEM     MLTGRD1A.5853  
                                                                           MLTGRD1A.5854  
      REAL                                                                 MLTGRD1A.5855  
     &  A(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5856  
     &, B(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5857  
     &, C1(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.5858  
     &, C2(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.5859  
     &, DEF(I_DIM,J_DIM,K_DIM)  !IN. COEFFICIENT                           MLTGRD1A.5860  
     &, D(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5861  
     &, E(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5862  
     &, F(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5863  
     &, G(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.5864  
     &, RHS(I_DIM,J_DIM,K_DIM)  !IN. RIGHT-HAND-SIDE OF EQUATION.          MLTGRD1A.5865  
     &, COS_P_LATITUDE(I_DIM,J_DIM) !IN. COSINE OF LATITUDE AT Q POINTS.   MLTGRD1A.5866  
     &, SEC_P_LATITUDE(I_DIM,J_DIM) !IN. 1./COS OF LATITUDE AT Q POINTS.   MLTGRD1A.5867  
     &, COS_V_LATITUDE(I_DIM,J_DIM-1)                                      MLTGRD1A.5868  
     &                          !IN. COSINE OF LATITUDE AT V POINTS.       MLTGRD1A.5869  
     &, Z_Q(K_DIM)              !IN. Z AT Q POINTS.                        MLTGRD1A.5870  
     &, Z_MID(0:K_DIM)          !IN. Z MIDWAY BETWEEN Q POINTS.            MLTGRD1A.5871  
                                                                           MLTGRD1A.5872  
      REAL                                                                 MLTGRD1A.5873  
     &  Q(I_DIM,J_DIM,K_DIM)    !OUT. SOLUTION.                            MLTGRD1A.5874  
                                                                           MLTGRD1A.5875  
      REAL                                                                 MLTGRD1A.5876  
     &  LATITUDE_STEP_INVERSE  !IN.                                        MLTGRD1A.5877  
     &, LONGITUDE_STEP_INVERSE !IN.                                        MLTGRD1A.5878  
     &, EARTH_RADIUS_INVERSE   !IN                                         MLTGRD1A.5879  
                                                                           MLTGRD1A.5880  
C*----------------------------------------------------------------------   MLTGRD1A.5881  
                                                                           MLTGRD1A.5882  
C*L   6 LOCAL WORK ARRAYS REQUIRED.                                        MLTGRD1A.5883  
                                                                           MLTGRD1A.5884  
      REAL                                                                 MLTGRD1A.5885  
     &  LHS(J_DIM)                                                         MLTGRD1A.5886  
     &, A0(J_DIM,I_DIM)                                                    MLTGRD1A.5887  
     &, A1(J_DIM,I_DIM)                                                    MLTGRD1A.5888  
     &, A2(J_DIM,I_DIM)                                                    MLTGRD1A.5889  
     &, R(J_DIM,I_DIM)                                                     MLTGRD1A.5890  
     &, CORRECTIONS(I_DIM,J_DIM,K_DIM)                                     MLTGRD1A.5891  
                                                                           MLTGRD1A.5892  
C*----------------------------------------------------------------------   MLTGRD1A.5893  
C LOCAL VARIABLES.                                                         MLTGRD1A.5894  
                                                                           MLTGRD1A.5895  
      INTEGER                                                              MLTGRD1A.5896  
     &  I_BEGIN                                                            MLTGRD1A.5897  
     &, IK_BEGIN                                                           MLTGRD1A.5898  
     &, I_END                                                              MLTGRD1A.5899  
     &, I_STEP                                                             MLTGRD1A.5900  
     &, K_BEGIN                                                            MLTGRD1A.5901  
     &, K_END                                                              MLTGRD1A.5902  
     &, K_STEP                                                             MLTGRD1A.5903  
     &, I,J,K,J2                                                           MLTGRD1A.5904  
     &, J_FB                                                               MLTGRD1A.5905  
     &, I_ZEBRA                                                            MLTGRD1A.5906  
     &, J_EQ                                                               MLTGRD1A.5907  
     &, J_BEGIN(2) !TWO VALUES. 2ND ONLY USED IN VERSION 2                 MLTGRD1A.5908  
     &, J_END(2)   !  "           "              "                         MLTGRD1A.5909  
     &, SWEEPS                                                             MLTGRD1A.5910  
                                                                           MLTGRD1A.5911  
      REAL                                                                 MLTGRD1A.5912  
     &  WEIGHT                                                             MLTGRD1A.5913  
     &, SCALAR                                                             MLTGRD1A.5914  
     &, FACTOR                                                             MLTGRD1A.5915  
                                                                           MLTGRD1A.5916  
C*L   EXTERNAL ROUTINES CALLED.                                            MLTGRD1A.5917  
      EXTERNAL MG_J_MATRIX                                                 MLTGRD1A.5918  
                                                                           MLTGRD1A.5919  
C*----------------------------------------------------------------------   MLTGRD1A.5920  
                                                                           MLTGRD1A.5921  
CFPP$ NOCONCUR R                                                           MLTGRD1A.5922  
                                                                           MLTGRD1A.5923  
CL----------------------------------------------------------------------   MLTGRD1A.5924  
CL    SECTION 1. INITIALISATION.                                           MLTGRD1A.5925  
CL----------------------------------------------------------------------   MLTGRD1A.5926  
                                                                           MLTGRD1A.5927  
CL    INITIALISE NORMS                                                     MLTGRD1A.5928  
                                                                           MLTGRD1A.5929  
      RMS_RES=0.0                                                          MLTGRD1A.5930  
      RMS_INC=0.0                                                          MLTGRD1A.5931  
                                                                           MLTGRD1A.5932  
CL    SET TEMPORARY RELAXATION PARAMETER TO ZERO FOR JACOBI:               MLTGRD1A.5933  
                                                                           MLTGRD1A.5934  
      WEIGHT = SWJAC*W                                                     MLTGRD1A.5935  
                                                                           MLTGRD1A.5936  
CL    DEFINE POINT ORDERING IN JK PLANE FOR FIRST SWEEP                    MLTGRD1A.5937  
                                                                           MLTGRD1A.5938  
      IF(VERSION.EQ.4 .AND. I_NT) THEN                                     MLTGRD1A.5939  
        I_BEGIN = 2                                                        MLTGRD1A.5940  
        I_END   = I_DIM-1                                                  MLTGRD1A.5941  
      ELSE                                                                 MLTGRD1A.5942  
        I_BEGIN = 1                                                        MLTGRD1A.5943  
        I_END   = I_DIM                                                    MLTGRD1A.5944  
      END IF                                                               MLTGRD1A.5945  
      IF (IPAT.EQ.2) THEN                                                  MLTGRD1A.5946  
        I_STEP  = 2                                                        MLTGRD1A.5947  
      ELSE                                                                 MLTGRD1A.5948  
        I_STEP  = 1                                                        MLTGRD1A.5949  
      END IF                                                               MLTGRD1A.5950  
      K_BEGIN = 1                                                          MLTGRD1A.5951  
      K_END   = K_DIM                                                      MLTGRD1A.5952  
      IF (K_BC.EQ.2 ) THEN                                                 MLTGRD1A.5953  
        K_END = K_DIM-1                                                    MLTGRD1A.5954  
      ELSE IF (K_BC.EQ.3 ) THEN                                            MLTGRD1A.5955  
        K_BEGIN = 2                                                        MLTGRD1A.5956  
      ELSE IF (K_BC.EQ. 4) THEN                                            MLTGRD1A.5957  
        K_BEGIN = 2                                                        MLTGRD1A.5958  
        K_END = K_DIM-1                                                    MLTGRD1A.5959  
      END IF                                                               MLTGRD1A.5960  
      K_STEP  = 1                                                          MLTGRD1A.5961  
      J_EQ = (J_DIM+1)/2                                                   MLTGRD1A.5962  
      SWEEPS = 1                                                           MLTGRD1A.5963  
      IF (VERSION. EQ .3) THEN                                             MLTGRD1A.5964  
CL LIMITED AREA VERSION. BOUNDARIES INCLUDED.                              MLTGRD1A.5965  
        J_BEGIN(1) = 1                                                     MLTGRD1A.5966  
        J_END(1) = J_DIM                                                   MLTGRD1A.5967  
      ELSE                                                                 MLTGRD1A.5968  
CL BOUNDARIES NOT INCLUDED.                                                MLTGRD1A.5969  
        J_BEGIN(1) = 2                                                     MLTGRD1A.5970  
        J_END(1) = J_DIM-1                                                 MLTGRD1A.5971  
        IF(VERSION .EQ.2) THEN                                             MLTGRD1A.5972  
          J_END(1) = J_EQ - 1                                              MLTGRD1A.5973  
          J_BEGIN(2) = J_EQ+1                                              MLTGRD1A.5974  
          J_END(2) = J_DIM-1                                               MLTGRD1A.5975  
          SWEEPS = 2                                                       MLTGRD1A.5976  
        END IF                                                             MLTGRD1A.5977  
      END IF                                                               MLTGRD1A.5978  
                                                                           MLTGRD1A.5979  
CL    SET ZEBRA SWITCH FOR FIRST SWEEP                                     MLTGRD1A.5980  
                                                                           MLTGRD1A.5981  
      I_ZEBRA=0                                                            MLTGRD1A.5982  
                                                                           MLTGRD1A.5983  
CL----------------------------------------------------------------------   MLTGRD1A.5984  
CL    SECTION 2. PERFORM APPROPRIATE LINE SMOOTHING.                       MLTGRD1A.5985  
CL----------------------------------------------------------------------   MLTGRD1A.5986  
                                                                           MLTGRD1A.5987  
CL    FORWARD / BACKWARD SWEEP                                             MLTGRD1A.5988  
                                                                           MLTGRD1A.5989  
      DO J_FB= 1,NFB                                                       MLTGRD1A.5990  
                                                                           MLTGRD1A.5991  
        RMS_RES = SWSYM*RMS_RES                                            MLTGRD1A.5992  
        RMS_INC = SWSYM*RMS_INC                                            MLTGRD1A.5993  
                                                                           MLTGRD1A.5994  
CL    SWEEP OVER IK PLANE IN PRESCRIBED POINT ORDER                        MLTGRD1A.5995  
                                                                           MLTGRD1A.5996  
        DO K = K_BEGIN,K_END,K_STEP                                        MLTGRD1A.5997  
                                                                           MLTGRD1A.5998  
          IF (IPAT.EQ.2) THEN                                              MLTGRD1A.5999  
CL    START EACH LINE ON A DIFFERENT COLOUR.                               MLTGRD1A.6000  
            IF(MOD(I_BEGIN+K+I_ZEBRA,IPAT).NE.0 .AND. J_FB.EQ.1) THEN      MLTGRD1A.6001  
              IK_BEGIN = I_BEGIN + 1                                       MLTGRD1A.6002  
            ELSE IF(MOD(I_BEGIN+K+I_ZEBRA,IPAT).NE.0 .AND.                 MLTGRD1A.6003  
     &              J_FB.EQ.2) THEN                                        MLTGRD1A.6004  
              IK_BEGIN = I_BEGIN - 1                                       MLTGRD1A.6005  
            ELSE                                                           MLTGRD1A.6006  
              IK_BEGIN = I_BEGIN                                           MLTGRD1A.6007  
            END IF                                                         MLTGRD1A.6008  
          ELSE                                                             MLTGRD1A.6009  
            IK_BEGIN = I_BEGIN                                             MLTGRD1A.6010  
          END IF                                                           MLTGRD1A.6011  
                                                                           MLTGRD1A.6012  
          DO I = IK_BEGIN,I_END,I_STEP                                     MLTGRD1A.6013  
                                                                           MLTGRD1A.6014  
CL    ASSEMBLE TRIDIAGONAL SYSTEM TO INVERT FOR LINE VALUES                MLTGRD1A.6015  
                                                                           MLTGRD1A.6016  
            CALL MG_J_MATRIX(LHS,A0(1,I),A1(1,I),A2(1,I),Q,A,B,            MLTGRD1A.6017  
     &                       C1,C2,DEF,D,E,F,G,I_DIM,J_DIM,K_DIM,          MLTGRD1A.6018  
     &                       COS_P_LATITUDE,SEC_P_LATITUDE,                MLTGRD1A.6019  
     &                       COS_V_LATITUDE,EARTH_RADIUS_INVERSE,          MLTGRD1A.6020  
     &                       LATITUDE_STEP_INVERSE,                        MLTGRD1A.6021  
     &                       LONGITUDE_STEP_INVERSE,I,K,VERSION,           MLTGRD1A.6022  
     &                       Z_Q,Z_MID,I_NT,K_NT)                          MLTGRD1A.6023  
                                                                           MLTGRD1A.6024  
            DO J2 = 1,SWEEPS                                               MLTGRD1A.6025  
              DO J=J_BEGIN(J2),J_END(J2)                                   MLTGRD1A.6026  
                R(J,I) = LHS(J)-RHS(I,J,K)                                 MLTGRD1A.6027  
                RMS_RES = RMS_RES+R(J,I)*R(J,I)                            MLTGRD1A.6028  
              END DO                                                       MLTGRD1A.6029  
            END DO                                                         MLTGRD1A.6030  
          END DO                                                           MLTGRD1A.6031  
                                                                           MLTGRD1A.6032  
CL    SOLVE TRIDIAGONAL SYSTEM FOR CORRECTIONS X                           MLTGRD1A.6033  
                                                                           MLTGRD1A.6034  
C SOLUTION IS IN R(J)                                                      MLTGRD1A.6035  
C REDUCE MATRIX TO UPPER DIAGONAL FORM.                                    MLTGRD1A.6036  
                                                                           MLTGRD1A.6037  
          DO J2 = 1,SWEEPS                                                 MLTGRD1A.6038  
            DO I=IK_BEGIN,I_END,I_STEP                                     MLTGRD1A.6039  
              A0(J_BEGIN(J2),I) = 1./A0(J_BEGIN(J2),I)                     MLTGRD1A.6040  
            END DO                                                         MLTGRD1A.6041  
            DO J=J_BEGIN(J2)+1,J_END(J2)                                   MLTGRD1A.6042  
              DO I=IK_BEGIN,I_END,I_STEP                                   MLTGRD1A.6043  
                FACTOR = A2(J,I) * A0(J-1,I)                               MLTGRD1A.6044  
                A0(J,I) = 1./(A0(J,I) - FACTOR*A1(J-1,I))                  MLTGRD1A.6045  
                R(J,I) = R(J,I) - FACTOR*R(J-1,I)                          MLTGRD1A.6046  
              END DO                                                       MLTGRD1A.6047  
            END DO                                                         MLTGRD1A.6048  
                                                                           MLTGRD1A.6049  
C BACK SUBSTITUTE TO GET SOLUTION.                                         MLTGRD1A.6050  
                                                                           MLTGRD1A.6051  
            DO I=IK_BEGIN,I_END,I_STEP                                     MLTGRD1A.6052  
              R(J_END(J2),I)  = A0(J_END(J2),I)*R(J_END(J2),I)             MLTGRD1A.6053  
            END DO                                                         MLTGRD1A.6054  
            DO J= J_END(J2)-1,J_BEGIN(J2),-1                               MLTGRD1A.6055  
              DO I=IK_BEGIN,I_END,I_STEP                                   MLTGRD1A.6056  
                  R(J,I) = A0(J,I)*(R(J,I)-A1(J,I)*R(J+1,I))               MLTGRD1A.6057  
              END DO                                                       MLTGRD1A.6058  
            END DO                                                         MLTGRD1A.6059  
                                                                           MLTGRD1A.6060  
CL    STORE CORRECTIONS IN WORKSPACE                                       MLTGRD1A.6061  
CL    AND ADD TO CURRENT SOLUTION UNLESS WT=0 (JACOBI)                     MLTGRD1A.6062  
                                                                           MLTGRD1A.6063  
            DO J=J_BEGIN(J2),J_END(J2)                                     MLTGRD1A.6064  
              DO I=IK_BEGIN,I_END,I_STEP                                   MLTGRD1A.6065  
                Q(I,J,K)=Q(I,J,K)-WEIGHT*R(J,I)                            MLTGRD1A.6066  
                RMS_INC=RMS_INC+R(J,I)*R(J,I)                              MLTGRD1A.6067  
              END DO                                                       MLTGRD1A.6068  
            END DO                                                         MLTGRD1A.6069  
                                                                           MLTGRD1A.6070  
            IF (JAC) THEN                                                  MLTGRD1A.6071  
              DO J=J_BEGIN(J2),J_END(J2)                                   MLTGRD1A.6072  
                DO I=IK_BEGIN,I_END,I_STEP                                 MLTGRD1A.6073  
                  CORRECTIONS(I,J,K)=R(J,I)                                MLTGRD1A.6074  
                END DO                                                     MLTGRD1A.6075  
              END DO                                                       MLTGRD1A.6076  
            END IF                                                         MLTGRD1A.6077  
                                                                           MLTGRD1A.6078  
          END DO                                                           MLTGRD1A.6079  
CL    END OF IK PLANE SWEEP                                                MLTGRD1A.6080  
        END DO                                                             MLTGRD1A.6081  
                                                                           MLTGRD1A.6082  
CL    ADD CORRECTIONS FOR THE JACOBI METHOD                                MLTGRD1A.6083  
                                                                           MLTGRD1A.6084  
        IF(JAC) THEN                                                       MLTGRD1A.6085  
          DO K=K_BEGIN,K_END                                               MLTGRD1A.6086  
            DO J2 = 1,SWEEPS                                               MLTGRD1A.6087  
              DO J=J_BEGIN(J2),J_END(J2)                                   MLTGRD1A.6088  
                DO I=1,I_DIM                                               MLTGRD1A.6089  
                  Q(I,J,K)=Q(I,J,K)-W*CORRECTIONS(I,J,K)                   MLTGRD1A.6090  
                END DO                                                     MLTGRD1A.6091  
              END DO                                                       MLTGRD1A.6092  
            END DO                                                         MLTGRD1A.6093  
          END DO                                                           MLTGRD1A.6094  
        ENDIF                                                              MLTGRD1A.6095  
                                                                           MLTGRD1A.6096  
CL    RESET POINT ORDERING OF JK PLANE FOR SECOND SWEEP                    MLTGRD1A.6097  
                                                                           MLTGRD1A.6098  
        I = I_BEGIN                                                        MLTGRD1A.6099  
        I_BEGIN = I_END                                                    MLTGRD1A.6100  
        I_END = I                                                          MLTGRD1A.6101  
        I_STEP  = -I_STEP                                                  MLTGRD1A.6102  
        K = K_BEGIN                                                        MLTGRD1A.6103  
        K_BEGIN = K_END                                                    MLTGRD1A.6104  
        K_END   =  K                                                       MLTGRD1A.6105  
        K_STEP  = -1                                                       MLTGRD1A.6106  
                                                                           MLTGRD1A.6107  
CL    RESET ZEBRA SWITCH FOR SECOND SWEEP                                  MLTGRD1A.6108  
                                                                           MLTGRD1A.6109  
        I_ZEBRA=1                                                          MLTGRD1A.6110  
                                                                           MLTGRD1A.6111  
      END DO                                                               MLTGRD1A.6112  
                                                                           MLTGRD1A.6113  
CL    END OF ROUTINE MG_J_LINE                                             MLTGRD1A.6114  
                                                                           MLTGRD1A.6115  
      RETURN                                                               MLTGRD1A.6116  
      END                                                                  MLTGRD1A.6117  
CLL   SUBROUTINE MG_J_MATRIX                                               MLTGRD1A.6118  
CLL                                                                        MLTGRD1A.6119  
CLL   PURPOSE:                                                             MLTGRD1A.6120  
CLL   -------                                                              MLTGRD1A.6121  
CLL   CALCULATES CURRENT VALUE OF LEFT-HAND-SIDE OF P.D.E. FOR A GIVEN     MLTGRD1A.6122  
CLL   VALUE OF I AND K. SETS MATRIX ENTRIES TO SOLVE FOR CORRECTION.       MLTGRD1A.6123  
CLL                                                                        MLTGRD1A.6124  
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.6125  
CLL                                                                        MLTGRD1A.6126  
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.6127  
CLL VERSION  DATE                                                          MLTGRD1A.6128  
CLL   3.3             WRITTEN BY M. H. MAWSON.                             MLTGRD1A.6129  
CLL                                                                        MLTGRD1A.6130  
CLL                                                                        MLTGRD1A.6131  
CLLEND -----------------------------------------------------------------   MLTGRD1A.6132  
                                                                           MLTGRD1A.6133  
C*L ARGUMENT LIST.                                                         MLTGRD1A.6134  
                                                                           MLTGRD1A.6135  
      SUBROUTINE MG_J_MATRIX(                                              MLTGRD1A.6136  
     &                       LHS,A0,A1,A2,Q,A,B,C1,C2,DEF,D,E,F,G,         MLTGRD1A.6137  
     &                       I_DIM,J_DIM,K_DIM,                            MLTGRD1A.6138  
     &                       COS_P_LATITUDE,SEC_P_LATITUDE,                MLTGRD1A.6139  
     &                       COS_V_LATITUDE,EARTH_RADIUS_INVERSE,          MLTGRD1A.6140  
     &                       LATITUDE_STEP_INVERSE,                        MLTGRD1A.6141  
     &                       LONGITUDE_STEP_INVERSE,                       MLTGRD1A.6142  
     &                       I,K,VERSION,Z_Q,Z_MID,I_NT,K_NT)              MLTGRD1A.6143  
                                                                           MLTGRD1A.6144  
      IMPLICIT NONE                                                        MLTGRD1A.6145  
                                                                           MLTGRD1A.6146  
      LOGICAL                                                              MLTGRD1A.6147  
     &  I_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN I DIRECTION   MLTGRD1A.6148  
     &, K_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN K DIRECTION   MLTGRD1A.6149  
                                                                           MLTGRD1A.6150  
      INTEGER                                                              MLTGRD1A.6151  
     &  I_DIM         !IN. NUMBER OF NODES IN THE I-DIRECTION              MLTGRD1A.6152  
     &, J_DIM         !IN. NUMBER OF NODES IN THE J-DIRECTION              MLTGRD1A.6153  
     &, K_DIM         !IN. NUMBER OF NODES IN THE K-DIRECTION              MLTGRD1A.6154  
     &, I             !IN. VALUE OF I FOR WHICH LHS AND COEFFS ARE REQ.    MLTGRD1A.6155  
     &, K             !IN. VALUE OF K FOR WHICH LHS AND COEFFS ARE REQ.    MLTGRD1A.6156  
     &, VERSION       !IN. VERSION OF MULTIGRID SCHEME.                    MLTGRD1A.6157  
                                                                           MLTGRD1A.6158  
      REAL                                                                 MLTGRD1A.6159  
     &  Q(I_DIM,J_DIM,K_DIM)    !IN. SOLUTION                              MLTGRD1A.6160  
     &, A(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.6161  
     &, B(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.6162  
     &, C1(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.6163  
     &, C2(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.6164  
     &, DEF(I_DIM,J_DIM,K_DIM)  !IN. COEFFICIENT                           MLTGRD1A.6165  
     &, D(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.6166  
     &, E(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.6167  
     &, F(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.6168  
     &, G(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.6169  
     &, COS_P_LATITUDE(I_DIM,J_DIM) !IN. COSINE OF LATITUDE AT Q POINTS    MLTGRD1A.6170  
     &, COS_V_LATITUDE(I_DIM,J_DIM-1)!IN. COSINE OF LATITUDE AT B POINTS   MLTGRD1A.6171  
     &, SEC_P_LATITUDE(I_DIM,J_DIM)!IN. 1./COSINE OF LATITUDE AT Q POINT   MLTGRD1A.6172  
     &, Z_Q(K_DIM)              !IN. Z AT Q POINTS.                        MLTGRD1A.6173  
     &, Z_MID(0:K_DIM)          !IN. Z MIDWAY BETWEEN Q POINTS.            MLTGRD1A.6174  
                                                                           MLTGRD1A.6175  
      REAL                                                                 MLTGRD1A.6176  
     &  EARTH_RADIUS_INVERSE    !IN. 1/EARTH RADIUS                        MLTGRD1A.6177  
     &, LATITUDE_STEP_INVERSE   !IN. 1/LATITUDE STEP LENGTH IN RADIANS     MLTGRD1A.6178  
     &, LONGITUDE_STEP_INVERSE  !IN. 1/LONGITUDE STEP LENGTH IN RADIANS    MLTGRD1A.6179  
                                                                           MLTGRD1A.6180  
      REAL                                                                 MLTGRD1A.6181  
     &  LHS(J_DIM)       !OUT. LEFT-HAND-SIDE.                             MLTGRD1A.6182  
     &, A0(J_DIM)        !OUT. DIAGONAL MATRIX COEFFICIENT.                MLTGRD1A.6183  
     &, A1(J_DIM)        !OUT. SUPER-DIAGONAL MATRIX COEFFICIENT.          MLTGRD1A.6184  
     &, A2(J_DIM)        !OUT. SUB-DIAGONAL MATRIX COEFFICIENT.            MLTGRD1A.6185  
C*----------------------------------------------------------------------   MLTGRD1A.6186  
                                                                           MLTGRD1A.6187  
C*L NO LOCAL WORK ARRAYS REQUIRED.                                         MLTGRD1A.6188  
C*----------------------------------------------------------------------   MLTGRD1A.6189  
C LOCAL VARIABLES.                                                         MLTGRD1A.6190  
                                                                           MLTGRD1A.6191  
      INTEGER                                                              MLTGRD1A.6192  
     &  J,J2                                                               MLTGRD1A.6193  
     &, J_BEGIN(2) !2ND VALUE USED ONLY IN VERSION 2                       MLTGRD1A.6194  
     &, J_END(2)   !  "        "           "                               MLTGRD1A.6195  
     &, SWEEPS                                                             MLTGRD1A.6196  
                                                                           MLTGRD1A.6197  
      REAL                                                                 MLTGRD1A.6198  
     &  SCALAR                                                             MLTGRD1A.6199  
     &, SCALARS                                                            MLTGRD1A.6200  
     &, SCALAR1                                                            MLTGRD1A.6201  
     &, SCALAR2                                                            MLTGRD1A.6202  
                                                                           MLTGRD1A.6203  
C*L NO EXTERNAL ROUTINES CALLED.                                           MLTGRD1A.6204  
C*----------------------------------------------------------------------   MLTGRD1A.6205  
                                                                           MLTGRD1A.6206  
CL----------------------------------------------------------------------   MLTGRD1A.6207  
CL    SECTION 1. CALCULATE LEFT-HAND-SIDE OF P.D.E.                        MLTGRD1A.6208  
CL               AND MATRIX COEFFICIENTS.                                  MLTGRD1A.6209  
CL----------------------------------------------------------------------   MLTGRD1A.6210  
                                                                           MLTGRD1A.6211  
      SWEEPS = 1                                                           MLTGRD1A.6212  
      IF (VERSION. LT.3) THEN                                              MLTGRD1A.6213  
CL GLOBAL VERSION. POLES NOT INCLUDED.                                     MLTGRD1A.6214  
        J_BEGIN(1) = 2                                                     MLTGRD1A.6215  
        J_END(1) = J_DIM-1                                                 MLTGRD1A.6216  
        IF(VERSION .EQ.2) THEN                                             MLTGRD1A.6217  
          J_END(1) = (J_DIM+1)/2 - 1                                       MLTGRD1A.6218  
          J_BEGIN(2) = (J_DIM+1)/2+1                                       MLTGRD1A.6219  
          J_END(2) = J_DIM-1                                               MLTGRD1A.6220  
          SWEEPS = 2                                                       MLTGRD1A.6221  
        END IF                                                             MLTGRD1A.6222  
      ELSE                                                                 MLTGRD1A.6223  
CL LIMITED AREA VERSION. BOUNDARIES INCLUDED.                              MLTGRD1A.6224  
        J_BEGIN(1) = 1                                                     MLTGRD1A.6225  
        J_END(1) = J_DIM                                                   MLTGRD1A.6226  
      END IF                                                               MLTGRD1A.6227  
                                                                           MLTGRD1A.6228  
C ----------------------------------------------------------------------   MLTGRD1A.6229  
CL    SECTION 1.1 CALCULATE J-DIRECTION DERIVATIVES AND MATRIX COEFFS.     MLTGRD1A.6230  
C ----------------------------------------------------------------------   MLTGRD1A.6231  
                                                                           MLTGRD1A.6232  
      DO J2 =1,SWEEPS                                                      MLTGRD1A.6233  
                                                                           MLTGRD1A.6234  
        A1(J_END(J2)) = 0.                                                 MLTGRD1A.6235  
        A2(J_BEGIN(J2)) = 0.                                               MLTGRD1A.6236  
        SCALAR = EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*                MLTGRD1A.6237  
     &           LATITUDE_STEP_INVERSE*LATITUDE_STEP_INVERSE               MLTGRD1A.6238  
        SCALARS=EARTH_RADIUS_INVERSE*LATITUDE_STEP_INVERSE                 MLTGRD1A.6239  
                                                                           MLTGRD1A.6240  
CL    ALL POINTS EXCEPT ENDS.                                              MLTGRD1A.6241  
                                                                           MLTGRD1A.6242  
        DO J= J_BEGIN(J2)+1,J_END(J2)-1                                    MLTGRD1A.6243  
          SCALAR1 = SCALAR * SEC_P_LATITUDE(I,J)                           MLTGRD1A.6244  
          LHS(J) = ((Q(I,J-1,K)*B(I,J-1,K)                                 MLTGRD1A.6245  
     &               -Q(I,J,K)*B(I,J-1,K))*COS_V_LATITUDE(I,J-1)           MLTGRD1A.6246  
     &               -(Q(I,J,K)*B(I,J,K)                                   MLTGRD1A.6247  
     &               -Q(I,J+1,K)*B(I,J,K))*COS_V_LATITUDE(I,J))            MLTGRD1A.6248  
     &                *SCALAR1 - Q(I,J,K)*G(I,J,K)                         MLTGRD1A.6249  
     &                 +DEF(I,J,K)*.5*SCALARS*                             MLTGRD1A.6250  
     &                 (E(I,J-1,K)*(Q(I,J-1,K)-Q(I,J,K))+                  MLTGRD1A.6251  
     &                  E(I,J,K)*(Q(I,J,K)-Q(I,J+1,K)))                    MLTGRD1A.6252  
          A0(J)  = - (B(I,J-1,K)*COS_V_LATITUDE(I,J-1)                     MLTGRD1A.6253  
     &              +B(I,J,K)*COS_V_LATITUDE(I,J))                         MLTGRD1A.6254  
     &              *SCALAR1 - G(I,J,K)                                    MLTGRD1A.6255  
     &                +DEF(I,J,K)*.5*SCALARS*                              MLTGRD1A.6256  
     &                 (E(I,J,K)-E(I,J-1,K))                               MLTGRD1A.6257  
          A1(J)  = B(I,J,K)*COS_V_LATITUDE(I,J)*SCALAR1                    MLTGRD1A.6258  
     &             -DEF(I,J,K)*.5*SCALARS*E(I,J,K)                         MLTGRD1A.6259  
          A2(J)  =  B(I,J-1,K)*COS_V_LATITUDE(I,J-1)*SCALAR1               MLTGRD1A.6260  
     &             +DEF(I,J,K)*.5*SCALARS*E(I,J-1,K)                       MLTGRD1A.6261  
        END DO                                                             MLTGRD1A.6262  
                                                                           MLTGRD1A.6263  
CL    END POINTS.                                                          MLTGRD1A.6264  
                                                                           MLTGRD1A.6265  
        IF(VERSION.NE.3) THEN                                              MLTGRD1A.6266  
CL GLOBAL                                                                  MLTGRD1A.6267  
          J= J_BEGIN(J2)                                                   MLTGRD1A.6268  
          SCALAR1 = SCALAR * SEC_P_LATITUDE(I,J)                           MLTGRD1A.6269  
          LHS(J) = ((Q(I,J-1,K)*B(I,J-1,K)                                 MLTGRD1A.6270  
     &             -Q(I,J,K)*B(I,J-1,K))*COS_V_LATITUDE(I,J-1)             MLTGRD1A.6271  
     &             -(Q(I,J,K)*B(I,J,K)                                     MLTGRD1A.6272  
     &             -Q(I,J+1,K)*B(I,J,K))*COS_V_LATITUDE(I,J))              MLTGRD1A.6273  
     &             *SCALAR1 - Q(I,J,K)*G(I,J,K)                            MLTGRD1A.6274  
     &                 +DEF(I,J,K)*.5*SCALARS*                             MLTGRD1A.6275  
     &                 (E(I,J-1,K)*(Q(I,J-1,K)-Q(I,J,K))+                  MLTGRD1A.6276  
     &                  E(I,J,K)*(Q(I,J,K)-Q(I,J+1,K)))                    MLTGRD1A.6277  
          A0(J)  = - (B(I,J-1,K)*COS_V_LATITUDE(I,J-1)                     MLTGRD1A.6278  
     &                +B(I,J,K)*COS_V_LATITUDE(I,J))                       MLTGRD1A.6279  
     &                *SCALAR1 - G(I,J,K)                                  MLTGRD1A.6280  
     &                +DEF(I,J,K)*.5*SCALARS*                              MLTGRD1A.6281  
     &                 (E(I,J,K)-E(I,J-1,K))                               MLTGRD1A.6282  
          A1(J)  = B(I,J,K)*COS_V_LATITUDE(I,J) *SCALAR1                   MLTGRD1A.6283  
     &             -DEF(I,J,K)*.5*SCALARS*E(I,J,K)                         MLTGRD1A.6284  
                                                                           MLTGRD1A.6285  
          J= J_END(J2)                                                     MLTGRD1A.6286  
          SCALAR1 = SCALAR * SEC_P_LATITUDE(I,J)                           MLTGRD1A.6287  
          LHS(J) = ((Q(I,J-1,K)*B(I,J-1,K)                                 MLTGRD1A.6288  
     &               -Q(I,J,K)*B(I,J-1,K))*COS_V_LATITUDE(I,J-1)           MLTGRD1A.6289  
     &               -(Q(I,J,K)*B(I,J,K)                                   MLTGRD1A.6290  
     &               -Q(I,J+1,K)*B(I,J,K))*COS_V_LATITUDE(I,J))            MLTGRD1A.6291  
     &              *SCALAR1 - Q(I,J,K)*G(I,J,K)                           MLTGRD1A.6292  
     &                 +DEF(I,J,K)*.5*SCALARS*                             MLTGRD1A.6293  
     &                 (E(I,J-1,K)*(Q(I,J-1,K)-Q(I,J,K))+                  MLTGRD1A.6294  
     &                  E(I,J,K)*(Q(I,J,K)-Q(I,J+1,K)))                    MLTGRD1A.6295  
          A0(J)  = - (B(I,J-1,K)*COS_V_LATITUDE(I,J-1)                     MLTGRD1A.6296  
     &                +B(I,J,K)*COS_V_LATITUDE(I,J))                       MLTGRD1A.6297  
     &                *SCALAR1 - G(I,J,K)                                  MLTGRD1A.6298  
     &                +DEF(I,J,K)*.5*SCALARS*                              MLTGRD1A.6299  
     &                 (E(I,J,K)-E(I,J-1,K))                               MLTGRD1A.6300  
          A2(J)  =  B(I,J-1,K)*COS_V_LATITUDE(I,J-1) *SCALAR1              MLTGRD1A.6301  
     &             +DEF(I,J,K)*.5*SCALARS*E(I,J-1,K)                       MLTGRD1A.6302  
                                                                           MLTGRD1A.6303  
        ELSE IF(VERSION.EQ.3) THEN                                         MLTGRD1A.6304  
CL LIMITED AREA                                                            MLTGRD1A.6305  
          J= J_BEGIN(J2)                                                   MLTGRD1A.6306  
          SCALAR1 = SCALAR * SEC_P_LATITUDE(I,J)                           MLTGRD1A.6307  
          LHS(J) = -2.*(Q(I,J,K)*B(I,J,K)                                  MLTGRD1A.6308  
     &                -Q(I,J+1,K)*B(I,J,K))*COS_V_LATITUDE(I,J)            MLTGRD1A.6309  
     &             *SCALAR1 - Q(I,J,K)*G(I,J,K)                            MLTGRD1A.6310  
          A0(J)  = -2.*B(I,J,K)*COS_V_LATITUDE(I,J)                        MLTGRD1A.6311  
     &                *SCALAR1 - G(I,J,K)                                  MLTGRD1A.6312  
          A1(J)  = 2.*B(I,J,K)*COS_V_LATITUDE(I,J) *SCALAR1                MLTGRD1A.6313  
                                                                           MLTGRD1A.6314  
          J= J_END(J2)                                                     MLTGRD1A.6315  
          SCALAR1 = SCALAR * SEC_P_LATITUDE(I,J)                           MLTGRD1A.6316  
          LHS(J) = 2.*(Q(I,J-1,K)*B(I,J-1,K)                               MLTGRD1A.6317  
     &               -Q(I,J,K)*B(I,J-1,K))*COS_V_LATITUDE(I,J-1)           MLTGRD1A.6318  
     &              *SCALAR1 - Q(I,J,K)*G(I,J,K)                           MLTGRD1A.6319  
          A0(J)  = - 2.*B(I,J-1,K)*COS_V_LATITUDE(I,J-1)                   MLTGRD1A.6320  
     &                *SCALAR1 - G(I,J,K)                                  MLTGRD1A.6321  
          A2(J)  =  2.*B(I,J-1,K)*COS_V_LATITUDE(I,J-1) *SCALAR1           MLTGRD1A.6322  
                                                                           MLTGRD1A.6323  
        END IF                                                             MLTGRD1A.6324  
                                                                           MLTGRD1A.6325  
C ----------------------------------------------------------------------   MLTGRD1A.6326  
CL    SECTION 1.2 CALCULATE I-DIRECTION DERIVATIVES                        MLTGRD1A.6327  
CL                AND ADD ON TO J-DIRECTION TERMS.                         MLTGRD1A.6328  
C ----------------------------------------------------------------------   MLTGRD1A.6329  
                                                                           MLTGRD1A.6330  
        IF(I_NT) THEN                                                      MLTGRD1A.6331  
                                                                           MLTGRD1A.6332  
          SCALAR = EARTH_RADIUS_INVERSE*EARTH_RADIUS_INVERSE*              MLTGRD1A.6333  
     &             LONGITUDE_STEP_INVERSE*LONGITUDE_STEP_INVERSE           MLTGRD1A.6334  
          SCALARS = EARTH_RADIUS_INVERSE*LONGITUDE_STEP_INVERSE            MLTGRD1A.6335  
                                                                           MLTGRD1A.6336  
          IF(I.EQ.1) THEN                                                  MLTGRD1A.6337  
                                                                           MLTGRD1A.6338  
CL    FIRST POINT ON A ROW.                                                MLTGRD1A.6339  
                                                                           MLTGRD1A.6340  
            IF(VERSION.LT.3) THEN                                          MLTGRD1A.6341  
CL GLOBAL                                                                  MLTGRD1A.6342  
              DO J=J_BEGIN(J2),J_END(J2)                                   MLTGRD1A.6343  
                SCALAR1= SCALAR*SEC_P_LATITUDE(1,J)*SEC_P_LATITUDE(1,J)    MLTGRD1A.6344  
                A0(J) = A0(J) -(A(1,J,K)+ A(I_DIM,J,K))*SCALAR1            MLTGRD1A.6345  
     &                 +.5*DEF(1,J,K)*SCALARS*SEC_P_LATITUDE(1,J)*         MLTGRD1A.6346  
     &                 (D(I_DIM,J,K)-D(1,J,K))                             MLTGRD1A.6347  
                LHS(J) =  LHS(J) +(Q(I_DIM,J,K)*A(I_DIM,J,K)- Q(1,J,K) *   MLTGRD1A.6348  
     &                   (A(I_DIM,J,K) + A(1,J,K)) + Q(2,J,K)*A(1,J,K))    MLTGRD1A.6349  
     &                    *SCALAR1                                         MLTGRD1A.6350  
     &                   + .5*DEF(1,J,K)*SCALARS*SEC_P_LATITUDE(1,J)*      MLTGRD1A.6351  
     &                   (D(1,J,K)*(Q(2,J,K)-Q(1,J,K))+D(I_DIM,J,K)*       MLTGRD1A.6352  
     &                   (Q(1,J,K)-Q(I_DIM,J,K)))                          MLTGRD1A.6353  
              END DO                                                       MLTGRD1A.6354  
            ELSE                                                           MLTGRD1A.6355  
CL LIMITED AREA                                                            MLTGRD1A.6356  
              DO J=J_BEGIN(J2),J_END(J2)                                   MLTGRD1A.6357  
                SCALAR1= SCALAR*SEC_P_LATITUDE(1,J)*SEC_P_LATITUDE(1,J)    MLTGRD1A.6358  
                A0(J) = A0(J) - 2.*A(1,J,K)*SCALAR1                        MLTGRD1A.6359  
                LHS(J)    =  LHS(J) - 2.*(Q(1,J,K) * A(1,J,K)              MLTGRD1A.6360  
     &                                 - Q(2,J,K)*A(1,J,K))*SCALAR1        MLTGRD1A.6361  
              END DO                                                       MLTGRD1A.6362  
            END IF                                                         MLTGRD1A.6363  
                                                                           MLTGRD1A.6364  
          ELSE IF(I.EQ.I_DIM) THEN                                         MLTGRD1A.6365  
                                                                           MLTGRD1A.6366  
CL    LAST POINT ON A ROW.                                                 MLTGRD1A.6367  
                                                                           MLTGRD1A.6368  
            IF(VERSION.LT.3) THEN                                          MLTGRD1A.6369  
CL GLOBAL                                                                  MLTGRD1A.6370  
              DO J=J_BEGIN(J2),J_END(J2)                                   MLTGRD1A.6371  
                SCALAR1 = SCALAR * SEC_P_LATITUDE(I_DIM,J)                 MLTGRD1A.6372  
     &                           * SEC_P_LATITUDE(I_DIM,J)                 MLTGRD1A.6373  
                A0(J) = A0(J) - (A(I_DIM,J,K)+                             MLTGRD1A.6374  
     &                          A(I_DIM-1,J,K))*SCALAR1                    MLTGRD1A.6375  
     &              +.5*DEF(I_DIM,J,K)*SCALARS*SEC_P_LATITUDE(I_DIM,J)*    MLTGRD1A.6376  
     &                 (D(1,J,K)-D(I_DIM,J,K))                             MLTGRD1A.6377  
                LHS(J) = LHS(J) +                                          MLTGRD1A.6378  
     &                    (Q(I_DIM-1,J,K)*A(I_DIM-1,J,K) - Q(I_DIM,J,K)    MLTGRD1A.6379  
     &                    *(A(I_DIM-1,J,K) + A(I_DIM,J,K)) + Q(1,J,K)      MLTGRD1A.6380  
     &                    *A(I_DIM,J,K))*SCALAR1                           MLTGRD1A.6381  
     &                   + .5*DEF(I,J,K)*SCALARS*SEC_P_LATITUDE(I,J)*      MLTGRD1A.6382  
     &            (D(I_DIM,J,K)*(Q(1,J,K)-Q(I_DIM,J,K))+D(I_DIM-1,J,K)*    MLTGRD1A.6383  
     &             (Q(I_DIM,J,K)-Q(I_DIM-1,J,K)))                          MLTGRD1A.6384  
              END DO                                                       MLTGRD1A.6385  
            ELSE                                                           MLTGRD1A.6386  
CL LIMITED AREA                                                            MLTGRD1A.6387  
              DO J=J_BEGIN(J2),J_END(J2)                                   MLTGRD1A.6388  
                SCALAR1 = SCALAR * SEC_P_LATITUDE(I_DIM,J)                 MLTGRD1A.6389  
     &                           * SEC_P_LATITUDE(I_DIM,J)                 MLTGRD1A.6390  
                A0(J) = A0(J) -  2.*A(I_DIM-1,J,K)*SCALAR1                 MLTGRD1A.6391  
                LHS(J) = LHS(J) + 2.*                                      MLTGRD1A.6392  
     &                    (Q(I_DIM-1,J,K)*A(I_DIM-1,J,K) - Q(I_DIM,J,K)    MLTGRD1A.6393  
     &                    *A(I_DIM-1,J,K))*SCALAR1                         MLTGRD1A.6394  
              END DO                                                       MLTGRD1A.6395  
            END IF                                                         MLTGRD1A.6396  
                                                                           MLTGRD1A.6397  
          ELSE                                                             MLTGRD1A.6398  
CL ALL OTHER POINTS.                                                       MLTGRD1A.6399  
                                                                           MLTGRD1A.6400  
            DO J=J_BEGIN(J2),J_END(J2)                                     MLTGRD1A.6401  
              SCALAR1 = SCALAR * SEC_P_LATITUDE(I,J)                       MLTGRD1A.6402  
     &                         * SEC_P_LATITUDE(I,J)                       MLTGRD1A.6403  
              A0(J) = A0(J) - ( A(I,J,K) + A(I-1,J,K))*SCALAR1             MLTGRD1A.6404  
     &                 +.5*DEF(I,J,K)*SCALARS*SEC_P_LATITUDE(I,J)*         MLTGRD1A.6405  
     &                 (D(I-1,J,K)-D(I,J,K))                               MLTGRD1A.6406  
              LHS(J)    = LHS(J) + (Q(I-1,J,K)*A(I-1,J,K) - Q(I,J,K) *     MLTGRD1A.6407  
     &               (A(I-1,J,K) + A(I,J,K)) + Q(I+1,J,K)*A(I,J,K))        MLTGRD1A.6408  
     &                *SCALAR1                                             MLTGRD1A.6409  
     &                + .5*DEF(I,J,K)*SCALARS*SEC_P_LATITUDE(I,J)*         MLTGRD1A.6410  
     &               (D(I,J,K)*(Q(I+1,J,K)-Q(I,J,K))+D(I-1,J,K)*           MLTGRD1A.6411  
     &               (Q(I,J,K)-Q(I-1,J,K)))                                MLTGRD1A.6412  
            END DO                                                         MLTGRD1A.6413  
                                                                           MLTGRD1A.6414  
          END IF                                                           MLTGRD1A.6415  
                                                                           MLTGRD1A.6416  
        END IF                                                             MLTGRD1A.6417  
                                                                           MLTGRD1A.6418  
C ----------------------------------------------------------------------   MLTGRD1A.6419  
CL    SECTION 1.3 CALCULATE K-DIRECTION DERIVATIVES AND ADD ON.            MLTGRD1A.6420  
C ----------------------------------------------------------------------   MLTGRD1A.6421  
                                                                           MLTGRD1A.6422  
        IF (K_NT) THEN                                                     MLTGRD1A.6423  
          IF(K.EQ.1) THEN                                                  MLTGRD1A.6424  
            SCALAR = 1./(Z_MID(K) - Z_MID(K-1))                            MLTGRD1A.6425  
            SCALAR1 = 1./(Z_Q(K+1) - Z_Q(K))                               MLTGRD1A.6426  
            DO J=J_BEGIN(J2),J_END(J2)                                     MLTGRD1A.6427  
              LHS(J) = LHS(J) + SCALAR*(Q(I,J,K+1)*C2(I,J,K+1)             MLTGRD1A.6428  
     &                     -Q(I,J,K)*C2(I,J,K))*C1(I,J,K)*SCALAR1          MLTGRD1A.6429  
              A0(J) = A0(J) - SCALAR*C1(I,J,K)*SCALAR1*C2(I,J,K)           MLTGRD1A.6430  
              IF(Z_Q(1).NE.Z_MID(1)) THEN                                  MLTGRD1A.6431  
C INCLUDE FIRST DERIVATIVE TERM WHEN NON-ZERO                              MLTGRD1A.6432  
                LHS(J) = LHS(J)  + .5*SCALAR1*DEF(I,J,K)*F(I,J,K)*         MLTGRD1A.6433  
     &                               (Q(I,J,K+1)*C2(I,J,K+1)               MLTGRD1A.6434  
     &                                -Q(I,J,K)*C2(I,J,K))                 MLTGRD1A.6435  
                A0(J) = A0(J) - .5*SCALAR1*DEF(I,J,K)*F(I,J,K)             MLTGRD1A.6436  
     &                          *C2(I,J,K)                                 MLTGRD1A.6437  
              END IF                                                       MLTGRD1A.6438  
            END DO                                                         MLTGRD1A.6439  
          ELSE IF (K.EQ.K_DIM) THEN                                        MLTGRD1A.6440  
            SCALAR = 1./(Z_MID(K) - Z_MID(K-1))                            MLTGRD1A.6441  
            SCALAR2 = 1./(Z_Q(K) - Z_Q(K-1))                               MLTGRD1A.6442  
            DO J=J_BEGIN(J2),J_END(J2)                                     MLTGRD1A.6443  
              LHS(J) = LHS(J) - SCALAR*(Q(I,J,K)*C2(I,J,K)                 MLTGRD1A.6444  
     &                   -Q(I,J,K-1)*C2(I,J,K-1))*C1(I,J,K-1)*SCALAR2      MLTGRD1A.6445  
              A0(J) = A0(J) - SCALAR*C1(I,J,K-1)*SCALAR2*C2(I,J,K)         MLTGRD1A.6446  
              IF(Z_Q(K_DIM).NE.Z_MID(K_DIM+1)) THEN                        MLTGRD1A.6447  
C INCLUDE FIRST DERIVATIVE TERM WHEN NON-ZERO                              MLTGRD1A.6448  
                LHS(J) = LHS(J)  + .5*SCALAR2*DEF(I,J,K)*F(I,J,K-1)*       MLTGRD1A.6449  
     &                               (Q(I,J,K)*C2(I,J,K)                   MLTGRD1A.6450  
     &                                -Q(I,J,K-1)*C2(I,J,K-1))             MLTGRD1A.6451  
                A0(J) = A0(J) + .5*SCALAR2*DEF(I,J,K)*F(I,J,K-1)           MLTGRD1A.6452  
     &                          *C2(I,J,K)                                 MLTGRD1A.6453  
              END IF                                                       MLTGRD1A.6454  
            END DO                                                         MLTGRD1A.6455  
          ELSE                                                             MLTGRD1A.6456  
            SCALAR = 1./(Z_MID(K) - Z_MID(K-1))                            MLTGRD1A.6457  
            SCALAR1 = 1./(Z_Q(K+1) - Z_Q(K))                               MLTGRD1A.6458  
            SCALAR2 = 1./(Z_Q(K) - Z_Q(K-1))                               MLTGRD1A.6459  
            DO J=J_BEGIN(J2),J_END(J2)                                     MLTGRD1A.6460  
              LHS(J) = LHS(J) + SCALAR*                                    MLTGRD1A.6461  
     &               ((Q(I,J,K+1)*C2(I,J,K+1)-Q(I,J,K)*C2(I,J,K))          MLTGRD1A.6462  
     &                *C1(I,J,K)*SCALAR1                                   MLTGRD1A.6463  
     &               -(Q(I,J,K)*C2(I,J,K)-Q(I,J,K-1)*C2(I,J,K-1))          MLTGRD1A.6464  
     &                *C1(I,J,K-1)*SCALAR2)                                MLTGRD1A.6465  
     &               +.5*DEF(I,J,K)*                                       MLTGRD1A.6466  
     &               ((Q(I,J,K+1)*C2(I,J,K+1)-Q(I,J,K)*C2(I,J,K))          MLTGRD1A.6467  
     &                *F(I,J,K)*SCALAR1                                    MLTGRD1A.6468  
     &               +(Q(I,J,K)*C2(I,J,K)-Q(I,J,K-1)*C2(I,J,K-1))          MLTGRD1A.6469  
     &                *F(I,J,K-1)*SCALAR2)                                 MLTGRD1A.6470  
              A0(J) = A0(J) - SCALAR*(C1(I,J,K)*SCALAR1                    MLTGRD1A.6471  
     &                              +C1(I,J,K-1)*SCALAR2)*C2(I,J,K)        MLTGRD1A.6472  
     &               +.5*DEF(I,J,K)*(F(I,J,K-1)*SCALAR2                    MLTGRD1A.6473  
     &                               -F(I,J,K)*SCALAR1)*C2(I,J,K)          MLTGRD1A.6474  
            END DO                                                         MLTGRD1A.6475  
          END IF                                                           MLTGRD1A.6476  
                                                                           MLTGRD1A.6477  
        END IF                                                             MLTGRD1A.6478  
                                                                           MLTGRD1A.6479  
CL END LOOP OVER SWEEPS                                                    MLTGRD1A.6480  
      END DO                                                               MLTGRD1A.6481  
                                                                           MLTGRD1A.6482  
CL    END OF ROUTINE MG_J_MATRIX                                           MLTGRD1A.6483  
                                                                           MLTGRD1A.6484  
      RETURN                                                               MLTGRD1A.6485  
      END                                                                  MLTGRD1A.6486  
CLL   SUBROUTINE MG_JOB_INFO                                               MLTGRD1A.6487  
CLL                                                                        MLTGRD1A.6488  
CLL   PURPOSE:                                                             MLTGRD1A.6489  
CLL   -------                                                              MLTGRD1A.6490  
CLL   PROVIDES INFORMATION ON CHOICES OF SCHEME MADE.                      MLTGRD1A.6491  
CLL                                                                        MLTGRD1A.6492  
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.6493  
CLL                                                                        MLTGRD1A.6494  
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.6495  
CLL VERSION  DATE                                                          MLTGRD1A.6496  
CLL   3.3                                                                  MLTGRD1A.6497  
CLL                                                                        MLTGRD1A.6498  
CLL                                                                        MLTGRD1A.6499  
CLLEND -----------------------------------------------------------------   MLTGRD1A.6500  
                                                                           MLTGRD1A.6501  
C*L ARGUMENT LIST.                                                         MLTGRD1A.6502  
                                                                           MLTGRD1A.6503  
      SUBROUTINE MG_JOB_INFO(MAXITS,TOL_RES,KSMOOTH,                       MLTGRD1A.6504  
     1                       NPRE,NPOST,NCOARSE,W,KREST,NCGC,NGRIDS,       MLTGRD1A.6505  
     2                       IMAX,JMAX,KMAX,START_ADDRESS,RES_DIRS,        MLTGRD1A.6506  
     3                       WORST_SMOOTHING_RATE,VERSION,K_BC)            MLTGRD1A.6507  
                                                                           MLTGRD1A.6508  
      IMPLICIT NONE                                                        MLTGRD1A.6509  
                                                                           MLTGRD1A.6510  
      INTEGER                                                              MLTGRD1A.6511  
     &  VERSION    !IN. VERSION OF SCHEME BEING USED.                      MLTGRD1A.6512  
     &, K_BC       !IN. BOUNDARY CONDITIONS TO USE IN K DIRECTION.         MLTGRD1A.6513  
                                                                           MLTGRD1A.6514  
      INTEGER                                                              MLTGRD1A.6515  
     &  NGRIDS     !IN. NUMBER OF GRIDS.                                   MLTGRD1A.6516  
     &, MAXITS     !IN. MAX NO OF FAS ITERATIONS WITHOUT CONVERGENCE       MLTGRD1A.6517  
     &, KSMOOTH    !IN. KIND OF ITERATIVE METHOD USED AS A SMOOTHER.       MLTGRD1A.6518  
     &, NPRE       !IN. NO OF PRE-SMOOTHING SWEEPS                         MLTGRD1A.6519  
     &, NPOST      !IN. NO OF POST-SMOOTHING SWEEPS                        MLTGRD1A.6520  
     &, NCOARSE    !IN. NO OF ITERATIONS OF SMOOTHER ON COARSEST MESH      MLTGRD1A.6521  
     &, KREST      !IN. KIND OF RESTRICTION USED.                          MLTGRD1A.6522  
     &, NCGC       !IN. NO OF COARSE GRID CORRECTIONS.                     MLTGRD1A.6523  
                                                                           MLTGRD1A.6524  
      INTEGER                                                              MLTGRD1A.6525  
     &  IMAX(NGRIDS) !IN. NUMBER OF NODES IN THE I-DIRECTION               MLTGRD1A.6526  
     &               !    ON EACH GRID.                                    MLTGRD1A.6527  
     &, JMAX(NGRIDS) !IN. NUMBER OF NODES IN THE J-DIRECTION               MLTGRD1A.6528  
     &               !    ON EACH GRID.                                    MLTGRD1A.6529  
     &, KMAX(NGRIDS) !IN. NUMBER OF NODES IN THE K-DIRECTION               MLTGRD1A.6530  
     &               !    ON EACH GRID.                                    MLTGRD1A.6531  
     &, START_ADDRESS(NGRIDS) !IN. START ADDRESS IN DATA ARRAY FOR         MLTGRD1A.6532  
     &                        !    EACH GRID.                              MLTGRD1A.6533  
     &, RES_DIRS(NGRIDS)      !IN. RESTRICTED DIRECTIONS.                  MLTGRD1A.6534  
                                                                           MLTGRD1A.6535  
      REAL                                                                 MLTGRD1A.6536  
     &  W          !IN. RELAXATION PARAMETER FOR EACH VARIABLE IN SYSTEM   MLTGRD1A.6537  
     &, WORST_SMOOTHING_RATE !IN WORST PRACTICAL SMOOTHING RATE ALLOWED    MLTGRD1A.6538  
     &, TOL_RES    !IN. TOLERANCE FOR RESIDUAL NORM                        MLTGRD1A.6539  
C*----------------------------------------------------------------------   MLTGRD1A.6540  
                                                                           MLTGRD1A.6541  
C*L  2 LOCAL WORK ARRAYS REQUIRED.                                         MLTGRD1A.6542  
                                                                           MLTGRD1A.6543  
      CHARACTER*12 SMOOTHER(26)                                            MLTGRD1A.6544  
      CHARACTER*14 RESTN(3)                                                MLTGRD1A.6545  
                                                                           MLTGRD1A.6546  
C*----------------------------------------------------------------------   MLTGRD1A.6547  
C LOCAL VARIABLES.                                                         MLTGRD1A.6548  
                                                                           MLTGRD1A.6549  
      INTEGER                                                              MLTGRD1A.6550  
     &  I                                                                  MLTGRD1A.6551  
                                                                           MLTGRD1A.6552  
CL----------------------------------------------------------------------   MLTGRD1A.6553  
CL    SECTION 1. SET DATA VALUES.                                          MLTGRD1A.6554  
CL----------------------------------------------------------------------   MLTGRD1A.6555  
                                                                           MLTGRD1A.6556  
      DATA SMOOTHER /'    I-JACOBI','    J-JACOBI','    K-JACOBI',         MLTGRD1A.6557  
     &               '  I&J-JACOBI','  I&K-JACOBI','  J&K-JACOBI',         MLTGRD1A.6558  
     &               '    A-JACOBI','    I-L.G.S.','    J-L.G.S.',         MLTGRD1A.6559  
     &               '    K-L.G.S.','  I&J-L.G.S.','  I&K-L.G.S.',         MLTGRD1A.6560  
     &               '  J&K-L.G.S.','    A-L.G.S.','  A.S.L.G.S.',         MLTGRD1A.6561  
     &               '     I-ZEBRA','     J-ZEBRA','     K-ZEBRA',         MLTGRD1A.6562  
     &               '   I&J-ZEBRA','   I&K-ZEBRA','   J&K-ZEBRA',         MLTGRD1A.6563  
     &               '     A-ZEBRA','   JACOBI-PT','     G.S.-PT',         MLTGRD1A.6564  
     &               ' SYM G.S.-PT','  RED/BLK-PT'/                        MLTGRD1A.6565  
                                                                           MLTGRD1A.6566  
      DATA RESTN /'Injection','Half-Injection','Full-Weighting'/           MLTGRD1A.6567  
                                                                           MLTGRD1A.6568  
CL----------------------------------------------------------------------   MLTGRD1A.6569  
CL    SECTION 2. OUTPUT INFORMATION ON CHOICES.                            MLTGRD1A.6570  
CL----------------------------------------------------------------------   MLTGRD1A.6571  
                                                                           MLTGRD1A.6572  
CL    VERSION INFORMATION.                                                 MLTGRD1A.6573  
                                                                           MLTGRD1A.6574  
      IF (VERSION.EQ.1) THEN                                               MLTGRD1A.6575  
        WRITE(6,9000)                                                      MLTGRD1A.6576  
      ELSE IF (VERSION.EQ.2) THEN                                          MLTGRD1A.6577  
        WRITE(6,8998)                                                      MLTGRD1A.6578  
        WRITE(6,8999)                                                      MLTGRD1A.6579  
      ELSE IF (VERSION.EQ.3) THEN                                          MLTGRD1A.6580  
        WRITE(6,8997)                                                      MLTGRD1A.6581  
        WRITE(6,8996)                                                      MLTGRD1A.6582  
      ELSE IF (VERSION.EQ.4) THEN                                          MLTGRD1A.6583  
        WRITE(6,8997)                                                      MLTGRD1A.6584  
        WRITE(6,8995)                                                      MLTGRD1A.6585  
      END IF                                                               MLTGRD1A.6586  
                                                                           MLTGRD1A.6587  
      IF (K_BC .EQ. 1) THEN                                                MLTGRD1A.6588  
        WRITE(6,8980)                                                      MLTGRD1A.6589  
      ELSE IF (K_BC .EQ. 2) THEN                                           MLTGRD1A.6590  
        WRITE(6,8981)                                                      MLTGRD1A.6591  
      ELSE IF (K_BC .EQ. 3) THEN                                           MLTGRD1A.6592  
        WRITE(6,8982)                                                      MLTGRD1A.6593  
      ELSE IF (K_BC .EQ. 4) THEN                                           MLTGRD1A.6594  
        WRITE(6,8983)                                                      MLTGRD1A.6595  
      END IF                                                               MLTGRD1A.6596  
CL    NAME OF CHOSEN SMOOTHING METHOD                                      MLTGRD1A.6597  
                                                                           MLTGRD1A.6598  
      WRITE(6,9001) SMOOTHER(KSMOOTH)                                      MLTGRD1A.6599  
      WRITE(6,9002)                                                        MLTGRD1A.6600  
                                                                           MLTGRD1A.6601  
CL    OUTPUT DETAILS OF THE SEQUENCE OF GRIDS TO BE USED                   MLTGRD1A.6602  
                                                                           MLTGRD1A.6603  
      DO I=1,NGRIDS                                                        MLTGRD1A.6604  
        WRITE(6,9003) I,IMAX(I),JMAX(I),KMAX(I),START_ADDRESS(I),          MLTGRD1A.6605  
     &                RES_DIRS(I)                                          MLTGRD1A.6606  
      END DO                                                               MLTGRD1A.6607  
                                                                           MLTGRD1A.6608  
C     PARAMETERS OF THE MULTIGRID ALGORITHM                                MLTGRD1A.6609  
                                                                           MLTGRD1A.6610  
      WRITE(6,9004) MAXITS,NPRE,NPOST,NCOARSE,NCGC,RESTN(KREST)            MLTGRD1A.6611  
                                                                           MLTGRD1A.6612  
CL    RELAXATION PARAMETERS FOR EACH VARIABLE                              MLTGRD1A.6613  
                                                                           MLTGRD1A.6614  
      WRITE(6,9006)                                                        MLTGRD1A.6615  
      WRITE(6,9007) W                                                      MLTGRD1A.6616  
                                                                           MLTGRD1A.6617  
CL    TOLERANCES TO BE ACHIEVED                                            MLTGRD1A.6618  
                                                                           MLTGRD1A.6619  
      WRITE(6,9008) TOL_RES                                                MLTGRD1A.6620  
      WRITE(6,9009) WORST_SMOOTHING_RATE                                   MLTGRD1A.6621  
                                                                           MLTGRD1A.6622  
 8980 FORMAT(1X,/,' Using Neumann vertical boundary conditions.')          MLTGRD1A.6623  
 8981 FORMAT(1X,/,' Using Neumann bottom and Dirichlet top'                MLTGRD1A.6624  
     &           ,' boundary conditions.')                                 MLTGRD1A.6625  
 8982 FORMAT(1X,/,' Using Dirichlet bottom and Neumann top'                MLTGRD1A.6626  
     &           ,' boundary conditions.')                                 MLTGRD1A.6627  
 8983 FORMAT(1X,/,' Using Dirichlet vertical boundary conditions.')        MLTGRD1A.6628  
 8995 FORMAT(1X,/,' Using Dirichlet lateral boundary conditions.')         MLTGRD1A.6629  
 8996 FORMAT(1X,/,' Using Neumann lateral boundary conditions.')           MLTGRD1A.6630  
 8997 FORMAT(1X,/,' Limited Area version of Multi-Grid requested.')        MLTGRD1A.6631  
 8998 FORMAT(1X,/,' Global version of Multi-Grid requested with given'     MLTGRD1A.6632  
     &           ,' equatorial solution.')                                 MLTGRD1A.6633  
 8999 FORMAT(1X,/,' NB: Equatorial solution MUST have been in solution '   MLTGRD1A.6634  
     &            ,'array when call to MGCNTL was made.')                  MLTGRD1A.6635  
 9000 FORMAT(1X,/,' Global version of Multi-Grid requested.')              MLTGRD1A.6636  
 9001 FORMAT(1X,/,' Chosen smoother is ',A12,/,32('~'))                    MLTGRD1A.6637  
 9002 FORMAT(1X,/,' Grid Structure',/,15('-'),//,                          MLTGRD1A.6638  
     &       '  GRID INDEX   IMAX    JMAX    KMAX     IST     ',           MLTGRD1A.6639  
     &       'RES DIRS',/,31('-'))                                         MLTGRD1A.6640  
 9003 FORMAT(7X,I2,2X,5I8)                                                 MLTGRD1A.6641  
 9004 FORMAT(1X,/,' MG Strategy',/,12('-'),/,                              MLTGRD1A.6642  
     &            ' No Of FAS Iterations =',I6,/,                          MLTGRD1A.6643  
     &            ' No Of Pre-Smoothing Iterations =',I2,/,                MLTGRD1A.6644  
     &            ' No Of Post-Smoothing Iterations =',I2,/,               MLTGRD1A.6645  
     &            ' No Of Coarsest Grid Iterations =',I2,/,                MLTGRD1A.6646  
     &            ' No Of Coarse Grid Corrections =',I2,//,                MLTGRD1A.6647  
     &            ' Restriction Is By ',A14)                               MLTGRD1A.6648  
 9006 FORMAT(1X,/,' RELAXATION PARAMETER',/,37('-'))                       MLTGRD1A.6649  
 9007 FORMAT(5X,F4.2)                                                      MLTGRD1A.6650  
 9008 FORMAT(1X,/,' Tolerances : Residual Norm   =',E12.6,' times ',       MLTGRD1A.6651  
     &            'initial Residual.')                                     MLTGRD1A.6652  
 9009 FORMAT(1x,/,' Worst Practical smoothing rate allowed = ',F10.6)      MLTGRD1A.6653  
                                                                           MLTGRD1A.6654  
      RETURN                                                               MLTGRD1A.6655  
      END                                                                  MLTGRD1A.6656  
CLL   SUBROUTINE MG_K_LINE                                                 MLTGRD1A.6657  
CLL                                                                        MLTGRD1A.6658  
CLL   PURPOSE:                                                             MLTGRD1A.6659  
CLL   -------                                                              MLTGRD1A.6660  
CLL   PERFORMS LINE SMOOTHING IN K DIRECTION.                              MLTGRD1A.6661  
CLL                                                                        MLTGRD1A.6662  
CLL   VERSION NUMBER 2.                                                    MLTGRD1A.6663  
CLL                                                                        MLTGRD1A.6664  
CLL  MODEL            MODIFICATION HISTORY:                                MLTGRD1A.6665  
CLL VERSION  DATE                                                          MLTGRD1A.6666  
CLL   3.3                                                                  MLTGRD1A.6667  
CLL                                                                        MLTGRD1A.6668  
CLL                                                                        MLTGRD1A.6669  
CLLEND -----------------------------------------------------------------   MLTGRD1A.6670  
                                                                           MLTGRD1A.6671  
C*L ARGUMENT LIST.                                                         MLTGRD1A.6672  
                                                                           MLTGRD1A.6673  
      SUBROUTINE MG_K_LINE                                                 MLTGRD1A.6674  
     &                    (Q,RHS,A,B,C1,C2,DEF,D,E,F,G,COS_P_LATITUDE,     MLTGRD1A.6675  
     &                     SEC_P_LATITUDE,                                 MLTGRD1A.6676  
     &                     COS_V_LATITUDE,LATITUDE_STEP_INVERSE,           MLTGRD1A.6677  
     &                     LONGITUDE_STEP_INVERSE,EARTH_RADIUS_INVERSE,    MLTGRD1A.6678  
     &                     I_DIM,J_DIM,K_DIM,W,RMS_RES,RMS_INC,            MLTGRD1A.6679  
     &                     SWJAC,SWSYM,JAC,PAT,SYM,NFB,IPAT,               MLTGRD1A.6680  
     &                     VERSION,K_BC,Z_Q,Z_MID,I_NT,J_NT)               MLTGRD1A.6681  
                                                                           MLTGRD1A.6682  
      IMPLICIT NONE                                                        MLTGRD1A.6683  
                                                                           MLTGRD1A.6684  
      LOGICAL                                                              MLTGRD1A.6685  
     &  I_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN I DIRECTION   MLTGRD1A.6686  
     &, J_NT    !IN. TRUE IF NON-TRIVIAL NUMBER OF POINTS IN J DIRECTION   MLTGRD1A.6687  
                                                                           MLTGRD1A.6688  
      INTEGER                                                              MLTGRD1A.6689  
     &  I_DIM       !IN. NUMBER OF POINTS IN I-DIRECTION.                  MLTGRD1A.6690  
     &, J_DIM       !IN. NUMBER OF POINTS IN J-DIRECTION.                  MLTGRD1A.6691  
     &, K_DIM       !IN. NUMBER OF POINTS IN K-DIRECTION.                  MLTGRD1A.6692  
     &, NFB         !IN. NUMBER OF FORWARD / BACKWARD SWEEPS OF GRID       MLTGRD1A.6693  
     &              ! NEEDED.                                              MLTGRD1A.6694  
     &, IPAT        !IN. USED TO DISTINGUISH BETWEEN RED AND BLACK         MLTGRD1A.6695  
     &              ! POINTS.                                              MLTGRD1A.6696  
     &, NDIM        !IN. NUMBER OF DIMENSIONS.                             MLTGRD1A.6697  
     &, VERSION     !IN. VERSION OF MULTIGRID SCHEME.                      MLTGRD1A.6698  
     &, K_BC        !IN. BOUNDARY CONDITION IN K DIRECTION.                MLTGRD1A.6699  
                                                                           MLTGRD1A.6700  
      LOGICAL                                                              MLTGRD1A.6701  
     &  JAC     !IN. .TRUE. FOR JACOBI METHODS                             MLTGRD1A.6702  
     &, PAT     !IN. .TRUE. FOR PATTERN SCHEMES                            MLTGRD1A.6703  
     &, SYM     !IN. .TRUE. FOR SYMMETRIC SCHEMES                          MLTGRD1A.6704  
                                                                           MLTGRD1A.6705  
      REAL                                                                 MLTGRD1A.6706  
     &  SWJAC    !IN. A SWITCH WHICH IS ZERO FOR JACOBI METHODS            MLTGRD1A.6707  
     &, SWSYM    !IN. A SWITCH WHICH IS ZERO FOR SYMMETRIC METHODS         MLTGRD1A.6708  
     &, RMS_RES  !IN. ROOT MEAN SQUARE RESIDUAL NORM.                      MLTGRD1A.6709  
     &, RMS_INC  !IN. ROOT MEAN SQUARE INCREMENT NORM.                     MLTGRD1A.6710  
     &, W        !IN. RELAXATION PARAMETER FOR EACH VARIABLE IN SYSTEM     MLTGRD1A.6711  
                                                                           MLTGRD1A.6712  
      REAL                                                                 MLTGRD1A.6713  
     &  A(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.6714  
     &, B(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.6715  
     &, C1(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.6716  
     &, C2(I_DIM,J_DIM,K_DIM)   !IN. COEFFICIENT                           MLTGRD1A.6717  
     &, DEF(I_DIM,J_DIM,K_DIM)  !IN. COEFFICIENT                           MLTGRD1A.6718  
     &, D(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.6719  
     &, E(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.6720  
     &, F(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.6721  
     &, G(I_DIM,J_DIM,K_DIM)    !IN. COEFFICIENT                           MLTGRD1A.6722  
     &, RHS(I_DIM,J_DIM,K_DIM)  !IN. RIGHT-HAND-SIDE OF EQUATION.          MLTGRD1A.6723  
     &, COS_P_LATITUDE(I_DIM,J_DIM) !IN. COSINE OF LATITUDE AT Q POINTS.   MLTGRD1A.6724  
     &, SEC_P_LATITUDE(I_DIM,J_DIM) !IN. 1./COS OF LATITUDE AT Q POINTS.   MLTGRD1A.6725  
     &, COS_V_LATITUDE(I_DIM,J_DIM-1)                                      MLTGRD1A.6726  
     &                          !IN. COSINE OF LATITUDE AT V POINTS.       MLTGRD1A.6727  
     &, Z_Q(K_DIM)              !IN. Z AT Q POINTS.                        MLTGRD1A.6728  
     &, Z_MID(0:K_DIM)          !IN. Z MIDWAY BETWEEN Q POINTS.            MLTGRD1A.6729  
                                                                           MLTGRD1A.6730  
      REAL                                                                 MLTGRD1A.6731  
     &  Q(I_DIM,J_DIM,K_DIM)    !OUT. SOLUTION.                            MLTGRD1A.6732  
                                                                           MLTGRD1A.6733  
      REAL                                                                 MLTGRD1A.6734  
     &  LATITUDE_STEP_INVERSE  !IN.                                        MLTGRD1A.6735  
     &, LONGITUDE_STEP_INVERSE !IN.                                        MLTGRD1A.6736  
     &, EARTH_RADIUS_INVERSE   !IN                                         MLTGRD1A.6737  
                                                                           MLTGRD1A.6738  
C*----------------------------------------------------------------------   MLTGRD1A.6739  
                                                                           MLTGRD1A.6740  
C*L   6 LOCAL WORK ARRAYS REQUIRED.                                        MLTGRD1A.6741  
                                                                           MLTGRD1A.6742  
      REAL                                                                 MLTGRD1A.6743  
     &  LHS(K_DIM)                                                         MLTGRD1A.6744  
     &, A0(K_DIM,I_DIM)                                                    MLTGRD1A.6745  
     &, A1(K_DIM,I_DIM)                                                    MLTGRD1A.6746  
     &, A2(K_DIM,I_DIM)                                                    MLTGRD1A.6747  
     &, R(K_DIM,I_DIM)                                                     MLTGRD1A.6748  
     &, CORRECTIONS(I_DIM,J_DIM,K_DIM)                                     MLTGRD1A.6749  
                                                                           MLTGRD1A.6750  
C*----------------------------------------------------------------------   MLTGRD1A.6751  
C LOCAL VARIABLES.                                                         MLTGRD1A.6752  
                                                                           MLTGRD1A.6753  
      INTEGER                                                              MLTGRD1A.6754  
     &  I_BEGIN                                                            MLTGRD1A.6755  
     &, IK_BEGIN                                                           MLTGRD1A.6756  
     &, I_END                                                              MLTGRD1A.6757  
     &, I_STEP                                                             MLTGRD1A.6758  
     &, J_BEGIN                                                            MLTGRD1A.6759  
     &, J_END                                                              MLTGRD1A.6760  
     &, J_STEP                                                             MLTGRD1A.6761  
     &, K_BEGIN                                                            MLTGRD1A.6762  
     &, K_END                                                              MLTGRD1A.6763  
     &, I,J,K                                                              MLTGRD1A.6764  
     &, K_FB                                                               MLTGRD1A.6765  
     &, I_ZEBRA                                                            MLTGRD1A.6766  
                                                                           MLTGRD1A.6767  
      REAL                                                                 MLTGRD1A.6768  
     &  WEIGHT                                                             MLTGRD1A.6769  
     &, SCALAR                                                             MLTGRD1A.6770  
     &, FACTOR                                                             MLTGRD1A.6771  
                                                                           MLTGRD1A.6772  
C*L   EXTERNAL ROUTINES CALLED.                                            MLTGRD1A.6773  
      EXTERNAL MG_K_MATRIX                                                 MLTGRD1A.6774  
                                                                           MLTGRD1A.6775  
C*----------------------------------------------------------------------   MLTGRD1A.6776  
                                                                           MLTGRD1A.6777  
CFPP$ NOCONCUR R                                                           MLTGRD1A.6778  
                                                                           MLTGRD1A.6779  
CL----------------------------------------------------------------------   MLTGRD1A.6780  
CL    SECTION 1. INITIALISATION.                                           MLTGRD1A.6781  
CL----------------------------------------------------------------------   MLTGRD1A.6782  
                                                                           MLTGRD1A.6783  
CL    INITIALISE NORMS                                                     MLTGRD1A.6784  
                                                                           MLTGRD1A.6785  
      RMS_RES=0.0                                                          MLTGRD1A.6786  
      RMS_INC=0.0                                                          MLTGRD1A.6787  
                                                                           MLTGRD1A.6788  
CL    SET TEMPORARY RELAXATION PARAMETER TO ZERO FOR JACOBI:               MLTGRD1A.6789  
                                                                           MLTGRD1A.6790  
      WEIGHT = SWJAC*W                                                     MLTGRD1A.6791  
                                                                           MLTGRD1A.6792  
CL    DEFINE POINT ORDERING IN IJ PLANE FOR FIRST SWEEP                    MLTGRD1A.6793  
                                                                           MLTGRD1A.6794  
      I_BEGIN = 1                                                          MLTGRD1A.6795  
      I_END   = I_DIM                                                      MLTGRD1A.6796  
      IF( IPAT.EQ.2) THEN                                                  MLTGRD1A.6797  
        I_STEP  = 2                                                        MLTGRD1A.6798  
      ELSE                                                                 MLTGRD1A.6799  
        I_STEP  = 1                                                        MLTGRD1A.6800  
      END IF                                                               MLTGRD1A.6801  
      J_BEGIN = 1                                                          MLTGRD1A.6802  
      J_END   = J_DIM                                                      MLTGRD1A.6803  
      J_STEP  = 1                                                          MLTGRD1A.6804  
      IF(VERSION.EQ.4) THEN                                                MLTGRD1A.6805  
CL DO NOT DO BOUNDARIES.                                                   MLTGRD1A.6806  
        IF(I_NT) THEN                                                      MLTGRD1A.6807  
          I_BEGIN = 2                                                      MLTGRD1A.6808  
          I_END = I_DIM-1                                                  MLTGRD1A.6809  
        END IF                                                             MLTGRD1A.6810  
        IF(J_NT) THEN                                                      MLTGRD1A.6811  
          J_BEGIN = 2                                                      MLTGRD1A.6812  
          J_END = J_DIM-1                                                  MLTGRD1A.6813  
        END IF                                                             MLTGRD1A.6814  
      END IF                                                               MLTGRD1A.6815  
      K_BEGIN = 1                                                          MLTGRD1A.6816  
      K_END = K_DIM                                                        MLTGRD1A.6817  
      IF (K_BC.EQ.2 ) THEN                                                 MLTGRD1A.6818  
        K_END = K_DIM-1                                                    MLTGRD1A.6819  
      ELSE IF (K_BC.EQ.3 ) THEN                                            MLTGRD1A.6820  
        K_BEGIN = 2                                                        MLTGRD1A.6821  
      ELSE IF (K_BC.EQ. 4) THEN                                            MLTGRD1A.6822  
        K_BEGIN = 2                                                        MLTGRD1A.6823  
        K_END = K_DIM-1                                                    MLTGRD1A.6824  
      END IF                                                               MLTGRD1A.6825  
                                                                           MLTGRD1A.6826  
CL    SET ZEBRA SWITCH FOR FIRST SWEEP                                     MLTGRD1A.6827  
                                                                           MLTGRD1A.6828  
      I_ZEBRA=0                                                            MLTGRD1A.6829  
                                                                           MLTGRD1A.6830  
CL----------------------------------------------------------------------   MLTGRD1A.6831  
CL    SECTION 2. PERFORM APPROPRIATE LINE SMOOTHING.                       MLTGRD1A.6832  
CL----------------------------------------------------------------------   MLTGRD1A.6833  
                                                                           MLTGRD1A.6834  
CL    FORWARD / BACKWARD SWEEP                                             MLTGRD1A.6835  
                                                                           MLTGRD1A.6836  
      DO K_FB= 1,NFB                                                       MLTGRD1A.6837  
                                                                           MLTGRD1A.6838  
        RMS_RES = SWSYM*RMS_RES                                            MLTGRD1A.6839  
        RMS_INC = SWSYM*RMS_INC                                            MLTGRD1A.6840  
                                                                           MLTGRD1A.6841  
CL    SWEEP OVER IK PLANE IN PRESCRIBED POINT ORDER                        MLTGRD1A.6842  
                                                                           MLTGRD1A.6843  
        DO J = J_BEGIN,J_END,J_STEP                                        MLTGRD1A.6844  
          IF(.NOT.(VERSION.EQ.2.AND.J.EQ.(J_DIM+1)/2)) THEN                MLTGRD1A.6845  
                                                                           MLTGRD1A.6846  
            IF (IPAT.EQ.2) THEN                                            MLTGRD1A.6847  
CL    START EACH LINE ON A DIFFERENT COLOUR.                               MLTGRD1A.6848  
              IF(MOD(I_BEGIN+J+I_ZEBRA,IPAT).NE.0 .AND. K_FB.EQ.1) THEN    MLTGRD1A.6849  
                IK_BEGIN = I_BEGIN + 1                                     MLTGRD1A.6850  
              ELSE IF(MOD(I_BEGIN+J+I_ZEBRA,IPAT).NE.0 .AND.               MLTGRD1A.6851  
     &                K_FB.EQ.2) THEN                                      MLTGRD1A.6852  
                IK_BEGIN = I_BEGIN - 1                                     MLTGRD1A.6853  
              ELSE                                                         MLTGRD1A.6854  
                IK_BEGIN = I_BEGIN                                         MLTGRD1A.6855  
              END IF                                                       MLTGRD1A.6856  
            ELSE                                                           MLTGRD1A.6857  
              IK_BEGIN = I_BEGIN                                           MLTGRD1A.6858  
            END IF                                                         MLTGRD1A.6859  
                                                                           MLTGRD1A.6860  
            DO I = IK_BEGIN,I_END,I_STEP                                   MLTGRD1A.6861  
                                                                           MLTGRD1A.6862  
CL    ASSEMBLE TRIDIAGONAL SYSTEM TO INVERT FOR LINE VALUES                MLTGRD1A.6863  
                                                                           MLTGRD1A.6864  
              CALL MG_K_MATRIX(LHS,A0(1,I),A1(1,I),A2(1,I),Q,A,B,          MLTGRD1A.6865  
     &                         C1,C2,DEF,D,E,F,G,I_DIM,J_DIM,K_DIM,        MLTGRD1A.6866  
     &                         COS_P_LATITUDE,SEC_P_LATITUDE,              MLTGRD1A.6867  
     &                         COS_V_LATITUDE,EARTH_RADIUS_INVERSE,        MLTGRD1A.6868  
     &                         LATITUDE_STEP_INVERSE,                      MLTGRD1A.6869  
     &                         LONGITUDE_STEP_INVERSE,I,J,VERSION,         MLTGRD1A.6870  
     &                         Z_Q,Z_MID,I_NT,J_NT)                        MLTGRD1A.6871  
                                                                           MLTGRD1A.6872  
              DO K=K_BEGIN,K_END                                           MLTGRD1A.6873  
                R(K,I) = LHS(K)-RHS(I,J,K)                                 MLTGRD1A.6874  
                RMS_RES = RMS_RES+R(K,I)*R(K,I)                            MLTGRD1A.6875  
              END DO                                                       MLTGRD1A.6876  
            END DO                                                         MLTGRD1A.6877  
                                                                           MLTGRD1A.6878  
CL    SOLVE TRIDIAGONAL SYSTEM FOR CORRECTIONS X                           MLTGRD1A.6879  
                                                                           MLTGRD1A.6880  
C SOLUTION IS IN R(K)                                                      MLTGRD1A.6881  
C REDUCE MATRIX TO UPPER DIAGONAL FORM.                                    MLTGRD1A.6882  
                                                                           MLTGRD1A.6883  
            DO I=IK_BEGIN,I_END,I_STEP                                     MLTGRD1A.6884  
              A0(K_BEGIN,I) = 1./A0(K_BEGIN,I)                             MLTGRD1A.6885  
            END DO                                                         MLTGRD1A.6886  
            DO K=K_BEGIN+1,K_END                                           MLTGRD1A.6887  
              DO I=IK_BEGIN,I_END,I_STEP                                   MLTGRD1A.6888  
                FACTOR = A2(K,I) * A0(K-1,I)                               MLTGRD1A.6889  
                A0(K,I) = 1./(A0(K,I) - FACTOR*A1(K-1,I))                  MLTGRD1A.6890  
                R(K,I) = R(K,I) - FACTOR*R(K-1,I)                          MLTGRD1A.6891  
              END DO                                                       MLTGRD1A.6892  
            END DO                                                         MLTGRD1A.6893  
                                                                           MLTGRD1A.6894  
C BACK SUBSTITUTE TO GET SOLUTION.                                         MLTGRD1A.6895  
                                                                           MLTGRD1A.6896  
            DO I=IK_BEGIN,I_END,I_STEP                                     MLTGRD1A.6897  
              R(K_END,I)  = A0(K_END,I)*R(K_END,I)                         MLTGRD1A.6898  
            END DO                                                         MLTGRD1A.6899  
            DO K= K_END-1,K_BEGIN,-1                                       MLTGRD1A.6900  
              DO I=IK_BEGIN,I_END,I_STEP                                   MLTGRD1A.6901  
                R(K,I) = A0(K,I)*(R(K,I)-A1(K,I)*R(K+1,I))                 MLTGRD1A.6902  
              END DO                                                       MLTGRD1A.6903  
            END DO                                                         MLTGRD1A.6904  
                                                                           MLTGRD1A.6905  
CL    STORE CORRECTIONS IN WORKSPACE                                       MLTGRD1A.6906  
CL    AND ADD TO CURRENT SOLUTION UNLESS WT=0 (JACOBI)                     MLTGRD1A.6907  
                                                                           MLTGRD1A.6908  
            DO K=K_BEGIN,K_END                                             MLTGRD1A.6909  
              DO I=IK_BEGIN,I_END,I_STEP                                   MLTGRD1A.6910  
                Q(I,J,K)=Q(I,J,K)-WEIGHT*R(K,I)                            MLTGRD1A.6911  
                RMS_INC=RMS_INC+R(K,I)*R(K,I)                              MLTGRD1A.6912  
              END DO                                                       MLTGRD1A.6913  
            END DO                                                         MLTGRD1A.6914  
                                                                           MLTGRD1A.6915  
            IF (JAC) THEN                                                  MLTGRD1A.6916  
              DO K=K_BEGIN,K_END                                           MLTGRD1A.6917  
                DO I=IK_BEGIN,I_END,I_STEP                                 MLTGRD1A.6918  
                  CORRECTIONS(I,J,K)=R(K,I)                                MLTGRD1A.6919  
                END DO                                                     MLTGRD1A.6920  
              END DO                                                       MLTGRD1A.6921  
            END IF                                                         MLTGRD1A.6922  
                                                                           MLTGRD1A.6923  
          END IF                                                           MLTGRD1A.6924  
CL    END OF IJ PLANE SWEEP                                                MLTGRD1A.6925  
        END DO                                                             MLTGRD1A.6926  
                                                                           MLTGRD1A.6927  
CL    ADD CORRECTIONS FOR THE JACOBI METHOD                                MLTGRD1A.6928  
                                                                           MLTGRD1A.6929  
        IF(JAC) THEN                                                       MLTGRD1A.6930  
          DO K=K_BEGIN,K_END                                               MLTGRD1A.6931  
            DO J=1,J_DIM                                                   MLTGRD1A.6932  
              IF(.NOT.(VERSION.EQ.2.AND.J.EQ.(J_DIM+1)/2)) THEN            MLTGRD1A.6933  
                DO I=1,I_DIM                                               MLTGRD1A.6934  
                  Q(I,J,K)=Q(I,J,K)-W*CORRECTIONS(I,J,K)                   MLTGRD1A.6935  
                END DO                                                     MLTGRD1A.6936  
              END IF                                                       MLTGRD1A.6937  
            END DO                                                         MLTGRD1A.6938  
          END DO                                                           MLTGRD1A.6939  
        END IF                                                             MLTGRD1A.6940  
                                                                           MLTGRD1A.6941  
CL    RESET POINT ORDERING OF IJ PLANE FOR SECOND SWEEP                    MLTGRD1A.6942  
                                                                           MLTGRD1A.6943  
        I = I_BEGIN                                                        MLTGRD1A.6944  
        I_BEGIN = I_END                                                    MLTGRD1A.6945  
        I_END   =  I                                                       MLTGRD1A.6946  
        I_STEP  = -I_STEP                                                  MLTGRD1A.6947  
        J = J_BEGIN                                                        MLTGRD1A.6948  
        J_BEGIN = J_END                                                    MLTGRD1A.6949  
        J_END   =  J                                                       MLTGRD1A.6950  
        J_STEP  = -1                                                       MLTGRD1A.6951  
                                                                           MLTGRD1A.6952  
CL    RESET ZEBRA SWITCH FOR SECOND SWEEP                                  MLTGRD1A.6953  
                                                                           MLTGRD1A.6954  
        I_ZEBRA=1                                                          MLTGRD1A.6955  
                                                                           MLTGRD1A.6956  
      END DO                                                               MLTGRD1A.6957  
                                                                           MLTGRD1A.6958  
CL    END OF ROUTINE MG_K_LINE                                             MLTGRD1A.6959  
                                                                           MLTGRD1A.6960  
      RETURN                                                               MLTGRD1A.6961  
      END                                                                  MLTGRD1A.6962  
*ENDIF                                                                     MLTGRD1A.6963  
